Content-Type: multipart/related; start=<op.mhtml.1330672086758.eeb374092c036847@85.143.29.174>; boundary=----------d0i996DVyRvWTiFjAd5Dp3
Content-Location: http://www.java-course.ru/students/students.php?name=part10
Subject: =?utf-8?Q?Java-=D1=82=D0=B5=D1=85=D0=BD=D0=BE=D0=BB=D0=BE=D0=B3=D0=B8=D0=B8?=
MIME-Version: 1.0

------------d0i996DVyRvWTiFjAd5Dp3
Content-Disposition: inline; filename=students.htm
Content-Type: text/html; charset=windows-1251; name=students.htm
Content-ID: <op.mhtml.1330672086758.eeb374092c036847@85.143.29.174>
Content-Location: http://www.java-course.ru/students/students.php?name=part10
Content-Transfer-Encoding: 8bit

<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=cp1251">
        <link rel="stylesheet" type="text/css" href="../css/javacourse.css" />

        <title>Java-технологии</title>
    </head>

    <body>
        <!-- Yandex.Metrika counter -->
<div style="display:none;"><script type="text/javascript">
(function(w, c) {
    (w[c] = w[c] || []).push(function() {
        try {
            w.yaCounter7161052 = new Ya.Metrika({id:7161052,
                    clickmap:true,
                    accurateTrackBounce:true});
        }
        catch(e) { }
    });
})(window, 'yandex_metrika_callbacks');
</script></div>
<script src="//mc.yandex.ru/metrika/watch.js" type="text/javascript" defer="defer"></script>
<noscript><div><img src="//mc.yandex.ru/watch/7161052" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->

<div class='jc-header'>
    <table class="jc-table-header">
        <tbody>
            <tr>
                <td><strong><a href="/">О сайте</a></strong></td>
                <td><strong><a href="/students/students.php">Студенческий отдел кадров</a></strong></td>
                <td><strong><a href="/articles/articles.php">Статьи</a></strong></td>
                <td><strong><a href="/courses/courses.php">Курсы по Java</a></strong></td>
                <td><strong><a href="/sader/index.php">Вопросы/Ответы</a></strong></td>
                <td><strong><a href="http://vingrad.ru/blogs/AntonSaburov/" target="_blank">Блог</a></strong></td>
                <td><strong><a href="mailto:AntonSaburov@yandex.ru">email</a></strong></td>
            </tr>
        </tbody>
    </table>
</div>
        <table width="100%">
            <tr valign="top">
                <td style="width: 20%">
                    <div class='jc-nav'>
                        <h4>Книга 1 - Начальные сведения</h4>
<ol>
    <li>        
        <a href="students.php?name=intro">Введение</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part1">Используем коллекции</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part2">Пользовательский интерфейс: начало</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part3">База данных</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part4">Пользовательский интерфейс, часть 1</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part5">Пользовательский интерфейс, часть 2</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part6">Пользовательский интерфейс, часть 3</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part7">WEB: что такое Servlet ?</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part8">WEB: что такое JSP ?</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part9">Простое WEB-приложение</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part10">Тестирование с точки зрения разработчика</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part11">Application Server и Enterprise Java Beans</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part12">Application Server и Enterprise Java Beans - копаем вглубь</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part13">"Студенческий отдел кадров" в виде Enterprise-приложения</a><br/>
    </li>
</ol>
<h4>Книга 2 - Более профессиональный подход</h4>
<ol>
    <li>        
        <a href="students.php?name=part14">Схема построения Enterprise-приложения</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part15">Новая структура данных</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part16">Hibernate. Начало пути</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part17">Hibernate. Запись в виде XML-файлов</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part18">Hibernate. Аннотации вместо XML</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part19">Spring. Бизнес-уровень в действии</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part20">Spring. Переходим на Web</a><br/>
    </li>
    <li>        
        <a href="students.php?name=part21">Struts 1.x. Первое знакомство</a><br/>
    </li>
</ol>                    </div>
                </td>


                <td width='80%'>
                    <div class="jc-article">
                                <p class="copyright" align="right">
            Студенческий отдел кадров<br/>
            Пособие по JAVA-технологиям<br/>
            (с) AntonSaburov<br/>
        </p>

        <h3>Тестирование с точки зрения разработчика</h3>

        <p class="plain">
            Существует целая область знаний посвященная тестам. Тесты типа "черного ящика", тесты типа
            "белого ящика", стратегии тестирования и прочая.<br/>
            Но зачем они разработчику ? Он же написал свою функцию, проверил, что она работает. И пусть
            тестер мучается, чтобы приложение все-таки свалилось. Это его работа - находить баги в
            супер-проверенном коде. А мы уж исправим. Работа такая.<br/>
            Ответ очень простой - для того, чтобы убедиться, что весь предыдущий код работает также как
            и до наших изменений. Чем больше мы можем проверить без помощи человека - тем лучше.
            Основные вопросы, которые возникают в процессе придумывания тестов - что же надо тестировать и как.
            Иногда доходит до абсурда - ты видишь, что вставил запись - считывать ее опять? Так ведь это же
            очевидно - раз вставилась запись - само собой получим тоже самое в ответе. Или зачем проверять
            выборку если она работает ? Или может проверить, что корректно работают set и get? Я некоторое
            время (правда это было давно) здорово мучался с этими вопросами. Полагаю, что я был не один.
            Единого подхода КАК писать - не выработал. Но ЧТО надо тестировать - у меня появился простой рецепт:
            <strong>Тестируйте то, что вызывает функции, которые могу измениться.</strong> Исходя из этого
            и придумывайте тесты. Давайте рассмотрим это на примере.<br/>
            Итак у нас есть таблица студентов, для которой у нас есть методы модификации.
            Представим, что разработчики получили указание, что поле "Специальность" надо переименовать.
            Придется нам изменить методы считывания данных, вставки, модификации и удаления.
            Быстро переименовав поле в таблице и во всех запросах мы проверяем, что наши методы работают
            корректно и рапортуем о завершении ? Конечно не так - нам надо также проверить все места, где
            вызываются наши методы и проверить там корректность передаваемых параметров. Хорошо, если
            только одно приложение использует наш замечательный класс ManagementSystem. А если их несколько ?
            Все будем запускать и все будем проверять ? А если их хотя бы 3 и в каждом вызовов по 10-15 ? И
            надо все помнить. И это еще очень небольшой проект. Что же происходит, когда в проекте миллион
            строк ? Ощутили проблемы модификации существующегго кода ? Я когда-то это сильно ощутил. Мне
            предложили ввести дополнительный параметр (транзакцию) в проекте из 50 Мб исходных кодов. Тестов
            там не было. Провозился я тогда более 2 недель. Только над серверной частью. А там была еще часть
            из JSP. И я не был уверен, что все работает корректно. Потому что одних таблиц было порядка 200.
            И каждое обращение к таблицам надо было обернуть транзакцией и проверить, что все работает корректно.
        </p>
        <p class="plain">
            Так какова стратегия написания тестов для нашего случая ?
            Т.к. база может меняться, то мы должны иметь быстрый способ проверить - все ли методы, которые 
            работают непосредственно с базой, в порядке. Можно написать простые методы, которые что-то 
            модифицируют в базе и хотя бы не вызывают ошибки выполнения. Уже прогресс. Добавили поле и 
            запустили сразу тесты - получили список мест, где надо исправлять. Можно сделать глупый на 
            первый взгляд тест - записали в базу, считали и проверили с тем, что раньше записывали. Да что 
            там может случится? Оказывается может. Триггер разработчики базы ввели. А мы не знали. И получаем 
            не то, что рассчитывали. Теперь либо меняем тест, либо меняем код.<br/>
            И вот наш глупый тест, который вставляет данные, а потом их же считывает, оказывается очень 
            нужным и удобным. Во-первых мы проверим, что это просто работает. Во-вторых - мы убедимся в том, 
            что данные записываются именно так, как нам надо. В-третьих - для этого мы не запускаем приложение 
            и не работаем с ним сами.<br/>
            Мы можем это делать сразу после сборки тем же самым Ant'ом - создадим цель "test" и запустим класс, 
            который будет вызывать все, что только можно протестировать.<br/>
            Заметьте - не ищем по коду, не запускаем приложение, не смотрим в базу с целью понять, что же 
            вставилось. Мы просто запускаем много тестов и смотрим результат. Очень мощный способ повышения 
            эффективности разработки. Даже если Вы были единственным разработчиком, то спустя 3-4 месяца Вы
            вряд ли вспомните, что же надо исправлять точно. А тут Вам все покажут Вами же написанные тесты.
            Повторюсь еще раз - тесты пишутся не для того, чтобы найти ошибку (это задача тестеров), а только 
            для того, чтобы проверить, то что Вы только что написали. И что самое главное - они пишутся для
            проверки корректности будущих изменений. Если Вы будете исходить из этой стратегии, то писать и
            придумывать тесты будет проще - Вам нужно придумать тест, который может автоматически проверить, 
            работает ли Ваша функция вообще и корректно ли она все это делает. И если Вы будете еще понимать
            что может измениться, то и тесты можно будет писать еще более корректно.
        </p>

        <h3>Стадии тестирования</h3>
        <p class="plain">
            За долгие годы существования понятия unit-тестирования были выработаны некоторые подходы, которые
            помогают несколько автоматизировать создание тестов. "Автоматизировать" в данном случае не означает,
            что за Вас какая-то программа напишет тесты. Она означает, что есть определенная стратегия написания,
            которая упрощает работы над созданием тестов.
        </p>
        <p class="plain">
            Некоторые тесты можно запустить и проверить программно, некоторые (особенно это касается UI) - крайне
            сложно. Для того же UI бывает удобно просто записать движения мышки, нажатие клавиатуры и потом эти
            действия "натравить" на Вашу систему. Ну и там отслеживать, что и как обрабатывает такое поведение.
        </p>
        <p class="plain">
            Каждый раз при запуске тест должен пройти через 4 стадии:
            <ol>
                <li>Инициализация - надо подготовить необходимые данные для теста</li>
                <li>Запуск тестируемой функции/метода - т.е. мы просто выполняем проверяемую функцию</li>
                <li>Проверка - на этом этапе нам надо проверить результат выполнения</li>
                <li>Освобождение ресурсов - надо "почистить" наши изменения</li>
            </ol>
        </p>
        <p class="plain">
            <strong>Инициализация</strong><br/>
            На самом деле это один из сложных этапов. Надо создать для программы полную иллюзию того, что она
            работает в обычном режиме. А для того же сервлета такое сделать не так уж и просто.<br/>
            Или работа с базой данных - для заполнения какой-либо таблицы нужен заранее набор справочных данных.
            Тех же контрагентов, пользователей, прав и прочая. Откуда это все появится ? Надо будет что-то
            придумывать.<br/>
            Да и нередко бывает, что для метода какого-то класса надо создать еще десяток объектов. Вообщем,
            задачка достаточно сложная. Иногда можно пойти по пути создания окружения для каждого теста в 
            отдельности, иногда - для всех тестов вместе. Выбирать Вам.<br/>
            Очень советую обратить внимание на целую коллекцию так называемых Mock-объектов. Для примера - Вы
            хотите проверить свой сервлет. Но на вход ему надо подать объекты, которые реализуют
            интерфейсы HttpServletRequest b YttpServletResponse. Web-сервер их предоставляет, но без него
            их надо как-то создавать самим. Так вот есть такие уже готовые. Просто создаете их, добавляете
            нужные параметры и используете.
        </p>
        <p class="plain">
            <strong>Запуск</strong><br/>
            Здесь особо говорить не о чем - запуск он и в Африке запуск. Надо выполнить метод или несколько.
            Если Вы все необходимые переменные, данные и прочая создали на этапи инициализации, то здесь особо и
            говорить не о чем. Правда есть момент, оторый я бы выделил - тесты должны выполняться быстро. Вряд ли
            Вам понравиться, что при запуске тестов можно идти пить кофе каждый раз. При такой производительности
            Вас и с работы могут попросить. Поэтому иногда приходится придумывать методы, котоыре позволяют
            выполнять методы быстро. Часто это связано с обращениям к внешним ресурсам - базы данных, внешние
            службы. Иногда бывает так, что надо обратиться к тому, чего вооще нет - например Вам надо работать
            с кассовым аппаратом. Приходится пользоваться разделением интерфейсов и реализаций. Ваша система
            работает с интерфейсом, за которым "прячется" эмулятор кассового аппарата. Так что если вдруг у Вас
            нет реального объекта для тестироваиня - заменяйте его фиктивным и тестируйте свою систему с таким.
            Что же касается базы данных - иногда тестировать надо не саму работу с базой данных, а обработку
            данных из нее. Можно сделать опять же какой-нибуль заменитель, который будет возвращать нужные нам
            данные. А это будет быстрее, чем к рельной базе ходить. Особенно если учесть, что такх обращений
            может быть много.<br/>
            Здесь можно посоветовать следующее - проектируйте сразу с учетом того, что надо будет писать тесты.
        </p>
        <p class="plain">
            <strong>Проверка</strong><br/>
            Здесь надо просто проверить, что система сделал то, что от нее и требовалось. Либо проверив какие-то
            данные, либо как-то отследив действия системы (по логам, по вызовам - заменить вызовы реальные на
            вызовы подставных объектов). По данным конечно проще, да и часто этого хватает. Отслеживание
            действия - задача более серьезная. Здесь надо предусмотреть обработку разных веток программы, верную
            реакцию на исключения. А если учесть, что такие исключения бывают не только внутри программы, но и
            снаружи, от внешних ресурсов - задачка нетривиальная.
        </p>
        <p class="plain">
            <strong>Освобождение ресурсов</strong><br/>
            Ну здесь надо просто сделать все, чтобы ваши действия вернули систему в сосотояние до Ваших
            разрушительных действий. Удаляйте данные, освобождайте ресурсы - вообщем сами понимаете, что
            здесь тоже есть над чем подумать.
        </p>
        <p class="plain">
            Но реализация этих этапов - задача достаточно творческая. Надо копить опыт, придумывать, пробовать.
            И когда ты начинаешь понимать и принимать идею unit-тестов - они становятся очень интересной областью.
            Так что получайте удовольствие :)
        </p>
        <p class="plain">
            А теперь мы расмотрим один из самых известных продуктов для создания Unit-тестов - JUnit
        </p>

        <h3>JUnit - один из самых распространенных framework для тестирования</h3>
        <p class="plain">
            По большому счету JUnit прямо-таки издевательски простой пакет. Вся его задача состоит в том,
            чтобы удобно запустить некий класс, который будет состоять из функций предназначенных для
            тестирования Вашего приложения. В нем все предназначено только для одной цели - удобно писать
            и запускать тесты, которые Вы придумали сами. Вообщем-то и все. Если этот пакет освоить хорошо,
            то он становиться так же необохдим и удобен как тот же FAR или TotalCommander.
        </p>
        <p class="plain">
            Мы рассмотрим JUnit на примере сравнительно новой версии 4.4 (со временем она тоже будет устаревшей).
            Загрузить ее можно с сайта - <a href="http://www.junit.org/">http://www.junit.org/</a>
            Наверху справа есть пункт "Download JUnit". Дальше Вас кинут на sourceforge.net<br/>
            <a href="http://sourceforge.net/project/showfiles.php?group_id=15278&package_id=12472">
                http://sourceforge.net/project/showfiles.php?group_id=15278&package_id=12472
            </a><br/>
            В процессе изучения мы будем вводить классы, которые используются в JUnit - после распаковки
            Вы можете найти на них документацию в каталоге doc - там описание API. Я постараюсь остановиться
            на JUnit подробнее потому, что это очень важный и нужный инструмент. Но, как говаривал Козьма
            Прутков, нельзя объять необъятное :)<br/>
            Также стоит обратить внимание на то, что версия 4 требует JAVA 1.5 и выше.<br/>
            Учтите, что API версии 4 отличается от версии 3.8, причем очень сильно. В данной статье я
            рассмотрю некоторые возможности, которые делают тестирование более комфортным. Но сказать, что
            это в разы облегчит Вам написание тестов - я бы так не сказал. Но тем не менее - если Вы
            привыкните писать unit-тесты, то это очень сильно поможет Вам в разработке. Ну а теперь за дело.
        </p>
        <p class="plain">
            <strong>Первый простой тест</strong><br/>
            Давайте создадим несложный класс, который будет делать очень простую операцию - складывать числа.
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> Calc
{
  <span class="keyword-directive">public</span> <span class="keyword-directive">int</span> getSum(<span class="keyword-directive">int</span> x, <span class="keyword-directive">int</span> y)
  {
    <span class="keyword-directive">return</span> x+y;
  }
}
        </pre>
        <p class="plain">
            Теперь мы должны написать класс, который тестирует наше "сложное" приложение. В отличии от
            версии 3.8, где тестирующий класс должен был наследоваться от класса TestCase и все методы
            для тестирования должны были начинаться с "test" (Например: testSum, testCalculation и т.д.),
            теперь этого всего не надо. Все необходимое нам заменяет аннотация - об этом Вы можете
            прочесть в статье <a href="http://forum.vingrad.ru/articles/topic-157946.html">Java 5.0"</a>.
            Наш класс выглядит очень просто
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">import</span> org.junit.Test;
<span class="comment">// Еще одна &quot;вкусность&quot; Java 5 - можно импортировать static-методы</span>
<span class="keyword-directive">import</span> <span class="keyword-directive">static</span> org.junit.Assert.assertEquals;

<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> TestCalc {
    <span class="comment">// @Test - это аннотация, которая обозначает,</span>
    <span class="comment">// что метод должен быть вызван для тестирования чего-нибудь</span>
    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSumTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        <span class="comment">// Этот метод вызовет исключение, если результат нашего калькулятора будет отличен от 50</span>
        assertEquals(c.getSum(20, 30), 50);
    }
}
        </pre>
        <p class="plain">
            Положите в каталог с нашими классами файл junit-4.4.jar (Который Вы должны скачать). Для сборки
            нашего приложения запускаем команду:<br/>
            <span class="code-text">javac -cp junit-4.4.jar *.java</span>
        </p>
        <p class="plain">
            Теперь запускаем<br/>
            <span class="code-text">java -cp .;junit-4.4.jar -ea org.junit.runner.JUnitCore TestCalc</span>
        </p>
        <p class="plain">
            Ключик (-ea) разрешает обработку assert - вообщем-то особо нам это не важно, но как-то привычнее.
            И ... на экране много не видно :)
        </p>
        <pre class="code-snippet">
JUnit version 4.4
.
Time: 0,031

OK (1 test)
        </pre>
        <p class="plain">
            Это все. Информации вообщем-то немного и запускать тоже пока не очень удобно. Количество
            точек после строки JUnit version 4.4 указывает, сколько тестов мы прошли. Как Вы возможно
            догадались все тесты исполняет специальный "запускатель" JUnitCore. Ему мы передаем класс,
            который будем тестировать.<br/>
            Понятно, что для тестирования одного метода мы написали больше, чем нужно. Целый класс.
            Да еще и "запускатель". Не много ли чести :)<br/>
            Но заметьте одну ГЛАВНУЮ ОСОБЕННОСТЬ - МЫ НИГДЕ не вызываем метод getSumTest. За нас его
            исполняет JUnitCore. Он находит методы, которые мы обозначили аннотацией @Test и выполняет их.
            Т.е. если мы напишем еще 10 методов для Calc, то для тестирования в нашем классе TestCalc мы
            напишем еще 10 методов (может и больше - ведь тестировать метод можно несколькими способами).
            Но мы НИГДЕ не будем писать код для ВЫЗОВА этих методов. Правда пока мы не умеем управлять
            порядком наших тестов, но это возможно и мы сможем посмотреть как это делается.<br/>
            Давайте "испортим" наш класс Calc. По каким-то внутренним требованиям кто-то переписал наш
            замечательный метод так:
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> Calc
{
  <span class="keyword-directive">public</span> <span class="keyword-directive">int</span> getSum(<span class="keyword-directive">int</span> x, <span class="keyword-directive">int</span> y)
  {
    <span class="keyword-directive">return</span> x+y;
  }

  <span class="keyword-directive">public</span> <span class="keyword-directive">int</span> getSubtraction(<span class="keyword-directive">int</span> x, <span class="keyword-directive">int</span> y)
  {
    <span class="keyword-directive">return</span> x-y-1;
  }
}
        </pre>
        <p class="plain">
            Как видите наш второй метод содержит ошибку - разность вообщем-то не так вычисляется. Класс
            TestCalc мы тоже должны переписать. Точнее дополнить еще одним методом для тестирования вычитания.
            Но тестирует он "верную" версию - т.е. вычитает по правилам арифметики.
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">import</span> org.junit.Test;
<span class="keyword-directive">import</span> <span class="keyword-directive">static</span> org.junit.Assert.assertEquals;

<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> TestCalc {
    <span class="comment">// @Test - это аннотация, котор</span><span class="comment">ая обозначает, что метод должен быть вызван для тестирования чего-нибудь</span>

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSumTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        <span class="comment">// Этот метод вызовет исключение, если результат </span><span class="comment">нашего калькулятора будет отличен от 50</span>
        assertEquals(c.getSum(20, 30), 50);
    }

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSubtractionTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        <span class="comment">// Этот метод вызовет исключение, если результат нашего калькулятора будет отличен от -10</span>
        assertEquals(-10, c.getSubtraction(20, 30));
    }
}
        </pre>
        <p class="plain">
            Теперь перекомпилируем наши классы<br/>
            <span class="code-text">javac -cp junit-4.4.jar *.java</span>
        </p>
        <p class="plain">
            Опять запускаем командой<br/>
            <span class="code-text">java -cp .;junit-4.4.jar -ea org.junit.runner.JUnitCore TestCalc</span>
        </p>
        <p class="plain">
            И видим:
        </p>
        <pre class="code-snippet">
JUnit version 4.4
..E
Time: 0,047
There was 1 failure:
1) getSubtractionTest(TestCalc)
java.lang.AssertionError: expected:<-10> but was:<-11>
        at org.junit.Assert.fail(Assert.java:74)
        at org.junit.Assert.failNotEquals(Assert.java:448)
        at org.junit.Assert.assertEquals(Assert.java:102)
        at org.junit.Assert.assertEquals(Assert.java:323)
        at org.junit.Assert.assertEquals(Assert.java:319)
        at TestCalc.getSubtractionTest(TestCalc.java:26)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
        at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
        at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
        at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
        at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
        at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
        at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
        at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
        at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
        at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
        at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
        at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
        at org.junit.internal.runners.CompositeRunner.runChildren(CompositeRunner.java:33)
        at org.junit.internal.runners.CompositeRunner.run(CompositeRunner.java:28)
        at org.junit.runner.JUnitCore.run(JUnitCore.java:130)
        at org.junit.runner.JUnitCore.run(JUnitCore.java:109)
        at org.junit.runner.JUnitCore.run(JUnitCore.java:100)
        at org.junit.runner.JUnitCore.runMain(JUnitCore.java:81)
        at org.junit.runner.JUnitCore.main(JUnitCore.java:44)

FAILURES!!!
Tests run: 2,  Failures: 1
        </pre>
        <p class="plain">
            Тут уже информации гораздо больше. Видно, что не выполнен метод getSubstractionTest и
            даже есть подсказка для чисел<br/>
            <span class="code-text">expected:<-10> but was:<-11></span>
        </p>
        <p class="plain">
            Но пока удобств все равно не так уж много. Мало информации, импользуется какой-то JUnitCore.
            Попробуем сделать наше приложение более информативным и удобным. Изменим наш тестирующий
            класс - оснастим его методом main. А то надоело вызывать JUnitCore.
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">import</span> org.junit.Test;
<span class="keyword-directive">import</span> <span class="keyword-directive">static</span> org.junit.Assert.assertEquals;

<span class="comment">// Теперь мы не будем вызывать в командной строке JUnitCore</span>
<span class="keyword-directive">import</span> org.junit.runner.JUnitCore;

<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> TestCalc {

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSumTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(50, c.getSum(20, 30));
    }

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSubtractionTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(-10, c.getSubtraction(20, 30));
    }

    <span class="comment">// Вот где у нас будет вызов нашего тестирующего класса</span>
    <span class="keyword-directive">publ</span><span class="keyword-directive">ic</span> <span class="keyword-directive">static</span> <span class="keyword-directive">void</span> main(String[] args) {
        JUnitCore core = <span class="keyword-directive">new</span> JUnitCore();
        core.run(TestCalc.<span class="keyword-directive">class</span>);
    }
}
        </pre>
        <p class="plain">
            Ну теперь компилируем и запускаем<br/>
            <span class="code-text">javac -cp junit-4.4.jar *.java</span><br/>
            <span class="code-text">java -cp .;junit-4.4.jar -ea TestCalc</span><br/>
            И ... Вообще ничего нет. А как же страшные ошибки ? Они же у нас есть. На всякий случай выполним опять
            через JUnitCore.<br/>
            <span class="code-text">java -cp .;junit-4.4.jar -ea org.junit.runner.JUnitCore TestCalc</span><br/>
            Да нет, все в порядке - ругается наша программа. Открою небольшую тайну - сам JUnitCore не генерит
            сообщений. Он использует классы, которые унаследованый от RunListener и вызывает его методы при
            наступлении определенных событий. Если залезть в исходники, то можно увидеть, что JUnitCore
            регистрирует TextListener, который является наследником RunListener'а.<br/>
            Давайте попробуем написать свой слушатель. Наш тестируемый класс Calc.java мы пока оставим в покое.
            Итак:
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">import</span> org.junit.Test;
<span class="keyword-directive">import</span> <span class="keyword-directive">static</span> org.junit.Assert.assertEquals;

<span class="keyword-directive">import</span> org.junit.runner.JUnitCore;

<span class="keyword-directive">import</span> org.junit.runner.notification.RunListener;
<span class="keyword-directive">import</span> org.junit.runner.notification.Failure;

<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> TestCalc {

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSumTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(50, c.getSum(20, 30));
    }

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSubtractionTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(-10, c.getSubtraction(20, 30));
    }

    <span class="keyword-directive">public</span> <span class="keyword-directive">static</span> <span class="keyword-directive">void</span> main(String[] args) {
        JUnitCore core = <span class="keyword-directive">new</span> JUnitCore();
        <span class="comment">// Вот подключение нашего собственного слушателя/листенера</span>
        core.addListener(<span class="keyword-directive">new</span> CalcListener());
        core.run(TestCalc.<span class="keyword-directive">class</span>);
    }
}

<span class="comment">// А вот его реализация</span>
<span class="keyword-directive">class</span> CalcListener <span class="keyword-directive">extends</span> RunListener {
    <span class="comment">// Пока мы сделали один метод - листенер будет реа</span><span class="comment">гировать только когда возникаю проблемы</span>

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testFailure(Failure fail) {
        System.out.println(<span class="character">&quot;</span><span class="character">Failed:</span><span class="character">&quot;</span> + fail.getDescription().getDisplayName() + <span class="character">&quot;</span><span class="character"> [</span><span class="character">&quot;</span> + fail.getMessage() + <span class="character">&quot;</span><span class="character">]</span><span class="character">&quot;</span>);
    }
}
        </pre>
        <p class="plain">
            Если Вы откроете документацию и найдете описание RunListener, то сможете написать свои собственные
            методы для обработки начала тестирования метода, начала тестирования вообще и т.д. Советую
            прочитать внимательно. Для окончательного слова о листенерах приведем еще один пример кода.
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">import</span> org.junit.Test;
<span class="keyword-directive">import</span> <span class="keyword-directive">static</span> org.junit.Assert.assertEquals;

<span class="keyword-directive">import</span> org.junit.runner.JUnitCore;

<span class="keyword-directive">import</span> org.junit.runner.Description;
<span class="keyword-directive">import</span> org.junit.runner.notification.RunListener;
<span class="keyword-directive">import</span> org.junit.runner.notification.Failure;

<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> TestCalc {
    <span class="comment">// </span><span class="comment">@Test - это аннотация, которая обозначает, что метод должен быть вызван для тестирования чего-нибудь</span>

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSumTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(50, c.getSum(20, 30));
    }

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSubtractionTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(-10, c.getSubtraction(20, 30));
    }

    <span class="keyword-directive">public</span> <span class="keyword-directive">static</span> <span class="keyword-directive">void</span> main(String[] args) {
        JUnitCore core = <span class="keyword-directive">new</span> JUnitCore();
        core.addListener(<span class="keyword-directive">new</span> CalcListener());
        core.run(TestCalc.<span class="keyword-directive">class</span>);
    }
}

<span class="keyword-directive">class</span> CalcListener <span class="keyword-directive">extends</span> RunListener {

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testStarted(Description desc) {
        System.out.println(<span class="character">&quot;</span><span class="character">Started:</span><span class="character">&quot;</span> + desc.getDisplayName());
    }

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testFinished(Description desc) {
        System.out.println(<span class="character">&quot;</span><span class="character">Finished:</span><span class="character">&quot;</span> + desc.getDisplayName());
    }

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testFailure(Failure fail) {
        System.out.println(<span class="character">&quot;</span><span class="character">Failed:</span><span class="character">&quot;</span> + fail.getDescription().getDisplayName() + <span class="character">&quot;</span><span class="character"> [</span><span class="character">&quot;</span> + fail.getMessage() + <span class="character">&quot;</span><span class="character">]</span><span class="character">&quot;</span>);
    }
}
        </pre>
        <p class="plain">
            Если Вам не требуется отслеживать имена методов, а просто получить известие о том, что
            что-то пошло не так можно использовать аннотации
            <span class="code-text">@Before, @After, @BeforeClass, @AfterClass</span>.
            Методы, которые снабжены такой аннотацией будут вызываться: в начале каждого метода, в конце
            каждого метода, в начале тестирования, в конце тестирования.<br/>
            Вот для примера код - обратите внимание, что методы с аннотацией
            <span class="code-text">@Before</span> и <span class="code-text">@After</span> не должны быть
            <span class="code-text">static</span>. А методы с аннотацией <span class="code-text">@BeforeClass</span>
            и <span class="code-text">@AfterClass</span> - должны быть <span class="code-text">static</span>.
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">import</span> org.junit.Test;
<span class="keyword-directive">import</span> org.junit.Before;
<span class="keyword-directive">import</span> org.junit.After;
<span class="keyword-directive">import</span> org.junit.BeforeClass;
<span class="keyword-directive">import</span> org.junit.AfterClass;
<span class="keyword-directive">import</span> org.junit.Ignore;
<span class="keyword-directive">import</span> <span class="keyword-directive">static</span> org.junit.Assert.assertEquals;

<span class="keyword-directive">import</span> org.junit.runner.JUnitCore;

<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> TestCalc {
    <span class="comment">// @Test - это аннотация, которая обозначает, что метод должен быть вызван для тестирования чего-нибудь</span>

    @Test
    <span class="keyword-directive">publi</span><span class="keyword-directive">c</span> <span class="keyword-directive">void</span> getSumTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(50, c.getSum(20, 30));
    }

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSubtractionTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(-10, c.getSubtraction(20, 30));
    }

    @BeforeClass
    <span class="keyword-directive">public</span> <span class="keyword-directive">static</span> <span class="keyword-directive">void</span> allTestsStarted() {
        System.out.println(<span class="character">&quot;</span><span class="character">All tests started</span><span class="character">&quot;</span>);
    }

    @AfterClass
    <span class="keyword-directive">public</span> <span class="keyword-directive">static</span> <span class="keyword-directive">void</span> allTestsFinished() {
        System.out.println(<span class="character">&quot;</span><span class="character">All tests finished</span><span class="character">&quot;</span>);
    }

    @Before
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testStarted() {
        System.out.println(<span class="character">&quot;</span><span class="character">Started</span><span class="character">&quot;</span>);
    }

    @After
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testFinished() {
        System.out.println(<span class="character">&quot;</span><span class="character">Finished</span><span class="character">&quot;</span>);
    }

    @Test
    <span class="comment">// Обратите внимание аннотацию - она говорит, что тест будет проигн</span><span class="comment">орирован. Если ее убрать,</span>
    <span class="comment">// то сообщение появиться</span>
    @Ignore
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testIgnored() {
        System.out.println(<span class="character">&quot;</span><span class="character">Ignored test</span><span class="character">&quot;</span>);
    }

    <span class="keyword-directive">public</span> <span class="keyword-directive">static</span> <span class="keyword-directive">void</span> main(String[] args) {
        JUnitCore core = <span class="keyword-directive">new</span> JUnitCore();
        core.run(TestCalc.<span class="keyword-directive">class</span>);
    }
}
        </pre>

        <h3>Порядок прежде всего</h3>
        <p class="plain">
            Бывают случаи, когда порядок вызовов методов важен дл ятестирования. В таком случае можно
            воспользоваться сортировкой. Давайте рассмотрим это на примере.
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">import</span> java.util.Comparator;

<span class="keyword-directive">import</span> org.junit.Test;
<span class="keyword-directive">import</span> <span class="keyword-directive">static</span> org.junit.Assert.assertEquals;

<span class="keyword-directive">import</span> org.junit.runner.JUnitCore;

<span class="keyword-directive">import</span> org.junit.runner.Description;
<span class="keyword-directive">import</span> org.junit.runner.Request;
<span class="keyword-directive">import</span> org.junit.runner.notification.RunListener;
<span class="keyword-directive">import</span> org.junit.runner.notification.Failure;

<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> TestCalc {
    <span class="comment">// Обратите внимание на название - оно теперь сделано таким для соблюдения порядка</span>

    @Test
    <span class="keyword-directive">p</span><span class="keyword-directive">ublic</span> <span class="keyword-directive">void</span> get001SumTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(50, c.getSum(20, 30));
    }

    <span class="comment">// Обратите внимание на название - оно тепер</span><span class="comment">ь сделано таким для соблюдения порядка</span>
    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> get002SubtractionTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(-10, c.getSubtraction(20, 30));
    }

    <span class="comment">// Метод возвращает компаратор, который позволяет отсортировать методы в алфавитном порядке</span>
    <span class="keyword-directive">private</span> <span class="keyword-directive">static</span> Comparator forward() {
        <span class="keyword-directive">return</span> <span class="keyword-directive">new</span> Comparator() {

            <span class="keyword-directive">public</span> <span class="keyword-directive">int</span> compare(Object o1, Object o2) {
                Description d1 = (Description) o1;
                Description d2 = (Description) o2;
                <span class="keyword-directive">return</span> d1.getDisplayName().compareTo(d2.getDisplayName());
            }
        };
    }

    <span class="keyword-directive">public</span> <span class="keyword-directive">static</span> <span class="keyword-directive">void</span> main(String[] args) {
        JUnitCore core = <span class="keyword-directive">new</span> JUnitCore();
        core.addListener(<span class="keyword-directive">new</span> CalcListener());
        <span class="comment">// Обратите внимание на этот вызов - ниже немного комментариев</span>
        core.run(Request.aClass(TestCalc.<span class="keyword-directive">class</span>).sortWith(forward()));
    }
}

<span class="comment">// Ну здесь по идее должно быть все понятно</span>
<span class="keyword-directive">class</span> CalcListener <span class="keyword-directive">extends</span> RunListener {

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testStarted(Description desc) {
        System.out.println(<span class="character">&quot;</span><span class="character">Started:</span><span class="character">&quot;</span> + desc.getDisplayName());
    }

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testFinished(Description desc) {
        System.out.println(<span class="character">&quot;</span><span class="character">Finished:</span><span class="character">&quot;</span> + desc.getDisplayName());
    }

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testFailure(Failure fail) {
        System.out.println(<span class="character">&quot;</span><span class="character">Failed:</span><span class="character">&quot;</span> + fail.getDescription().getDisplayName() + <span class="character">&quot;</span><span class="character"> [</span><span class="character">&quot;</span> + fail.getMessage() + <span class="character">&quot;</span><span class="character">]</span><span class="character">&quot;</span>);
    }
}
        </pre>
        <p class="plain">
            Итак, комментарии к вызову core.run(...). Здесь использован объект Request, который позволяет 
            запускать не один, а сразу много классов для тестирования. В документации внимательно посмотрите
            на его методы и Вы сможете разобраться. Либо присылайте вопросы.
        </p>

        <h3>А тестовые данные как использовать ?</h3>
        <p class="plain">
            Вы можете определить набор тестовых данных, которые будут подаваться на вход тестирующего класса.
            Чтобы долго не растекаться по древу приведем пример. Комментарии смотрите после кода.
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">import</span> java.util.Arrays;
<span class="keyword-directive">import</span> java.util.Collection;

<span class="keyword-directive">import</span> org.junit.Test;
<span class="keyword-directive">import</span> <span class="keyword-directive">static</span> org.junit.Assert.assertEquals;
<span class="keyword-directive">impor</span><span class="keyword-directive">t</span> org.junit.runner.JUnitCore;
<span class="keyword-directive">import</span> org.junit.runner.Description;
<span class="keyword-directive">import</span> org.junit.runner.RunWith;
<span class="keyword-directive">import</span> org.junit.runner.notification.RunListener;
<span class="keyword-directive">import</span> org.junit.runner.notification.Failure;
<span class="keyword-directive">import</span> org.junit.runners.Parameterized;
<span class="keyword-directive">import</span> <span class="keyword-directive">static</span> org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.<span class="keyword-directive">class</span>)
<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> TestCalc {
    <span class="comment">// Обратите внимание на данные в скобках - первый два - числа, которые складываем/вычитаем</span>
    <span class="comment">// Вт</span><span class="comment">орые - это их сумма и разность</span>

    @Parameters
    <span class="keyword-directive">public</span> <span class="keyword-directive">static</span> Collection data() {
        <span class="keyword-directive">return</span> Arrays.asList(<span class="keyword-directive">new</span> Object[][]{
                    {5, 3, 8, 2},
                    {15, 10, 25, 5},
                    {5, 10, 15, -5}
                });
    }
    <span class="keyword-directive">int</span> x1, x2, sum, sub;

    <span class="keyword-directive">public</span> TestCalc(<span class="keyword-directive">int</span> x1, <span class="keyword-directive">int</span> x2, <span class="keyword-directive">int</span> sum, <span class="keyword-directive">int</span> sub) {
        <span class="keyword-directive">this</span>.x1 = x1;
        <span class="keyword-directive">this</span>.x2 = x2;
        <span class="keyword-directive">this</span>.sum = sum;
        <span class="keyword-directive">this</span>.sub = sub;
    }

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSumTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(sum, c.getSum(x1, x2));
    }

    @Test
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> getSubtractionTest() {
        Calc c = <span class="keyword-directive">new</span> Calc();
        assertEquals(sub, c.getSubtraction(x1, x2));
    }

    <span class="keyword-directive">public</span> <span class="keyword-directive">static</span> <span class="keyword-directive">void</span> main(String[] args) {
        JUnitCore core = <span class="keyword-directive">new</span> JUnitCore();
        core.addListener(<span class="keyword-directive">new</span> CalcListener());
        core.run(TestCalc.<span class="keyword-directive">class</span>);
    }
}

<span class="keyword-directive">class</span> CalcListener <span class="keyword-directive">extends</span> RunListener {

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testStarted(Description desc) {
        System.out.println(<span class="character">&quot;</span><span class="character">Started:</span><span class="character">&quot;</span> + desc.getDisplayName());
    }

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testFinished(Description desc) {
        System.out.println(<span class="character">&quot;</span><span class="character">Finished:</span><span class="character">&quot;</span> + desc.getDisplayName());
    }

    @Override
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> testFailure(Failure fail) {
        System.out.println(<span class="character">&quot;</span><span class="character">Failed:</span><span class="character">&quot;</span> + fail.getDescription().getDisplayName() + <span class="character">&quot;</span><span class="character"> [</span><span class="character">&quot;</span> + fail.getMessage() + <span class="character">&quot;</span><span class="character">]</span><span class="character">&quot;</span>);
    }
}
        </pre>
        <p class="plain">
            <span class="code-text">@RunWith</span> - аннотация говорит о том, что мы будем запускать наш тест
            с помощью "запускателя" Parametrized.<br/>
            <span class="code-text">@Parameters</span> - эта аннотация объявляет метод, который будет вызываться
            для получения данных.<br/>
            Теперь остановимся на следующем моменте - мы объявили конструктор для нашего теста, который принимает
            4 параметра - да, да, Вы совершенно правы - по числу элементов в массиве. В конструкторе мы их
            запоминаем и в дальнейшем используем - смотрите код двух наших методов с <span class="code-text">@Test</span>.
            Вот результаты нашего запуска:
        </p>
        <pre class="code-snippet">
Started:getSumTest[0](TestCalc)
Finished:getSumTest[0](TestCalc)
Started:getSubtractionTest[0](TestCalc)
Failed:getSubtractionTest[0](TestCalc) [expected:<2> but was:<1>]
Finished:getSubtractionTest[0](TestCalc)

Started:getSumTest[1](TestCalc)
Finished:getSumTest[1](TestCalc)
Started:getSubtractionTest[1](TestCalc)
Failed:getSubtractionTest[1](TestCalc) [expected:<5> but was:<4>]
Finished:getSubtractionTest[1](TestCalc)

Started:getSumTest[2](TestCalc)
Finished:getSumTest[2](TestCalc)
Started:getSubtractionTest[2](TestCalc)
Failed:getSubtractionTest[2](TestCalc) [expected:<-5> but was:<-6>]
Finished:getSubtractionTest[2](TestCalc)
        </pre>
        <p class="plain">
            Как видите у нас тест выполнялся три раза. Я специально разделил вывод на три части – на самом
            деле получилось все вместе, но для понятности можно.<br/>
            Итак, возможно, что мне не удалось охватить все возможности JUnit, но даже этого вполне
            достаточно, чтобы быстро и удобно создавать и запускать тесты своей программы. Самое
            главное - ПРИДУМАТЬ ХОРОШИЙ ТЕСТ JUnit за Вас не сможет. Он может предоставить только удобные
            инстурменты для запуска и работы с тестом, но как и что проверять, увы, такой программы еще не
            написали. И вряд ли напишут.<br/>
        </p>
        <p class="plain">
            В следующей части мы начнем разговор о мощной технологии – Application Server и Enterprise Java Beans.
            Данная технолгия потребует от Вас установки IDE NetBeans и много чего интересного.
            Вообщем читайте: <a href="students.php?name=part11">Часть 11 - Application Server & Enterprise Java Beans</a>
        </p>
                    </div>
                </td>
            </tr>
        </table>
    </body>
</html> 
------------d0i996DVyRvWTiFjAd5Dp3
Content-Disposition: inline; filename=javacourse.css
Content-Type: text/css; charset=windows-1251; name=javacourse.css
Content-Location: http://www.java-course.ru/css/javacourse.css
Content-Transfer-Encoding: 8bit

.welcome {
    font-size: larger;
    font-style: italic;
    font-weight: bold;
}

.jc-header {
    width : 100%;
    background-color: blue;
}

.jc-table-header {
    line-height : 3;
    color: white;
}

.jc-table-header a {
    padding-right:10px;
    padding-left:10px;
}

.jc-table-header a:link {
    color: white;
}

.jc-table-header a:visited {
    color: white;
}

.jc-table-header a:hover {
    color: white;
    background-color: #333333;
    text-decoration: none;
}

.jc-header-text {
    margin-left: 20px;
    text-align: left;
    text-shadow: white 2px 2px 2px;
}

.jc-nav {
    background-color: aqua;
}

.jc-topLevel {
    font-size: large;
    font-style: italic;
    margin-left: 10px;
}

.jc-article {
    margin-left: 20px;
    background-color: #cfffff;
}

.copyright {font-size: small;  font-family: serif; }
.plain {font-size: medium;  font-family: serif; }
.recommend {font-size: large; font-weight: bold; font-family: monospace; color: blue;}

.code-snippet {font-family: monospace; background: #dddddd; }
.code-text {font-weight: bold; font-family: monospace; }

.comment {color: #969696; }
.character {color: #ce7b00; }
.keyword-directive {color: #0000e6; }

.xml-comment {color: #969696; }
.xml-attribute {color: #009900; }
.xml-value {color: #ce7b00; }
.xml-tag {color: #0000e6; }

.sql-block-comment {color: #969696}
.sql-identifier {color: #009900}
.sql-string-literal {color: #ce7b00}
.sql-keyword {color: #0000e6}

------------d0i996DVyRvWTiFjAd5Dp3
Content-Disposition: inline; filename=watch.js
Content-Type: application/x-javascript; charset=windows-1251; name=watch.js
Content-Location: http://mc.yandex.ru/metrika/watch.js
Content-Transfer-Encoding: Base64

KGZ1bmN0aW9uKGUsYyxrYSl7ZnVuY3Rpb24gWmEoYyl7dmFyIGU9W10saztmb3Io
ayBpbiBjKWMuaGFzT3duUHJvcGVydHkoaykmJihlW2UubGVuZ3RoXT1rKyI9Iitl
bmNvZGVVUklDb21wb25lbnQoY1trXSkpO3JldHVybiBlLmpvaW4oIiYiKX1mdW5j
dGlvbiBGKGMpe2Zvcih2YXIgZT0xLGs9Yy5sZW5ndGg7ZTxhcmd1bWVudHMubGVu
Z3RoO2UrKyljW2srK109YXJndW1lbnRzW2VdO3JldHVybiBjLmxlbmd0aH1mdW5j
dGlvbiBJYShjLGUpe2Zvcih2YXIgaz0wLEE9Yy5sZW5ndGg7azxlLmxlbmd0aDtr
KyspY1tBKytdPWVba119ZnVuY3Rpb24gbGEoYyl7Zm9yKHZhciBlPSJzdHJpbmci
PT10eXBlb2YgYz9mdW5jdGlvbihlKXtyZXR1cm4gYy5jaGFyQ29kZUF0KGUpfTpm
dW5jdGlvbihlKXtyZXR1cm4gY1tlXX0saz1jLmxlbmd0aCxBPTAsbz0yNTUsdD0y
NTU7azspe3ZhciBCPTIxPGs/MjE6ayxrPWstQjtkb3t2YXIgcT1lKEErKyk7aWYo
MjU1PHEpdmFyIEY9cT4+OCxxPXEmCjI1NSxxPXFeRjtvKz1xO3QrPW99d2hpbGUo
LS1CKTtvPShvJjI1NSkrKG8+PjgpO3Q9KHQmMjU1KSsodD4+OCl9ZT0obyYyNTUp
KyhvPj44KTw8OHwodCYyNTUpKyh0Pj44KTtyZXR1cm4gNjU1MzU9PWU/MDplfWZ1
bmN0aW9uIHRhKGUscSxrLEEpe3ZhciBvPSIiO2smJihvPW5ldyBEYXRlLG8uc2V0
VGltZShvLmdldFRpbWUoKSs2RTQqayksbz0iO2V4cGlyZXM9IitvLnRvR01UU3Ry
aW5nKCkpO2MuY29va2llPWUrIj0iK3ErbysiO3BhdGg9IisoQXx8Ii8iKX1mdW5j
dGlvbiB1YShlKXtyZXR1cm4gYy5jb29raWUubWF0Y2goUmVnRXhwKCIoPzpefDtc
XHMqKSIrZSsiPShbXjtdKikiKSk/UmVnRXhwLiQxOm51bGx9ZnVuY3Rpb24gJGEo
KXt0YSgiX21ldHJpa2FfZW5hYmxlZCIsIjEiLDYwKTt2YXIgYz0hIXVhKCJfbWV0
cmlrYV9lbmFibGVkIik7dGEoIl9tZXRyaWthX2VuYWJsZWQiLCIiLC0xKTtyZXR1
cm4gY31mdW5jdGlvbiBxKCl7Zm9yKHZhciBjPXt9LHE9Imhhc2gsaG9zdCxob3N0
bmFtZSxocmVmLHBhdGhuYW1lLHBvcnQscHJvdG9jb2wsc2VhcmNoIi5zcGxpdCgi
LCIpLAprPXEubGVuZ3RoLEE9aztBLS07KWNbcVtBXV09IiI7dHJ5e2Zvcih2YXIg
bz1lLmxvY2F0aW9uLEE9aztBLS07KXt2YXIgdD1xW0FdO2NbdF09b1t0XX19Y2F0
Y2goQil7UiYmKGM9Uil9cmV0dXJuIGN9ZnVuY3Rpb24gWShjKXt0cnl7ZGVsZXRl
IGVbY119Y2F0Y2gocSl7ZVtjXT1rYX19ZnVuY3Rpb24gYmEoZSl7dmFyIHE9Yy5j
cmVhdGVFbGVtZW50KCJzY3JpcHQiKTtxLnR5cGU9InRleHQvamF2YXNjcmlwdCI7
cS5hc3luYz0hMDtxLnNyYz1lO3RyeXt2YXIgaz1jLmdldEVsZW1lbnRzQnlUYWdO
YW1lKCJodG1sIilbMF07Yy5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaGVhZCIpWzBd
fHxrLmFwcGVuZENoaWxkKGMuY3JlYXRlRWxlbWVudCgiaGVhZCIpKTt2YXIgQT1j
LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF07QS5pbnNlcnRCZWZvcmUo
cSxBLmZpcnN0Q2hpbGQpfWNhdGNoKG8pe319ZnVuY3Rpb24gbWEoYyl7YmEodmEr
Ii8vbWV0cmlrYS55YW5kZXgucnUvanMvIisKYysiL19sb2FkZXIuanMiKX1mdW5j
dGlvbiBhYihDLEksayxBLG8pe2Z1bmN0aW9uIHQoZCl7cmV0dXJuIGZ1bmN0aW9u
KCl7dHJ5e3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChqKXso
bmV3IEltYWdlKS5zcmM9Ii8vYW4ueWFuZGV4LnJ1L2pzZXJyLyIrQysiPyIrWmEo
eyJjbnQtY2xhc3MiOjEwMCtJLGVycm1zZzpqLm1lc3NhZ2UrIi0tIisoZC50b1N0
cmluZygpLm1hdGNoKC9mdW5jdGlvblxzKFteKF0qKS8pfHx7MToiIn0pWzFdfSl9
fX1mdW5jdGlvbiBCKCl7cmV0dXJuIkNTUzFDb21wYXQiPT1jLmNvbXBhdE1vZGU/
Yy5kb2N1bWVudEVsZW1lbnQ6Yy5ib2R5fWZ1bmN0aW9uIFIoKXt2YXIgZD1CKCk7
cmV0dXJuW2QuY2xpZW50V2lkdGgsZC5jbGllbnRIZWlnaHRdfWZ1bmN0aW9uIEwo
KXt2YXIgZD1CKCksaj1SKCk7cmV0dXJuW01hdGgubWF4KGQuc2Nyb2xsV2lkdGgs
alswXSksTWF0aC5tYXgoZC5zY3JvbGxIZWlnaHQsalsxXSldfWZ1bmN0aW9uIFgo
KXtyZXR1cm5bZS5wYWdlWE9mZnNldHx8CmMuZG9jdW1lbnRFbGVtZW50JiZjLmRv
Y3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0fHxjLmJvZHkmJmMuYm9keS5zY3JvbGxM
ZWZ0fHwwLGUucGFnZVlPZmZzZXR8fGMuZG9jdW1lbnRFbGVtZW50JiZjLmRvY3Vt
ZW50RWxlbWVudC5zY3JvbGxUb3B8fGMuYm9keSYmYy5ib2R5LnNjcm9sbFRvcHx8
MF19ZnVuY3Rpb24gWihkKXtpZighZC5vd25lckRvY3VtZW50fHwiUEFSQU0iPT1k
LnRhZ05hbWV8fGQ9PWMuYm9keXx8ZD09Yy5kb2N1bWVudEVsZW1lbnQpcmV0dXJu
WzAsMF07aWYoZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpcmV0dXJuIGQ9ZC5nZXRC
b3VuZGluZ0NsaWVudFJlY3QoKSxbTWF0aC5yb3VuZChkLmxlZnQrU1swXSksTWF0
aC5yb3VuZChkLnRvcCtTWzFdKV07Zm9yKHZhciBqPTAsYT0wO2Q7KWorPWQub2Zm
c2V0TGVmdCxhKz1kLm9mZnNldFRvcCxkPWQub2Zmc2V0UGFyZW50O3JldHVybltq
LGFdfWZ1bmN0aW9uIGNhKGQpe3JldHVybiBkPT1jLmRvY3VtZW50RWxlbWVudD8K
bnVsbDpkPT1jLmJvZHk/Yy5kb2N1bWVudEVsZW1lbnQ6ZC5wYXJlbnROb2RlfWZ1
bmN0aW9uICQoZCxqKXt2YXIgYT1bXTtpZihkKWZvcih2YXIgYj1kLmNoaWxkTm9k
ZXMsYz0wLGY9Yi5sZW5ndGg7YzxmO2MrKyl7dmFyIGc9YltjXTshKCJJTlBVVCI9
PWcubm9kZU5hbWUmJmcudHlwZSYmImhpZGRlbiI9PWcudHlwZS50b0xvY2FsZUxv
d2VyQ2FzZSgpKSYmKCFqfHxnLm5vZGVOYW1lPT1qKSYmRihhLGcpfXJldHVybiBh
fWZ1bmN0aW9uIG5hKGQpe3ZhciBqPVooZCksZD1kPT1jLmJvZHl8fGQ9PWMuZG9j
dW1lbnRFbGVtZW50P0woKTpbZC5vZmZzZXRXaWR0aCxkLm9mZnNldEhlaWdodF07
cmV0dXJuW2pbMF0salsxXSxkWzBdLGRbMV1dfWZ1bmN0aW9uIE0oZCl7Zm9yKHZh
ciBqPSIiLGQ9ZC5jaGlsZE5vZGVzLGE9MCxiPWQubGVuZ3RoO2E8YjthKyspMz09
ZFthXS5ub2RlVHlwZSYmKGorPWRbYV0ubm9kZVZhbHVlKTtyZXR1cm4gbGEoai5y
ZXBsYWNlKC9bXHUwMDAwLVx1MDAyMF0rL2csCiIiKSl9ZnVuY3Rpb24gYWEoZCl7
dmFyIGo9IiIsYT0iY2xhc3NOYW1lLHdpZHRoLGhlaWdodCxhbGlnbix0aXRsZSxh
bHQsbmFtZSIuc3BsaXQoIiwiKTsiSU1HIj09ZC50YWdOYW1lJiYoais9ZC5zcmMu
dG9Mb3dlckNhc2UoKSk7IkEiPT1kLnRhZ05hbWUmJihqKz1kLmhyZWYudG9Mb3dl
ckNhc2UoKSk7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspais9KCIiKyhkLmdl
dEF0dHJpYnV0ZShhW2JdKXx8IiIpKS50b0xvd2VyQ2FzZSgpO3JldHVybiBsYShq
LnJlcGxhY2UoL1tcdTAwMDAtXHUwMDIwXSsvZywiIikpfWZ1bmN0aW9uIG9hKGQp
e2Zvcih2YXIgaj1jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJmb3JtIiksYT0wLGI9
ai5sZW5ndGg7YTxiO2ErKylpZihqW2FdPT1kKXJldHVybiBhO3JldHVybi0xfWZ1
bmN0aW9uIGRhKGQpe3JldHVybiJJTlBVVCI9PWQubm9kZU5hbWUmJiJzdWJtaXQi
IT1kLnR5cGUmJiJpbWFnZSIhPWQudHlwZSYmImhpZGRlbiIhPWQudHlwZT8icmFk
aW8iPT0KZC50eXBlfHwiY2hlY2tib3giPT1kLnR5cGU/IWQuY2hlY2tlZDohZC52
YWx1ZToiVEVYVEFSRUEiPT1kLm5vZGVOYW1lPyFkLnZhbHVlOiJTRUxFQ1QiPT1k
Lm5vZGVOYW1lPzA+ZC5zZWxlY3RlZEluZGV4OiEwfWZ1bmN0aW9uIHkoZCxqLGEp
e3ZhciBiPXQoZnVuY3Rpb24oZCl7cmV0dXJuIGEoZHx8ZS5ldmVudCl9KTtUW1Qu
bGVuZ3RoXT1bZCxqLGEsYl07ZC5hZGRFdmVudExpc3RlbmVyP2QuYWRkRXZlbnRM
aXN0ZW5lcihqLGIsITApOmQuYXR0YWNoRXZlbnQmJmQuYXR0YWNoRXZlbnQoIm9u
IitqLGIpfWZ1bmN0aW9uIHIoZCxqLGEpe2Zvcih2YXIgYj0wO2I8VC5sZW5ndGg7
YisrKWlmKFRbYl0mJlRbYl1bMF09PWQmJlRbYl1bMV09PWomJlRbYl1bMl09PWEp
e3ZhciBjPVRbYl1bM107ZGVsZXRlIFRbYl07YnJlYWt9YyYmKGQucmVtb3ZlRXZl
bnRMaXN0ZW5lcj9kLnJlbW92ZUV2ZW50TGlzdGVuZXIoaixjLCEwKTpkLmRldGFj
aEV2ZW50JiZkLmRldGFjaEV2ZW50KCJvbiIrCmosYykpfWZ1bmN0aW9uIGlhKGQp
e3ZhciBqPUIoKTtyZXR1cm5bZC5wYWdlWHx8ZC5jbGllbnRYK1NbMF0tKGouY2xp
ZW50TGVmdHx8MCl8fDAsZC5wYWdlWXx8ZC5jbGllbnRZK1NbMV0tKGouY2xpZW50
VG9wfHwwKXx8MF19ZnVuY3Rpb24gVShkKXtyZXR1cm4gZC50YXJnZXR8fGQuc3Jj
RWxlbWVudH1mdW5jdGlvbiBlYShkKXtyZXR1cm4oZC5zaGlmdEtleT90YjowKXwo
ZC5jdHJsS2V5P2JiOjApfChkLmFsdEtleT91YjowKXwoZC5tZXRhS2V5P0ZiOjAp
fChkLmN0cmxLZXl8fGQuYWx0S2V5P0phOjApfWZ1bmN0aW9uIGphKGQpe3ZhciBq
PShuZXcgRGF0ZSkuZ2V0VGltZSgpO2QmJmo8ZCYmKGNiKz1kLWoreik7ZS5zZXRU
aW1lb3V0KHQoZnVuY3Rpb24oKXtqYShqKX0pLHopfWZ1bmN0aW9uIHBhKCl7dmFy
IGQ9KG5ldyBEYXRlKS5nZXRUaW1lKCkrY2I7ZDxkYiYmKGQ9ZGIrei8yKTtyZXR1
cm4gZGI9ZH1mdW5jdGlvbiBHKCl7cmV0dXJuIE1hdGgucm91bmQoKHBhKCktSGIp
LwpJYil9ZnVuY3Rpb24gZmEoZCxqKXtqPU1hdGgubWF4KDAsTWF0aC5taW4oaiw2
NTUzNSkpO0YoZCxqPj44LGomMjU1KX1mdW5jdGlvbiB4KGQsail7RihkLGomMjU1
KX1mdW5jdGlvbiBpKGQsail7Zm9yKGo9TWF0aC5tYXgoMCxqfDApOzEyNzxqOylG
KGQsaiYxMjd8MTI4KSxqPj49NztGKGQsail9ZnVuY3Rpb24gd2EoZCxqKXsyNTU8
ai5sZW5ndGgmJihqPWouc3Vic3RyKDAsMjU1KSk7RihkLGoubGVuZ3RoKTtmb3Io
dmFyIGE9MDthPGoubGVuZ3RoO2ErKylmYShkLGouY2hhckNvZGVBdChhKSl9ZnVu
Y3Rpb24geGEoZCxqKXtpKGQsai5sZW5ndGgpO2Zvcih2YXIgYT0wO2E8ai5sZW5n
dGg7YSsrKWkoZCxqLmNoYXJDb2RlQXQoYSkpfWZ1bmN0aW9uIHRhKGQpe2lmKCFk
Lm5vZGVOYW1lKXJldHVybiBkW0pdPS0xLG51bGw7dmFyIGE9TnVtYmVyKGRbSl0p
O2lmKCFpc0Zpbml0ZShhKXx8MD49YSlyZXR1cm4gbnVsbDt2YXIgYj1LYixjPTAs
Zz1jYShkKSxmPWcmJmdbSl0/Z1tKXToKMDswPmYmJihmPTApO3ZhciBlPWQubm9k
ZU5hbWUudG9VcHBlckNhc2UoKSxsPUxiW2VdO2x8fChifD1NYik7dmFyIGg7YTp7
aD0kKGNhKGQpLGQubm9kZU5hbWUpO2Zvcih2YXIgdz0wO3c8aC5sZW5ndGg7dysr
KWlmKGhbd109PWQpe2g9dzticmVhayBhfWg9MH1ofHwoYnw9TmIpO3c9bmEoZCk7
KGc9Zz9uYShnKTpudWxsKSYmd1swXT09Z1swXSYmd1sxXT09Z1sxXSYmd1syXT09
Z1syXSYmd1szXT09Z1szXSYmKGJ8PXZiKTtLYVthXS5wb3M9d1swXSsieCIrd1sx
XTtLYVthXS5zaXplPXdbMl0rIngiK3dbM107ZC5pZCYmInN0cmluZyI9PXR5cGVv
ZiBkLmlkJiYoYnw9d2IpOyhnPU0oZCkpJiYoYnw9T2IpO3ZhciBwPWFhKGQpO3Am
JihjfD1QYik7dmFyIG07YTp7bT0kKGNhKGQpLGQudGFnTmFtZSk7Zm9yKHZhciB1
PTA7dTxtLmxlbmd0aDt1KyspaWYoIShtW3VdLmlkJiYic3RyaW5nIj09dHlwZW9m
IG1bdV0uaWQpJiZhYShtW3VdKT09cCYmTShtW3VdKT09Zyl7bT0hMDticmVhayBh
fW09CiExfWlmKG0pdmFyIGI9Ynx4YixzPWxhKChkLmlubmVySFRNTHx8IiIpLnJl
cGxhY2UoLyg8W14+XSo+fFtcdTAwMDAtXHUwMDIwXSkvZywiIikpO209W107eCht
LFkpO2kobSxhKTt4KG0sYik7aShtLGYpO2w/eChtLGwpOndhKG0sZSk7aCYmaSht
LGgpO2ImdmJ8fChpKG0sd1swXSksaShtLHdbMV0pLGkobSx3WzJdKSxpKG0sd1sz
XSkpO2Imd2ImJndhKG0sZC5pZCk7ZyYmZmEobSxnKTtiJnhiJiZmYShtLHMpO3go
bSxjKTtwJiZmYShtLHApO3JldHVybiBtfWZ1bmN0aW9uIExhKGQsYSxiLGMsZyxm
KXtmb3IoO2ImJighYi5vZmZzZXRXaWR0aHx8IWIub2Zmc2V0SGVpZ2h0KTspYj1j
YShiKTtpZighYilyZXR1cm4gbnVsbDt2YXIgZT1iW0pdO2lmKCFlfHwwPmUpcmV0
dXJuIG51bGw7dmFyIGw9e21vdXNlbW92ZTpiYSxjbGljazpRYixtb3VzZWRvd246
VGEsbW91c2V1cDpSYix0b3VjaDpzYX1bYV07aWYoIWwpcmV0dXJuIG51bGw7dmFy
IHc9WihiKSxiPVtdO3goYixsKTtpKGIsZCk7CmkoYixlKTtpKGIsTWF0aC5tYXgo
MCxjWzBdLXdbMF0pKTtpKGIsTWF0aC5tYXgoMCxjWzFdLXdbMV0pKTsvXm1vdXNl
KHVwfGRvd24pfGNsaWNrJC8udGVzdChhKSYmKGQ9Z3x8Zix4KGIsMj5kP1NiOmQ9
PShnPzI6NCk/VGI6VWIpKTtyZXR1cm4gYn1mdW5jdGlvbiB5YShkLGEpe3ZhciBi
PVtdO3goYixtYSk7aShiLGQpO2koYixhWzBdKTtpKGIsYVsxXSk7cmV0dXJuIGJ9
ZnVuY3Rpb24gdmEoZCxhLGIpe3ZhciBjPVtdO3goYyxXYik7aShjLGQpO2koYyxh
WzBdKTtpKGMsYVsxXSk7aShjLGJbMF0pO2koYyxiWzFdKTtyZXR1cm4gY31mdW5j
dGlvbiBuKGQsYSxiLGMpe3ZhciBnPVtdO3goZyxVYSk7aShnLGQpO2ZhKGcsYSk7
eChnLGIpO2Q9Y1tKXTtpZighZHx8MD5kKWQ9MDtpKGcsZCk7cmV0dXJuIGd9ZnVu
Y3Rpb24gemEoZCxhKXt2YXIgYixjOzA9PWEubGVuZ3RoP2M9Yj0iIjoxMDA+PWEu
bGVuZ3RoPyhiPWEsYz0iIik6MjAwPj1hLmxlbmd0aD8oYj1hLnN1YnN0cigwLDEw
MCksCmM9YS5zdWJzdHIoMTAwKSk6KGI9YS5zdWJzdHIoMCw5NyksYz1hLnN1YnN0
cihhLmxlbmd0aC05NykpO3ZhciBnPVtdO3goZyxYYik7aShnLGQpO3hhKGcsYik7
eGEoZyxjKTtyZXR1cm4gZ31mdW5jdGlvbiBBYShkKXt2YXIgYT1bXTt4KGEsWWIp
O2koYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBnYShkKXt2YXIgYT1bXTt4KGEsJGEp
O2koYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBNYShkKXt2YXIgYT1bXTt4KGEsYWIp
O2koYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBOYShkLGEpe3ZhciBiPVtdO3goYixw
Yik7aShiLGQpO2koYixhW0pdKTtyZXR1cm4gYn1mdW5jdGlvbiBIKGQsYSl7dmFy
IGI9W107eChiLHFiKTtpKGIsZCk7aShiLGFbSl0pO3JldHVybiBifWZ1bmN0aW9u
IE9hKGQsYSxiKXt2YXIgYz1bXTt4KGMscmIpO2koYyxkKTtpKGMsYVtKXSk7d2Eo
YywiIitiKTtyZXR1cm4gY31mdW5jdGlvbiBlYihkLGEsYil7aWYoYj1zKGIpKXti
LnNoaWZ0KCk7YT1wKGEpO2Euc2hpZnQoKTsKSWEoYSxiKTtiPVtdO3goYixzYik7
aShiLGQpO2koYixhLmxlbmd0aCk7Zm9yKGQ9MDtkPGEubGVuZ3RoO2QrKyl4KGIs
YVtkXSk7cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gVihkLGEpe3ZhciBi
PWFbSl07aWYoMDxiKXt2YXIgYz1bXSxnPW5hKGEpLGY9S2FbYl0sZT1nWzBdKyJ4
IitnWzFdLGw9Z1syXSsieCIrZ1szXTtpZihlIT1mLnBvcylmLnBvcz1lLHgoYyxX
YSksaShjLGQpLGkoYyxiKSxpKGMsZ1swXSksaShjLGdbMV0pO2lmKGwhPWYuc2l6
ZSlmLnNpemU9bCx4KGMsWGEpLGkoYyxkKSxpKGMsYiksaShjLGdbMl0pLGkoYyxn
WzNdKTtpZihjLmxlbmd0aClyZXR1cm4gY31yZXR1cm4gbnVsbH1mdW5jdGlvbiBC
YShkKXt2YXIgYT1kW0pdO2lmKCFhfHwwPmF8fCEvXklOUFVUfFNFTEVDVHxURVhU
QVJFQSQvLnRlc3QoZC5ub2RlTmFtZSl8fCFkLmZvcm18fC8oPzpefFxzKS1tZXRy
aWthLW5vZm9ybSg/OlxzfCQpLy50ZXN0KGQuZm9ybS5jbGFzc05hbWUpKXJldHVy
biBudWxsOwp2YXIgYj1vYShkLmZvcm0pO2lmKDA+YilyZXR1cm4gbnVsbDt2YXIg
YztjPSJJTlBVVCI9PWQubm9kZU5hbWU/e3RleHQ6MCxwYXNzd29yZDoyLHJhZGlv
OjMsY2hlY2tib3g6NCxmaWxlOjYsaW1hZ2U6N31bZC50eXBlXTp7U0VMRUNUOjEs
VEVYVEFSRUE6NX1bZC5ub2RlTmFtZV07aWYoIm51bWJlciIhPXR5cGVvZiBjKXJl
dHVybiBudWxsO2Zvcih2YXIgZz0tMSxmPWQuZm9ybS5lbGVtZW50cyxlPWYubGVu
Z3RoLGw9MCx3PTA7bDxlO2wrKylpZihmW2xdLm5hbWU9PWQubmFtZSl7aWYoZlts
XT09ZCl7Zz13O2JyZWFrfXcrK31pZigwPmcpcmV0dXJuIG51bGw7Zj1bXTt4KGYs
VmEpO2koZixhKTtpKGYsYik7aShmLGMpO3hhKGYsZC5uYW1lfHwiIik7aShmLGcp
O3JldHVybiBmfWZ1bmN0aW9uIENhKGQsYSl7dmFyIGI9b2EoYSk7aWYoMD5iKXJl
dHVybiBudWxsO2Zvcih2YXIgYz1hLmVsZW1lbnRzLGc9Yy5sZW5ndGgsZj1bXSxl
PTA7ZTxnO2UrKylpZighZGEoY1tlXSkpe3ZhciBsPQpjW2VdW0pdO2wmJjA8bCYm
RihmLGwpfWM9W107eChjLHJhKTtpKGMsZCk7aShjLGIpO2koYyxmLmxlbmd0aCk7
Zm9yKGI9MDtiPGYubGVuZ3RoO2IrKylpKGMsZltiXSk7cmV0dXJuIGN9ZnVuY3Rp
b24gaGEoZCl7Y2xlYXJUaW1lb3V0KHliKTtmb3IodmFyIGE9KG5ldyBEYXRlKS5n
ZXRUaW1lKCkrWmI7UGEubGVuZ3RoJiYoZHx8KyhuZXcgRGF0ZSkuZ2V0VGltZSgp
PGEpOyl7dmFyIGI9UGEuc2hpZnQoKTtpZihiPWJbMF0uYXBwbHkoZSxiWzFdKSk2
NTAwPHFhLmxlbmd0aCtiLmxlbmd0aCYmdygpLElhKHFhLGIpLFFhfHwoUWE9ZS5z
ZXRUaW1lb3V0KHQodyksJGIpKX0hMD09PWQmJncoITApO1BhLmxlbmd0aCYmKHli
PWUuc2V0VGltZW91dCh0KGhhKSxhYykpfWZ1bmN0aW9uIEQoZCxhLGIpe0YoUGEs
W2QsYV0pO2hhKGIpfWZ1bmN0aW9uIE4oZCl7aWYoZFtKXSlEKFYsW0coKSxkXSk7
ZWxzZXt2YXIgYT1jYShkKTthJiZOKGEpO2RbSl09ZmI7S2FbZmJdPXt9O2ZiKys7
RCh0YSwKW2RdKTtEKEJhLFtkXSl9fWZ1bmN0aW9uIE8oZCl7dmFyIGE9VShkKTth
JiYiU0NST0xMQkFSIiE9YS5ub2RlTmFtZSYmKE4oYSksRChMYSxbRygpLGQudHlw
ZSxhLGlhKGQpLGQud2hpY2gsZC5idXR0b25dKSl9ZnVuY3Rpb24gRGEoZCl7Tyhk
KTt2YXIgYSxiO2lmKGUuZ2V0U2VsZWN0aW9uKWQ9ZS5nZXRTZWxlY3Rpb24oKSxh
PWQudG9TdHJpbmcoKSxiPWQuYW5jaG9yTm9kZTtlbHNlIGlmKGMuc2VsZWN0aW9u
JiZjLnNlbGVjdGlvbi5jcmVhdGVSYW5nZSlkPWMuc2VsZWN0aW9uLmNyZWF0ZVJh
bmdlKCksYT1kLnRleHQsYj1kLnBhcmVudEVsZW1lbnQoKTtmb3IoO2ImJjEhPWIu
bm9kZVR5cGU7KWI9Yi5wYXJlbnROb2RlO2lmKCEoYiYmIklOUFVUIj09Yi50YWdO
YW1lJiYicGFzc3dvcmQiPT1iLnR5cGV8fGImJi8oPzpefFxzKS1tZXRyaWthLW5v
a2V5cyg/OlxzfCQpLy50ZXN0KGIuY2xhc3NOYW1lKSkmJmEhPWdiKWdiPWEsRCh6
YSxbRygpLGFdKX1mdW5jdGlvbiBFYShkKXt2YXIgYT0KcGEoKSxiPWEtemI7aWYo
IShiPHVhKSl7dmFyIGM9aWEoZCksZz1oYlswXS1jWzBdLGY9aGJbMV0tY1sxXSxn
PWcqZytmKmY7aWYoISgwPj1nfHwxNj5nJiYxMDA+YikmJiEoMjA+YiYmMjU2Pmcp
KXpiPWEsaGI9YyxPKGQpfX1mdW5jdGlvbiBQKCl7Uz1YKCk7dmFyIGQ9cGEoKTtk
LUFiPHVhfHwxMD5NYXRoLmFicyhTWzBdLWliWzBdKSYmMTA+TWF0aC5hYnMoU1sx
XS1pYlsxXSl8fChBYj1kLGliPVMsRCh5YSxbRygpLFNdKSl9ZnVuY3Rpb24gYSgp
e0QodmEsW0coKSxSKCksTCgpXSl9ZnVuY3Rpb24gZyhkKXt3KCEwKTtpZigiYmVm
b3JldW5sb2FkIj09ZC50eXBlKWZvcihkPStuZXcgRGF0ZSs1MDsrbmV3IERhdGU8
ZDspO31mdW5jdGlvbiBiKGQsYSxiKXtkPVUoZCk7IklOUFVUIj09ZC50YWdOYW1l
JiYicGFzc3dvcmQiPT1kLnR5cGV8fC8oPzpefFxzKS1tZXRyaWthLW5va2V5cyg/
OlxzfCQpLy50ZXN0KGQuY2xhc3NOYW1lKXx8KE4oZCksRChuLFtHKCksYSxiLGRd
KSl9ZnVuY3Rpb24gZihkKXt2YXIgYT0KZC5rZXlDb2RlLGM9ZWEoZCk7aWYoezM6
MSw4OjEsOToxLDEzOjEsMTY6MSwxNzoxLDE4OjEsMTk6MSwyMDoxLDI3OjEsMzM6
MSwzNDoxLDM1OjEsMzY6MSwzNzoxLDM4OjEsMzk6MSw0MDoxLDQ1OjEsNDY6MSw5
MToxLDkyOjEsOTM6MSwxMDY6MSwxMTA6MSwxMTE6MSwxNDQ6MSwxNDU6MX1bYV18
fDExMjw9YSYmMTIzPj1hfHw5Njw9YSYmMTA1Pj1hfHxjJkphKTE5PT1hJiYoYyZ+
SmEpPT1iYiYmKGE9MTQ0KSxiKGQsYSxjfEphKSxqYj0hMSxlLnNldFRpbWVvdXQo
dChmdW5jdGlvbigpe2piPSEwfSksMSksNjc9PWEmJmMmYmImJiEoYyZ1YikmJiEo
YyZ0YikmJmgoKX1mdW5jdGlvbiBsKGQpe2piJiYha2ImJjAhPT1kLndoaWNoJiYo
YihkLGQuY2hhckNvZGV8fGQua2V5Q29kZSxlYShkKSksa2I9ITAsZS5zZXRUaW1l
b3V0KHQoZnVuY3Rpb24oKXtrYj0hMX0pLDEpKX1mdW5jdGlvbiBoKCl7bGJ8fChs
Yj0hMCxnYiYmRChBYSxbRygpXSksZS5zZXRUaW1lb3V0KHQoZnVuY3Rpb24oKXts
Yj0KITF9KSwxKSl9ZnVuY3Rpb24gbSgpe0ZhfHwoRmE9ITAsRChnYSxbRygpXSkp
fWZ1bmN0aW9uIEdhKCl7RmEmJihGYT0hMSxEKE1hLFtHKCldKSl9ZnVuY3Rpb24g
QmIoZCl7KCFGYXx8ZCYmIWQuZnJvbUVsZW1lbnQpJiZtKCl9ZnVuY3Rpb24gQ2Io
ZCl7ZCYmIWQudG9FbGVtZW50JiZHYSgpfWZ1bmN0aW9uIHUoZCl7aWYoKGQ9VShk
KSkmJi9eSU5QVVR8U0VMRUNUfFRFWFRBUkVBfEJVVFRPTiQvLnRlc3QoZC50YWdO
YW1lKSlOKGQpLEQoTmEsW0coKSxkXSl9ZnVuY3Rpb24gUmEoZCl7aWYoKGQ9VShk
KSkmJi9eSU5QVVR8U0VMRUNUfFRFWFRBUkVBfEJVVFRPTiQvLnRlc3QoZC50YWdO
YW1lKSlOKGQpLEQoSCxbRygpLGRdKX1mdW5jdGlvbiB2KGQpe2Q9VShkKTtpZigh
KCJJTlBVVCI9PWQudGFnTmFtZSYmInBhc3N3b3JkIj09ZC50eXBlfHxkJiYvKD86
XnxccyktbWV0cmlrYS1ub2tleXMoPzpcc3wkKS8udGVzdChkLmNsYXNzTmFtZSkp
JiZkJiYvXklOUFVUfFNFTEVDVHxURVhUQVJFQSQvLnRlc3QoZC50YWdOYW1lKSl7
dmFyIGE9Ci9eKGNoZWNrYm94fHJhZGlvKSQvLnRlc3QoZC50eXBlKT9kLmNoZWNr
ZWQ6ZC52YWx1ZTtOKGQpO0QoT2EsW0coKSxkLGFdKX19ZnVuY3Rpb24gSGEoZCl7
ZD1VKGQpO2lmKCEvKD86XnxccyktbWV0cmlrYS1ub2Zvcm0oPzpcc3wkKS8udGVz
dChkLmNsYXNzTmFtZSkmJiJGT1JNIj09ZC5ub2RlTmFtZSl7Zm9yKHZhciBhPWQu
ZWxlbWVudHMsYj0wO2I8YS5sZW5ndGg7YisrKWRhKGFbYl0pfHxOKGFbYl0pO0Qo
Q2EsW0coKSxkXSwhMCl9fWZ1bmN0aW9uIEUoZCl7UCgpO2lmKGQudG91Y2hlcyYm
ZC50b3VjaGVzLmxlbmd0aCl7dmFyIGE9VShkKTtpZihhKXtOKGEpO2Zvcih2YXIg
Yj0wO2I8ZC50b3VjaGVzLmxlbmd0aDtiKyspRChMYSxbRygpLCJ0b3VjaCIsYSxb
ZC50b3VjaGVzW2JdLnBhZ2VYLGQudG91Y2hlc1tiXS5wYWdlWV0sMCwwXSl9fX1m
dW5jdGlvbiB3KCl7Y2xlYXJUaW1lb3V0KFFhKTtRYT0wO2lmKHFhLmxlbmd0aCl7
Zm9yKHZhciBkPXtybjpNYXRoLnJvdW5kKDFFNSoKTWF0aC5yYW5kb20oKSksInd2
LXR5cGUiOjAsImNudC1jbGFzcyI6SSwicGFnZS11cmwiOiIiK3EoKS5ocmVmLHdt
b2RlOjAsInd2LWhpdCI6QSwid3YtcGFydCI6YmMrKywid3YtY2hlY2siOmxhKHFh
KSwiYnJvd3Nlci1pbmZvIjpbInoiLERiLCJpIixtYl0uam9pbigiOiIpfSxhPXFh
LGI9YS5sZW5ndGgsYz1bXSxnPWItYiUzLGYsZT0wO2U8ZztlKz0zKWY9KGFbZV08
PDE2KSsoYVtlKzFdPDw4KSthW2UrMl0sRihjLFdbZj4+MTgmNjNdLFdbZj4+MTIm
NjNdLFdbZj4+NiY2M10sV1tmJjYzXSk7c3dpdGNoKGItZyl7Y2FzZSAxOmY9YVtn
XTw8NDtGKGMsV1tmPj42JjYzXSxXW2YmNjNdLCJfXyIpO2JyZWFrO2Nhc2UgMjpm
PShhW2ddPDwxMCkrKGFbZysxXTw8MiksRihjLFdbZj4+MTImNjNdLFdbZj4+NiY2
M10sV1tmJjYzXSwiXyIpfWE9eyJ3di1kYXRhIjpjLmpvaW4oIiIpfTtvLnNlbmQo
InZpc29yIiwid2Vidmlzb3IiLGQsYSk7cWEubGVuZ3RoPTB9fWZ1bmN0aW9uIEVi
KGQpe2lmKCJ1bmRlZmluZWQiPT0KdHlwZW9mIGQpcmV0dXJuW2NjXTtpZihudWxs
PT09ZClyZXR1cm5bZGNdO2lmKCJib29sZWFuIj09dHlwZW9mIGQpcmV0dXJuW2Q/
ZWM6ZmNdO2lmKCJudW1iZXIiPT10eXBlb2YgZClyZXR1cm4gZ2MoZCk7aWYoInN0
cmluZyI9PXR5cGVvZiBkKXJldHVybiBwKGQpO2lmKCJbb2JqZWN0IEFycmF5XSI9
PXt9LnRvU3RyaW5nLmNhbGwoZCkpcmV0dXJuIHMoZCk7aWYoIltvYmplY3QgRGF0
ZV0iPT17fS50b1N0cmluZy5jYWxsKGQpKXJldHVybltoY10uY29uY2F0KEsoZC5n
ZXRGdWxsWWVhcigpKSkuY29uY2F0KEsoZC5nZXRNb250aCgpKSkuY29uY2F0KEso
ZC5nZXREYXRlKCkpKS5jb25jYXQoSyhkLmdldEhvdXJzKCkpKS5jb25jYXQoSyhk
LmdldE1pbnV0ZXMoKSkpLmNvbmNhdChLKGQuZ2V0U2Vjb25kcygpKSkuY29uY2F0
KEsoZC5nZXRNaWxsaXNlY29uZHMoKSkpO2lmKCJbb2JqZWN0IFJlZ0V4cF0iPT17
fS50b1N0cmluZy5jYWxsKGQpKXt2YXIgYTthPTB8KGQuZ2xvYmFsPzE6CjApO2F8
PWQuaWdub3JlQ2FzZT8yOjA7YXw9ZC5tdWx0aWxpbmU/NDowO2F8PWQubGFzdElu
ZGV4Pzg6MDt2YXIgYj1wKGQuc291cmNlKTtiLnNoaWZ0KCk7cmV0dXJuW2ljLGFd
LmNvbmNhdChiKS5jb25jYXQoZC5sYXN0SW5kZXg/SyhkLmxhc3RJbmRleCk6W10p
fWlmKGQmJmQub3duZXJEb2N1bWVudD09YylyZXR1cm4gTihkKSxbamNdLmNvbmNh
dChLKGRbSl0pKTtpZigiW29iamVjdCBPYmplY3RdIj09ZC50b1N0cmluZygpKXth
PVtdO2ZvcihiIGluIGQpYS5wdXNoKGIpLGEucHVzaChkW2JdKTtkPVtrY10uY29u
Y2F0KEsoYS5sZW5ndGgvMikpO2ZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBn
PUViKGFbYl0pO2lmKCFnKXJldHVybiBudWxsO2Q9ZC5jb25jYXQoZyl9cmV0dXJu
IGR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gZ2MoZCl7aWYoaXNOYU4oZCkpcmV0dXJu
W2xjXTtpZihkPT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpcmV0dXJuW21jXTtp
ZihkPT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpcmV0dXJuW25jXTsKaWYoMD09
PWQpcmV0dXJuW29jXTt2YXIgYT0hMTswPmQmJihkKj0tMSxhPSEwKTt2YXIgYj0o
IiIrZCkuc3BsaXQoImUiKSxkPSsoYlsxXXx8MCkrKC0xPT1iWzBdLmluZGV4T2Yo
Ii4iKT9iWzBdLmxlbmd0aDpiWzBdLmluZGV4T2YoIi4iKSksYj0rYlswXS5yZXBs
YWNlKCIuIiwiIik7cmV0dXJuW2E/cGM6cWNdLmNvbmNhdChLKGIpKS5jb25jYXQo
SyhkKSl9ZnVuY3Rpb24gcChkKXtmb3IodmFyIGE9W3JjXS5jb25jYXQoSyhkLmxl
bmd0aCkpLGI9MDtiPGQubGVuZ3RoO2IrKylhPWEuY29uY2F0KEsoZC5jaGFyQ29k
ZUF0KGIpKSk7cmV0dXJuIGF9ZnVuY3Rpb24gcyhhKXtmb3IodmFyIGI9W3NjXS5j
b25jYXQoSyhhLmxlbmd0aCkpLGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGc9RWIo
YVtjXSk7aWYoIWcpcmV0dXJuIG51bGw7Yj1iLmNvbmNhdChnKX1yZXR1cm4gYn1m
dW5jdGlvbiBLKGEpe2Zvcih2YXIgYj1bXTsxMjc8YTspYi5wdXNoKGEmMTI3fDEy
OCksYT4+PTc7Yi5wdXNoKGEpOwpyZXR1cm4gYn12YXIgWmI9MTAwLGFjPTIwMCwk
Yj0xNUUzLHo9MjAsSWI9NTAsdWE9MTAsWT0xLGJhPTIsbWE9MyxUYT00LFVhPTUs
VmE9NyxXYT05LFhhPTEwLHJhPTExLHNhPTEyLCRhPTE0LGFiPTE1LHBiPTE3LHFi
PTE4LHJiPTE5LHNiPTI2LFliPTI3LFdiPTI4LFhiPTI5LFJiPTMwLFFiPTMyLFNi
PTEsVWI9MixUYj00LHhiPTEsTWI9MixOYj00LHZiPTgsT2I9MTYsd2I9MzIsS2I9
NjQsUGI9Mix1Yj0xLHRiPTIsYmI9NCxGYj04LEphPTE2LExiPXtBOjEsQUJCUjoy
LEFDUk9OWU06MyxBRERSRVNTOjQsQVBQTEVUOjUsQVJFQTo2LEI6NyxCQVNFOjgs
QkFTRUZPTlQ6OSxCRE86MTAsQklHOjExLEJMT0NLUVVPVEU6MTIsQk9EWToxMyxC
UjoxNCxCVVRUT046MTUsQ0FQVElPTjoxNixDRU5URVI6MTcsQ0lURToxOCxDT0RF
OjE5LENPTDoyMCxDT0xHUk9VUDoyMSxERDoyMixERUw6MjMsREZOOjI0LERJUjoy
NSxESVY6MjYsREw6MjcsRFQ6MjgsRU06MjksRklFTERTRVQ6MzAsRk9OVDozMSwK
Rk9STTozMixGUkFNRTozMyxGUkFNRVNFVDozNCxIMTozNSxIMjozNixIMzozNyxI
NDozOCxINTozOSxINjo0MCxIRUFEOjQxLEhSOjQyLEhUTUw6NDMsSTo0NCxJRlJB
TUU6NDUsSU1HOjQ2LElOUFVUOjQ3LElOUzo0OCxJU0lOREVYOjQ5LEtCRDo1MCxM
QUJFTDo1MSxMRUdFTkQ6NTIsTEk6NTMsTElOSzo1NCxNQVA6NTUsTUVOVTo1NixN
RVRBOjU3LE5PRlJBTUVTOjU4LE5PU0NSSVBUOjU5LE9CSkVDVDo2MCxPTDo2MSxP
UFRHUk9VUDo2MixPUFRJT046NjMsUDo2NCxQQVJBTTo2NSxQUkU6NjYsUTo2NyxT
OjY4LFNBTVA6NjksU0NSSVBUOjcwLFNFTEVDVDo3MSxTTUFMTDo3MixTUEFOOjcz
LFNUUklLRTo3NCxTVFJPTkc6NzUsU1RZTEU6NzYsU1VCOjc3LFNVUDo3OCxUQUJM
RTo3OSxUQk9EWTo4MCxURDo4MSxURVhUQVJFQTo4MixURk9PVDo4MyxUSDo4NCxU
SEVBRDo4NSxUSVRMRTo4NixUUjo4NyxUVDo4OCxVOjg5LFVMOjkwLFZBUjo5MSxO
T0lOREVYOjEwMH0sUz1YKCksVD1bXSwKY2I9MDtqYSgwKTt2YXIgZGI9MCxQYT1b
XSx5YixmYj0xLHpiPTAsaGI9WzAsMF0sQWI9MCxpYj1bMCwwXSxqYj0hMCxrYj0h
MSxnYj0iIixsYj0hMSxGYT0hMCxXPSJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZ
WmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSotIi5zcGxpdCgi
IikscWE9W10sUWEsYmM9MSxjYz0xLGRjPTIsbGM9MyxtYz00LG5jPTUsb2M9Nixl
Yz03LGZjPTgscmM9OSxxYz0xMCxwYz0xMSxzYz0xMixoYz0xMyxpYz0xNCxqYz0x
NSxrYz0xNixIYj1wYSgpLEo9Im1ldHJpa2FJZF8iK01hdGgucmFuZG9tKCksS2E9
e30sbmI9IjpzdWJtaXQiK01hdGgucmFuZG9tKCk7aWYoIk1ldHJpa2FQbGF5ZXIi
IT1lLm5hbWUmJih5KGMsIm1vdXNlbW92ZSIsRWEpLHkoYywiY2xpY2siLE8pLHko
YywibW91c2Vkb3duIixPKSx5KGMsIm1vdXNldXAiLERhKSx5KGUsInNjcm9sbCIs
UCkseShlLCJiZWZvcmV1bmxvYWQiLGcpLGUuQ29tcG9uZW50cz09a2EmJnkoZSwK
InVubG9hZCIsZykseShlLCJyZXNpemUiLGEpLHkoYywia2V5ZG93biIsZikseShj
LCJrZXlwcmVzcyIsbCkseShjLCJjb3B5IixoKSx5KGMsInRvdWNobW92ZSIsRSks
eShjLCJ0b3VjaHN0YXJ0IixFKSxjLmF0dGFjaEV2ZW50JiYhZS5vcGVyYT8oeShj
LCJmb2N1c2luIixCYikseShjLCJmb2N1c291dCIsQ2IpKTooeShlLCJmb2N1cyIs
bSkseShlLCJibHVyIixHYSkseShjLCJibHVyIixHYSkpLGMuYWRkRXZlbnRMaXN0
ZW5lcj8oYy5hZGRFdmVudExpc3RlbmVyKCJmb2N1cyIsdSwhMCksYy5hZGRFdmVu
dExpc3RlbmVyKCJibHVyIixSYSwhMCksYy5hZGRFdmVudExpc3RlbmVyKCJjaGFu
Z2UiLHYsITApLGMuYWRkRXZlbnRMaXN0ZW5lcigic3VibWl0IixIYSwhMCkpOmMu
YXR0YWNoRXZlbnQmJih5KGMsImZvY3VzaW4iLHUpLHkoYywiZm9jdXNvdXQiLFJh
KSxmdW5jdGlvbigpe2Zvcih2YXIgYT1jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJm
b3JtIiksYj0wO2I8YS5sZW5ndGg7YisrKXtmb3IodmFyIGc9CmFbYl0uZ2V0RWxl
bWVudHNCeVRhZ05hbWUoIioiKSxmPTA7ZjxnLmxlbmd0aDtmKyspL15JTlBVVHxT
RUxFQ1R8VEVYVEFSRUEkLy50ZXN0KGdbZl0udGFnTmFtZSkmJnkoZ1tmXSwiY2hh
bmdlIix2KTt5KGFbYl0sInN1Ym1pdCIsSGEpfX0oKSksZnVuY3Rpb24oKXt2YXIg
YT1jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJmb3JtIik7aWYoYS5sZW5ndGgpZm9y
KHZhciBiPTA7YjxhLmxlbmd0aDtiKyspYVtiXVtuYl09YVtiXS5zdWJtaXQsYVti
XS5zdWJtaXQ9ZnVuY3Rpb24oKXtIYSh7dGFyZ2V0OnRoaXN9KTtyZXR1cm4gdGhp
c1tuYl0oKX19KCksIjA6MCIhPVMuam9pbigiOiIpJiZQKCksWWEuTWV0cmlrYS5j
YXB0dXJlRnVuY3Rpb25zPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTxhcmd1bWVu
dHMubGVuZ3RoO2ErKyl7dmFyIGI9YXJndW1lbnRzW2FdOyJmdW5jdGlvbiI9PXR5
cGVvZiBlW2JdJiYoZVtiXT1mdW5jdGlvbihhLGQpe3JldHVybiBmdW5jdGlvbigp
e3ZhciBiO0QoZWIsCltHKCksYSxhcmd1bWVudHNdKTtyZXR1cm4gZC5hcHBseSh0
aGlzLGFyZ3VtZW50cyl9fShiLGVbYl0pKX19LCJ1bmRlZmluZWQiIT10eXBlb2Yg
ayYmay53ZWJ2aXNvcikpe3ZhciBRPWsud2Vidmlzb3I7aWYoUS5jYXB0dXJlRnVu
Y3Rpb25zKXtpZigiW29iamVjdCBBcnJheV0iIT1PYmplY3QucHJvdG90eXBlLnRv
U3RyaW5nLmNhbGwoUS5jYXB0dXJlRnVuY3Rpb25zKSlRLmNhcHR1cmVGdW5jdGlv
bnM9W1EuY2FwdHVyZUZ1bmN0aW9uc107WWEuTWV0cmlrYS5jYXB0dXJlRnVuY3Rp
b25zLmFwcGx5KHRoaXMsUS5jYXB0dXJlRnVuY3Rpb25zKX1pZihRLnVwbG9hZFBh
Z2VzKXtpZigiW29iamVjdCBBcnJheV0iIT1PYmplY3QucHJvdG90eXBlLnRvU3Ry
aW5nLmNhbGwoUS51cGxvYWRQYWdlcykpUS51cGxvYWRQYWdlcz1bUS51cGxvYWRQ
YWdlc107Zm9yKHZhciBvYj0wO29iPFEudXBsb2FkUGFnZXMubGVuZ3RoO29iKysp
e3ZhciBTYT1RLnVwbG9hZFBhZ2VzW29iXTtpZigic3RyaW5nIj09CnR5cGVvZiBT
YSYmKFNhPVNhLnJlcGxhY2UoL1suKis/XF49IToke30oKXxcW1xdXC9cXF0vZyxm
dW5jdGlvbihhKXtyZXR1cm4iKiI9PWE/Ii4qIjoiXFwiK2F9KSxSZWdFeHAoIl4i
K1NhKyIkIikudGVzdChxKCkuaHJlZikpKXtZYS5NZXRyaWthLnVwbG9hZFBhZ2Uo
KTticmVha319fX1yZXR1cm57c3RvcDpmdW5jdGlvbigpe3IoYywibW91c2Vtb3Zl
IixFYSk7cihjLCJjbGljayIsTyk7cihjLCJtb3VzZWRvd24iLE8pO3IoYywibW91
c2V1cCIsRGEpO3IoZSwic2Nyb2xsIixQKTtyKGUsImJlZm9yZXVubG9hZCIsZyk7
cihlLCJ1bmxvYWQiLGcpO3IoZSwicmVzaXplIixhKTtyKGMsImtleWRvd24iLGYp
O3IoYywia2V5cHJlc3MiLGwpO3IoYywiY29weSIsaCk7cihjLCJ0b3VjaG1vdmUi
LEUpO3IoYywidG91Y2hzdGFydCIsRSk7cihjLCJmb2N1c2luIixCYik7cihjLCJm
b2N1c291dCIsQ2IpO3IoZSwiZm9jdXMiLG0pO3IoZSwiYmx1ciIsR2EpO3IoYywi
Ymx1ciIsR2EpO2MucmVtb3ZlRXZlbnRMaXN0ZW5lcj8KKGMucmVtb3ZlRXZlbnRM
aXN0ZW5lcigiZm9jdXMiLHUsITApLGMucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYmx1
ciIsUmEsITApLGMucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2hhbmdlIix2LCEwKSxj
LnJlbW92ZUV2ZW50TGlzdGVuZXIoInN1Ym1pdCIsSGEsITApKTpjLmRldGFjaEV2
ZW50JiYocihjLCJmb2N1c2luIix1KSxyKGMsImZvY3Vzb3V0IixSYSksZnVuY3Rp
b24oKXtmb3IodmFyIGE9Yy5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZm9ybSIpLGI9
MDtiPGEubGVuZ3RoO2IrKyl7Zm9yKHZhciBnPWFbYl0uZ2V0RWxlbWVudHNCeVRh
Z05hbWUoIioiKSxmPTA7ZjxnLmxlbmd0aDtmKyspL15JTlBVVHxTRUxFQ1R8VEVY
VEFSRUEkLy50ZXN0KGdbZl0udGFnTmFtZSkmJnIoZ1tmXSwiY2hhbmdlIix2KTty
KGFbYl0sInN1Ym1pdCIsSGEpfX0oKSk7KGZ1bmN0aW9uKCl7Zm9yKHZhciBhPWMu
Z2V0RWxlbWVudHNCeVRhZ05hbWUoImZvcm0iKSxiPTA7YjxhLmxlbmd0aDtiKysp
YVtiXS5zdWJtaXQ9CmFbYl1bbmJdfSkoKX19fXZhciBwYj0hMTtlLllhPWUuWWF8
fHt9O1lhLl9tZXRyaWthPVlhLl9tZXRyaWthfHx7fTtZYS5fbWV0cmlrYS5oaXRQ
YXJhbT1ZYS5fbWV0cmlrYS5oaXRQYXJhbXx8e307dmFyIHFiPSExLFI9cSgpLERi
LG1iLFg9ZS5uYXZpZ2F0b3IsWj1lLnNjcmVlbix2YT0iaHR0cHM6Ij09Ui5wcm90
b2NvbD8iaHR0cHM6IjoiaHR0cDoiLHJiPSIkUmV2OiAxODI1ICQiLm1hdGNoKC8o
XGQrKS8pWzFdLCQ9Im9iamVjdCI9PXR5cGVvZiBjLmFsbCxUYT02NCxhYT0kPzUx
MjoyMDQ4LFVhPSQ/NTEyOjIwNDgsVmE9JD8xMDA6NDAwLGlhPSJub2luZGV4Iixq
YT01MCxXYT1SZWdFeHAoIlxcLig3enxhYWN8YWl8YXZpfGFwa3xibXB8Y2FifGNz
dnxjZHJ8ZG1nfGRqdnU/fGRvYyh4fG18Yik/fGVwc3xleGV8Zmx2fGdpZnxnenxq
cGU/Z3xqc3xtNGF8bXAoM3w0fGU/Zyl8bW92fG1zaXxvZHN8cGRmfHBocHN8cG5n
fHBwdCh4fG18Yik/fHBzZHxyYXJ8cnNzfHJ0ZnxzZWF8c2l0fHRhcnx0aWY/Znx0
b3JyZW50fHR4dHx3YXZ8d21hfHdtdnx4bHMoeHxtfGIpP3x4cGl8emlwKSQiLAoi
aSIpLHNiPStuZXcgRGF0ZSxYYT0iX3ltX3Zpc29yYyI7ZS5ZYS5NZXRyaWthPWZ1
bmN0aW9uKEMsSSxrLEEpe2Z1bmN0aW9uIG8oYSxjLGIpe1ZbVi5sZW5ndGhdPVti
LGJdO2EuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoYyxiLCEx
KTphLmF0dGFjaEV2ZW50JiZhLmF0dGFjaEV2ZW50KCJvbiIrYyxiKX1mdW5jdGlv
biB0KGEsYyxiKXtmb3IodmFyIGY9MDtmPFYubGVuZ3RoO2YrKylpZihWW2ZdJiZW
W2ZdWzBdPT1iKXt2YXIgZT1WW2ZdWzFdO2RlbGV0ZSBWW2ZdO2JyZWFrfWUmJihh
LnJlbW92ZUV2ZW50TGlzdGVuZXI/YS5yZW1vdmVFdmVudExpc3RlbmVyKGMsZSwh
MSk6YS5kZXRhY2hFdmVudCYmYS5kZXRhY2hFdmVudCgib24iK2MsZSkpfWZ1bmN0
aW9uIEIoYSxjKXtjPWN8fDI1NjtpZighYSlyZXR1cm4iIjthLmxlbmd0aD5jJiYo
YT1hLnN1YnN0cigwLGMpKTtyZXR1cm4oZS5lbmNvZGVVUklDb21wb25lbnR8fGUu
ZXNjYXBlKShhKS5yZXBsYWNlKC9cKy9nLAoiJTJCIil9ZnVuY3Rpb24gTChhKXtm
dW5jdGlvbiBjKGEpe3JldHVybiBhP2EucmVwbGFjZSgvXFwvZywiXFxcXCIpLnJl
cGxhY2UoLyIvZywnXFwiJyk6IiJ9aWYoYT09PWthKXJldHVybiIiO2lmKG51bGw9
PT1hKXJldHVybiJudWxsIjtzd2l0Y2goYS5jb25zdHJ1Y3Rvcil7Y2FzZSBCb29s
ZWFuOnJldHVybiBhLnRvU3RyaW5nKCk7Y2FzZSBOdW1iZXI6cmV0dXJuIGlzRmlu
aXRlKGEpP2EudG9TdHJpbmcoKToibnVsbCI7Y2FzZSBTdHJpbmc6cmV0dXJuJyIn
K2MoYSkrJyInO2Nhc2UgQXJyYXk6Zm9yKHZhciBiPVtdLGY9MCxlPWEubGVuZ3Ro
O2Y8ZTtmKyspYltiLmxlbmd0aF09TChhW2ZdKTtyZXR1cm4iWyIrYi5qb2luKCIs
IikrIl0iO2Nhc2UgT2JqZWN0OmI9InsiO2Y9MDtmb3IoZSBpbiBhKWlmKGEuaGFz
T3duUHJvcGVydHkoZSkpe3ZhciBoPWFbZV07aCE9PWthJiYoYis9KGY/IiwiOiIi
KSsnIicrYyhlKSsnIjonK0woaCksZisrKX1yZXR1cm4gYisifSI7ZGVmYXVsdDpy
ZXR1cm4ibnVsbCJ9fQpmdW5jdGlvbiBZKGEpe2Zvcih2YXIgYz0rbmV3IERhdGUs
Yj0xOzA8YjtiKyspaWYoMD09YiUxRTMpe3ZhciBmPStuZXcgRGF0ZTtpZihjPmYp
YnJlYWs7aWYoZi1jPmEpYnJlYWt9fWZ1bmN0aW9uIGJhKGEsYyl7aWYoIWF8fCFj
KXJldHVybiExO2Zvcih2YXIgYj1bXSxmPTA7ZjxjLmxlbmd0aDtmKyspYi5wdXNo
KGNbZl0ucmVwbGFjZSgvXF4vZywiXFxeIikucmVwbGFjZSgvXCQvZywiXFwkIiku
cmVwbGFjZSgvXC4vZywiXFwuIikucmVwbGFjZSgvXFsvZywiXFxbIikucmVwbGFj
ZSgvXF0vZywiXFxdIikucmVwbGFjZSgvXHwvZywiXFx8IikucmVwbGFjZSgvXCgv
ZywiXFwoIikucmVwbGFjZSgvXCkvZywiXFwpIikucmVwbGFjZSgvXD8vZywiXFw/
IikucmVwbGFjZSgvXCovZywiXFwqIikucmVwbGFjZSgvXCsvZywiXFwrIikucmVw
bGFjZSgvXHsvZywiXFx7IikucmVwbGFjZSgvXH0vZywiXFx9IikpO3JldHVybiBS
ZWdFeHAoIlxcLigiK2Iuam9pbigifCIpKyIpJCIsImkiKS50ZXN0KGEpfQpmdW5j
dGlvbiBtYShhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnQ7aWYoIWEpcmV0dXJu
ITE7aWYoMz09YS5ub2RlVHlwZSlhPWEucGFyZW50Tm9kZTtmb3IodmFyIGM9YS5u
b2RlTmFtZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7YS5wYXJlbnROb2RlJiZh
LnBhcmVudE5vZGUubm9kZU5hbWUmJigiYSIhPWMmJiJhcmVhIiE9Y3x8IWEuaHJl
Zik7KWE9YS5wYXJlbnROb2RlLGM9YS5ub2RlTmFtZS50b1N0cmluZygpLnRvTG93
ZXJDYXNlKCk7cmV0dXJuIWEuaHJlZj8hMTphfWZ1bmN0aW9uIGNhKGEsYyl7cmV0
dXJuKGE/YS5yZXBsYWNlKC9ed3d3XC4vLCIiKToiIik9PShjP2MucmVwbGFjZSgv
Xnd3d1wuLywiIik6IiIpPyEwOiExfWZ1bmN0aW9uIHJhKGEsYyl7ZnVuY3Rpb24g
YihhKXthPWEuc3BsaXQoIjoiKTthPWFbMV18fCIiO2E9YS5yZXBsYWNlKC9eXC8q
LywiIikucmVwbGFjZSgvXnd3d1wuLywiIik7cmV0dXJuIGEuc3BsaXQoIi8iKVsw
XX1yZXR1cm4hYXx8IWM/IWEmJgohYz8hMDohMTpiKGEpPT1iKGMpPyEwOiExfWZ1
bmN0aW9uIG5hKGEsYyl7dmFyIGI9Yy50YXJnZXQsZj0hMTtpZighYy5ob3N0bmFt
ZSlyZXR1cm4hMTtpZighYnx8Il9zZWxmIj09Ynx8Il90b3AiPT1ifHwiX3BhcmVu
dCI9PWIpZj0hMDsoYj1hLnNoaWZ0S2V5fHxhLmN0cmxLZXl8fGEuYWx0S2V5KXx8
YS5tb2RpZmllcnMmJmUuRXZlbnQmJihiPWEubW9kaWZpZXJzJmUuRXZlbnQuQ09O
VFJPTF9NQVNLfHxhLm1vZGlmaWVycyZlLkV2ZW50LlNISUZUX01BU0t8fGEubW9k
aWZpZXJzJmUuRXZlbnQuQUxUX01BU0spO3JldHVybiBmJiYhYn1mdW5jdGlvbiBN
KGEsYyxiLGYsbCl7ZnVuY3Rpb24gaChhLGIpe21bbS5sZW5ndGhdPWE7bVttLmxl
bmd0aF09Yn12YXIgbD1sfHx7fSxiPSJ1bmRlZmluZWQiIT10eXBlb2YgYj9iOmdh
LG09W107bC5hciYmIWwub25seURhdGEmJihiPWRhKGIpLGE9ZGEoYSkpO2goInBh
Z2UtcmVmIixCKGIsYWEpKTtoKCJwYWdlLXVybCIsQihhLGFhKSk7aCgiYnJvd3Nl
ci1pbmZvIiwKcihjLGwpKTstMSE9cSgpLmhvc3RuYW1lLnNlYXJjaCgvKD86Xnxc
LikoPzp5YXx5YW5kZXh8bmFyb2R8bmFyb2QyKVwuKD86XHcrfGNvbVwuXHcrKSQv
KT9oKCJ1dCIsaWEpOiJ1bmRlZmluZWQiIT10eXBlb2YgbC51dCYmaCgidXQiLEIo
IiIrbC51dCxUYSkpO2YmJmgoInNpdGUtaW5mbyIsQihMKGYpLFVhKSk7bC5zYXZl
UmVmJiYoZ2E9Yik7YT1vYShPYSxtKTtpZigiTWV0cmlrYVBsYXllciIhPWUubmFt
ZSkobmV3IEltYWdlKS5zcmM9YSx5KGEpLGwuaXNEZWxheSYmWShsLmRlbGF5KTty
ZXR1cm4gYX1mdW5jdGlvbiBzYShhLGcsYixmLGwsaCxtKXtmdW5jdGlvbiBpKGEs
Yil7a1trLmxlbmd0aF09YTtrW2subGVuZ3RoXT1ifXZhciBsPWx8fHt9LGI9InVu
ZGVmaW5lZCIhPXR5cGVvZiBiP2I6Z2Esaz1bXTtsLmFyJiYhbC5vbmx5RGF0YSYm
KGI9ZGEoYiksYT1kYShhKSk7aWYoIk1ldHJpa2FQbGF5ZXIiIT1lLm5hbWUpe3Zh
ciBuPSJfeW1qc3AiK01hdGguZmxvb3IoMUU2Kk1hdGgucmFuZG9tKCkpLAp1PWMu
Y3JlYXRlRWxlbWVudCgic2NyaXB0Iik7ZVtuXT1mdW5jdGlvbihhKXt0cnl7ZGVs
ZXRlIGVbbl19Y2F0Y2goYil7ZVtuXT1rYX1tKGEpO3UucGFyZW50Tm9kZSYmdS5w
YXJlbnROb2RlLnJlbW92ZUNoaWxkKHUpfTtpKCJ3bW9kZSIsNSk7aSgiY2FsbGJh
Y2siLG4pO2koInBhZ2UtcmVmIixCKGIsYWEpKTtpKCJwYWdlLXVybCIsQihhLGFh
KSk7YT1yKGcsbCk7aCYmKGE9WyJ2YyIsaCxhXS5qb2luKCI6IikpO2koImJyb3dz
ZXItaW5mbyIsYSk7LTEhPXEoKS5ob3N0bmFtZS5zZWFyY2goLyg/Ol58XC4pKD86
eWF8eWFuZGV4fG5hcm9kfG5hcm9kMilcLig/Olx3K3xjb21cLlx3KykkLyk/aSgi
dXQiLGlhKToidW5kZWZpbmVkIiE9dHlwZW9mIGwudXQmJmkoInV0IixCKCIiK2wu
dXQsVGEpKTtmJiZpKCJzaXRlLWluZm8iLEIoTChmKSxVYSkpO2wuc2F2ZVJlZiYm
KGdhPWIpO2Y9b2EoT2Esayk7dS50eXBlPSJ0ZXh0L2phdmFzY3JpcHQiO3Uuc3Jj
PWY7bD1jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF07CmwuaW5zZXJ0
QmVmb3JlKHUsbC5maXJzdENoaWxkKTt5KGYpfX1mdW5jdGlvbiBvYShhLGMpe2Zv
cih2YXIgYj1bInJuIixNYXRoLmZsb29yKDFFNipNYXRoLnJhbmRvbSgpKSwiY250
LWNsYXNzIixrXS5jb25jYXQoYyksZj1bXSxlPTA7ZTxiLmxlbmd0aDtlKz0yKXt2
YXIgaD1iW2UrMV07aCYmKGZbZi5sZW5ndGhdPWJbZV0rIj0iK2gpfXJldHVybiB2
YSthK0MrIj8iK2Yuam9pbigiJiIpfWZ1bmN0aW9uIGRhKGEpe3ZhciBjPXEoKSxi
PWMuaG9zdCxjPWMuaHJlZjtpZighYSlyZXR1cm4gYztpZigtMSE9YS5zZWFyY2go
L15cdys6XC9cLy8pKXJldHVybiBhO3ZhciBmPWEuY2hhckF0KDApO2lmKCI/Ij09
ZilyZXR1cm4gZj1jLnNlYXJjaCgvXD8vKSwtMT09Zj9jK2E6Yy5zdWJzdHIoMCxm
KSthO2lmKCIjIj09ZilyZXR1cm4gZj1jLnNlYXJjaCgvIy8pLC0xPT1mP2MrYTpj
LnN1YnN0cigwLGYpK2E7aWYoIi8iPT1mKXtpZihmPWMuc2VhcmNoKGIpLC0xIT1m
KXJldHVybiBjLnN1YnN0cigwLApmK2IubGVuZ3RoKSthfWVsc2UgcmV0dXJuIGI9
Yy5zcGxpdCgiLyIpLGJbYi5sZW5ndGgtMV09YSxiLmpvaW4oIi8iKTtyZXR1cm4g
YX1mdW5jdGlvbiB5KGEpeyJmdW5jdGlvbiI9PXR5cGVvZiBlLnltTG9nJiZlLnlt
TG9nKGEpfWZ1bmN0aW9uIHIoYSxnKXtmdW5jdGlvbiBiKGEsYil7YSYmYiYmKGxb
bC5sZW5ndGhdPVthLGJdLmpvaW4oIjoiKSl9ZnVuY3Rpb24gZihhKXtiKGEsZ1th
XT8iMSI6IiIpfXZhciBnPWd8fHt9LGw9W10saD0tMSoobmV3IERhdGUpLmdldFRp
bWV6b25lT2Zmc2V0KCksbT1wYSgpO21ifHwobWI9bSxEYj1oKTtiKCJqIixYLmph
dmFFbmFibGVkKCk/IjEiOiIiKTtaJiZiKCJzIixaLndpZHRoKyJ4IitaLmhlaWdo
dCsieCIrKFouY29sb3JEZXB0aHx8Wi5waXhlbERlcHRoKSk7bnVsbD09PUJhJiYo
QmE9VSgpKTtiKCJmIixCYSk7YigidyIsRygpKyJ4IitmYSgpKTtiKCJ6IixoKTti
KCJpIixtKTtudWxsPT09Q2EmJihDYT1HYigpKTtiKCJsIixDYXx8IiIpOwpiKCJl
biIsSWEoKXx8IiIpO2IoInYiLHJiKTtiKCJjIixYLmNvb2tpZUVuYWJsZWQ/IjEi
OiIiKTskJiZjLmRvY3VtZW50TW9kZSYmKG51bGw9PT1oYSYmKGhhPUZ1bmN0aW9u
KCJyZXR1cm4gLypAY2Nfb24gQF9qc2NyaXB0X3ZlcnNpb24gQCovOyIpKCkpLGhh
JiZiKCJqdiIsaGEpKTtiKCJsYSIsKFgmJihYLmxhbmd1YWdlfHxYLmJyb3dzZXJM
YW5ndWFnZSl8fCIiKS50b0xvd2VyQ2FzZSgpKTtiKCJleCIsInByZXJlbmRlciI9
PWMud2Via2l0VmlzaWJpbGl0eVN0YXRlPyJwcmUxIjoiIik7UCYmYigid2giLCIx
Iik7bT0iYXIsbG4sZGwsYWQsbmIscGEiLnNwbGl0KCIsIik7Zm9yKGg9MDtoPG0u
bGVuZ3RoO2grKylmKG1baF0pO209WyJ2YSIsInZ0Iiwic24iLCJzYSIsImhlIl07
Zm9yKGg9MDtoPG0ubGVuZ3RoO2grKyl7dmFyIGk9bVtoXTtiKGksZ1tpXSl9aWYo
bi5fd2Vidmlzb3Ipe2IoImhpZCIsemEpO2lmKCFlLm5hbWUpZS5uYW1lPU1hdGgu
cm91bmQoNjU1MzUqTWF0aC5yYW5kb20oKSk7CmlmKGg9K2UubmFtZSkwPmgmJiho
Kj0tMSksaCU9NjU1MzU7Yigid24iLGh8fGxhKGUubmFtZSkpO3RyeXtlLm9wZW5l
ciYmZS5vcGVuZXIubmFtZSYmYigib24iLGxhKGUub3BlbmVyLm5hbWUpKX1jYXRj
aChrKXt9dHJ5e2UuaGlzdG9yeSYmYigiaGwiLCIiK2UuaGlzdG9yeS5sZW5ndGgp
fWNhdGNoKHEpe319aD0idW5kZWZpbmVkIj09dHlwZW9mIGE/KGg9ZWEoKSk/Qiho
LFZhKToiIjpCKGEsVmEpO2IoInQiLGgpO3JldHVybiBsLmpvaW4oIjoiKX1mdW5j
dGlvbiBJYSgpe3ZhciBhPSIiLGc9Yy5nZXRFbGVtZW50c0J5VGFnTmFtZSgibWV0
YSIpO2lmKGcmJjA8Zy5sZW5ndGgpZm9yKHZhciBiPTAsZj1nLmxlbmd0aDtiPGY7
YisrKXtpZihnW2JdLmNvbnRlbnQpe3ZhciBlPWdbYl0uY29udGVudC5tYXRjaCgv
Y2hhcnNldD0oLiopLyk7aWYoZSl7YT1lWzFdO2JyZWFrfX19ZWxzZSBhPWMuY2hh
cmFjdGVyU2V0fHxjLmNoYXJzZXQ7cmV0dXJuIGF9ZnVuY3Rpb24gVSgpe3ZhciBh
PQpudWxsLGM9bnVsbCxiLGY9ZS5uYXZpZ2F0b3I7aWYoInVuZGVmaW5lZCIhPXR5
cGVvZiBmLnBsdWdpbnMmJiJvYmplY3QiPT10eXBlb2YgZi5wbHVnaW5zWyJTaG9j
a3dhdmUgRmxhc2giXSkoYT1mLnBsdWdpbnNbIlNob2Nrd2F2ZSBGbGFzaCJdLmRl
c2NyaXB0aW9uKSYmISgidW5kZWZpbmVkIiE9dHlwZW9mIGYubWltZVR5cGVzJiZm
Lm1pbWVUeXBlc1siYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2giXSYmIWYu
bWltZVR5cGVzWyJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCJdLmVuYWJs
ZWRQbHVnaW4pJiYoYz1hLnJlcGxhY2UoLyhbYS16QS1aXXxccykrLywiIikucmVw
bGFjZSgvKFxzK3J8XHMrYlswLTldKykvLCIuIikpO2Vsc2UgaWYoInVuZGVmaW5l
ZCIhPXR5cGVvZiBlLkFjdGl2ZVhPYmplY3QpdHJ5e2lmKGI9bmV3IEFjdGl2ZVhP
YmplY3QoIlNob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoIikpKGE9Yi5HZXRW
YXJpYWJsZSgiJHZlcnNpb24iKSkmJihjPQphLnNwbGl0KCIgIilbMV0ucmVwbGFj
ZSgvLC9nLCIuIikucmVwbGFjZSgvW14uXGRdL2csIiIpKX1jYXRjaChsKXt9cmV0
dXJuIGN9ZnVuY3Rpb24gZWEoKXt2YXIgYT1jLnRpdGxlOyJzdHJpbmciIT10eXBl
b2YgYSYmKGE9KGE9Yy5nZXRFbGVtZW50c0J5VGFnTmFtZSgidGl0bGUiKSkmJmEu
bGVuZ3RoP2FbMF0uaW5uZXJIVE1MOiIiKTtyZXR1cm4gYX1mdW5jdGlvbiBHYigp
e3ZhciBhPW51bGw7aWYoZS5BY3RpdmVYT2JqZWN0KXRyeXt2YXIgYz1uZXcgQWN0
aXZlWE9iamVjdCgiQWdDb250cm9sLkFnQ29udHJvbCIpLGI9ZnVuY3Rpb24oYSxi
LGMsZil7Zm9yKDthLmlzVmVyc2lvblN1cHBvcnRlZChiWzBdKyIuIitiWzFdKyIu
IitiWzJdKyIuIitiWzNdKTspYltjXSs9ZjtiW2NdLT1mfSxmPVsxLDAsMCwwXTti
KGMsZiwwLDEpO2IoYyxmLDEsMSk7YihjLGYsMiwxRTQpO2IoYyxmLDIsMUUzKTti
KGMsZiwyLDEwMCk7YihjLGYsMiwxMCk7YihjLGYsMiwxKTtiKGMsZiwzLDEpO2E9
CmYuam9pbigiLiIpfWNhdGNoKGwpe31lbHNlIGlmKGM9WC5wbHVnaW5zWyJTaWx2
ZXJsaWdodCBQbHVnLUluIl0pYT1jLmRlc2NyaXB0aW9uO3JldHVybiBhfWZ1bmN0
aW9uIHBhKCl7Zm9yKHZhciBhPW5ldyBEYXRlLGE9W2EuZ2V0RnVsbFllYXIoKSxh
LmdldE1vbnRoKCkrMSxhLmdldERhdGUoKSxhLmdldEhvdXJzKCksYS5nZXRNaW51
dGVzKCksYS5nZXRTZWNvbmRzKCldLGM9IiIsYj0wO2I8YS5sZW5ndGg7YisrKWMr
PTEwPmFbYl0/IjAiK2FbYl06YVtiXTtyZXR1cm4gY31mdW5jdGlvbiBHKCl7dmFy
IGE9LTE7aWYoYy5kb2N1bWVudEVsZW1lbnQmJiJDU1MxQ29tcGF0Ij09Yy5jb21w
YXRNb2RlKWE9Yy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7ZWxzZSBpZihj
LmJvZHkpYT1jLmJvZHkuY2xpZW50V2lkdGg7cmV0dXJuIGF9ZnVuY3Rpb24gZmEo
KXt2YXIgYT0tMTtpZihjLmRvY3VtZW50RWxlbWVudCYmIkNTUzFDb21wYXQiPT1j
LmNvbXBhdE1vZGUpYT1jLmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7CmVs
c2UgaWYoYy5ib2R5KWE9Yy5ib2R5LmNsaWVudEhlaWdodDtyZXR1cm4gYX1mdW5j
dGlvbiB4KCl7WWEuX21ldHJpa2EuY291bnRlcnM9WWEuX21ldHJpa2EuY291bnRl
cnN8fHt9O3ZhciBhPSExLGc9QysiOiIraztpZihZYS5fbWV0cmlrYS5oaXRQYXJh
bVtnXSlpZigxPT1rJiYhWWEuX21ldHJpa2EuY291bnRlcnNbZ10pYT0hMDtlbHNl
IHJldHVybiExO1lhLl9tZXRyaWthLmNvdW50ZXJzW2ddPW47WWEuX21ldHJpa2Eu
aGl0UGFyYW1bZ109MTt2YXIgYjtuLl93ZWJ2aXNvcj0hQSYmKEgmJkgud2Vidmlz
b3J8fHBifHxxYik7aWYoIUEmJiFhKXt2YXIgZj11YShYYSk7ImIiIT1mJiYidyIh
PWYmJihmPSIiKTskYSgpfHwoZj0iYiIpO3NhKFIuaHJlZixlYSgpLGMucmVmZXJy
ZXIsSSx7dXQ6QWEsaGU6SD9+fkguaHR0cEVycm9yOjAsYWQ6MT09ayYmZS5ZYSYm
ZS5ZYS5EaXJlY3Q/ITA6ITEsc2F2ZVJlZjohMH0sZixmdW5jdGlvbihhKXt2YXIg
YT1hfHx7fSxjPWEud2Vidmlzb3J8fAp7fSxhPVtdO2lmKGIpe2M9K2MucmVjcDtp
ZighaXNGaW5pdGUoYyl8fDA+Y3x8MTxjKWY9InciO2Z8fChmPXphJTFFNC8xRTQ8
Yz8idyI6ImIiKTt0YShYYSxmLDMwKTsidyI9PWY/RihhLCJ2aXNvciIpOmIuc3Rv
cCgpfUQuaW5pdChhKX0pfXdhKCk7SCYmKEguZW5hYmxlQWxsP24uZW5hYmxlQWxs
KCk6KEguY2xpY2ttYXAmJm4uY2xpY2ttYXAoSC5jbGlja21hcCksSC50cmFja0xp
bmtzJiZuLnRyYWNrTGlua3MoSC50cmFja0xpbmtzKSxILmFjY3VyYXRlVHJhY2tC
b3VuY2UmJm4uYWNjdXJhdGVUcmFja0JvdW5jZShILmFjY3VyYXRlVHJhY2tCb3Vu
Y2UpKSxILnRyYWNrSGFzaCYmbi50cmFja0hhc2goITApKTtuLl93ZWJ2aXNvciYm
KGI9bmV3IGFiKEMsayxILHphLEQpKX1mdW5jdGlvbiBpKGEpe3ZhciBjPXtkZWxh
eTpqYX07c3dpdGNoKHR5cGVvZiBhKXtjYXNlICJzdHJpbmciOmMub249ITA7YnJl
YWs7Y2FzZSAib2JqZWN0IjpjLm9uPSEwO2MuZGVsYXk9Im51bWJlciIhPXR5cGVv
ZiBhLmRlbGF5PwpqYTphLmRlbGF5O2JyZWFrO2Nhc2UgImJvb2xlYW4iOmMub249
YTticmVhaztkZWZhdWx0OnJldHVybn1OPWN9ZnVuY3Rpb24gd2EoKXtpKCExKTtv
KGMsImNsaWNrIixmdW5jdGlvbihhKXtOLm9uJiZ4YShhKX0pfWZ1bmN0aW9uIHhh
KGEpe2Z1bmN0aW9uIGMoYSl7dmFyIGY7Zj0oZj1iLmlubmVySFRNTD9iLmlubmVy
SFRNTC50b1N0cmluZygpLnJlcGxhY2UoLzxcLz9bXj5dKz4vZ2ksIiIpOiIiKT9m
LnRvU3RyaW5nKCkucmVwbGFjZSgvXlxzKy8sIiIpLnJlcGxhY2UoL1xzKyQvLCIi
KToiIjtNKGUsZT09Zj8iIjpmLHEoKS5ocmVmLG51bGwsYSl9dmFyIGI9bWEoYSk7
aWYoYil7dmFyIGY9ITEsZT0iIitiLmhyZWYsaD1lP2Uuc3BsaXQoL1w/LylbMF06
IiI7aWYoV2EudGVzdChoKXx8V2EudGVzdChlKXx8YmEoZSxPKXx8YmEoaCxPKSlm
PSEwO3ZhciBtPWIuY2xhc3NOYW1lLGg9bSYmLTEhPW0uc2VhcmNoKC95bS1kaXNh
YmxlLXRyYWNrbGluay8pPyEwOiExLG09bSYmLTEhPW0uc2VhcmNoKC95bS1leHRl
cm5hbC1saW5rLyk/CiEwOiExO2lmKCFoKWlmKGE9e2xuOiEwLGRsOmYsaXNEZWxh
eTpuYShhLGIpLGRlbGF5Ok4uZGVsYXl9LG0pYyhhKTtlbHNlIGlmKGNhKHEoKS5o
b3N0bmFtZSxiLmhvc3RuYW1lKSl7aWYoZilhLmxuPSExLGMoYSl9ZWxzZSBpZigh
KGUmJi0xIT1lLnNlYXJjaCgvXiAqamF2YXNjcmlwdDovaSkpKWEudXQ9aWEsYyhh
KX19ZnVuY3Rpb24gSmIoYSxnKXtmdW5jdGlvbiBiKCl7aWYoIXEpe3UmJmNsZWFy
VGltZW91dCh1KTt2YXIgYj1nLShpP2s6aysgK25ldyBEYXRlLW4pOzA+YiYmKGI9
MCk7dT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cT0hMDtsKCExKTthKCl9LGIpfX1m
dW5jdGlvbiBmKCl7bXx8KGg9ITAsaT0hMSxtPSEwLGIoKSl9ZnVuY3Rpb24gbChh
KXtmb3IodmFyIGI9MDtiPHYubGVuZ3RoO2IrPTMpYT9vKHZbYl0sdltiKzFdLHZb
YisyXSk6dCh2W2JdLHZbYisxXSx2W2IrMl0pfXZhciBoPSExLG09ITEsaT0hMCxr
PTAsbj0rbmV3IERhdGUsdT1udWxsLHE9ITEsdj1bZSwiYmx1ciIsCmZ1bmN0aW9u
KCl7aT1oPW09ITA7ays9K25ldyBEYXRlLW47bj0rbmV3IERhdGU7YigpfSxlLCJm
b2N1cyIsZnVuY3Rpb24oKXshaCYmIW0mJihrPTApO249K25ldyBEYXRlO2g9bT0h
MDtpPSExO2IoKX0sYywiY2xpY2siLGYsYywibW91c2Vtb3ZlIixmLGMsImtleWRv
d24iLGYsYywic2Nyb2xsIixmXTtsKCEwKTtiKCl9ZnVuY3Rpb24gTGEoYSl7ZnVu
Y3Rpb24gYygpe3ZhciBhPXEoKS5oYXNoLnNwbGl0KCIjIilbMV07aWYoInVuZGVm
aW5lZCI9PXR5cGVvZiBhKXJldHVybiExO3ZhciBiPWEuaW5kZXhPZigiPyIpOzA8
YiYmKGE9YS5zdWJzdHJpbmcoMCxiKSk7cmV0dXJuIGF9dmFyIGI9YygpOyhmdW5j
dGlvbiBsKCl7dmFyIGU9YygpO2UhPT1iJiYoYSgpLGI9ZSk7RWE9c2V0VGltZW91
dChsLDIwMCl9KSgpfWZ1bmN0aW9uIHlhKCl7TmE9Z2E9TWE7TShxKCkuaHJlZixl
YSgpLE5hLG51bGwse3V0OkFhLGFkOjE9PWsmJmUuWWEmJmUuWWEuRGlyZWN0PyEw
OiExLHdoOiEwLHNhdmVSZWY6ITB9KTsKTWE9cSgpLmhyZWZ9ZnVuY3Rpb24gVmIo
YSl7ZnVuY3Rpb24gZygpe3ZhciBhPWMuZG9jdW1lbnRFbGVtZW50O3JldHVybiBN
YXRoLm1heChhLnNjcm9sbFdpZHRoLGMuYm9keS5zY3JvbGxXaWR0aCxhLmNsaWVu
dFdpZHRoKX1mdW5jdGlvbiBiKGEpe2Z1bmN0aW9uIGIoYSl7Zm9yKHZhciBjPTAs
Zj0wO2E7KWMrPXBhcnNlSW50KGEub2Zmc2V0VG9wKSxmKz1wYXJzZUludChhLm9m
ZnNldExlZnQpLGE9YS5vZmZzZXRQYXJlbnQ7cmV0dXJue3RvcDpjLGxlZnQ6Zn19
ZnVuY3Rpb24gZihhKXt2YXIgYT1hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGI9
Yy5ib2R5LGc9Yy5kb2N1bWVudEVsZW1lbnQsdz1hLmxlZnQrKGUucGFnZVhPZmZz
ZXR8fGcuc2Nyb2xsTGVmdHx8Yi5zY3JvbGxMZWZ0KS0oZy5jbGllbnRMZWZ0fHxi
LmNsaWVudExlZnR8fDApO3JldHVybnt0b3A6TWF0aC5yb3VuZChhLnRvcCsoZS5w
YWdlWU9mZnNldHx8Zy5zY3JvbGxUb3B8fGIuc2Nyb2xsVG9wKS0oZy5jbGllbnRU
b3B8fApiLmNsaWVudFRvcHx8MCkpLGxlZnQ6TWF0aC5yb3VuZCh3KX19cmV0dXJu
IGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0P2YoYSk6YihhKX1mdW5jdGlvbiBmKGEp
e3JldHVybiBhLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKX1mdW5jdGlvbiBsKGEp
e3JldHVybiBhJiYoYT0iIithLmNsYXNzTmFtZSkmJi0xIT1hLnNlYXJjaCgveW0t
Y2xpY2ttYXAtaWdub3JlLyk/ITA6ITF9ZnVuY3Rpb24gaChhKXtpZihudWxsPT1h
LnBhZ2VYJiZudWxsIT1hLmNsaWVudFgpe3ZhciBiPWMuZG9jdW1lbnRFbGVtZW50
LGY9Yy5ib2R5O2EucGFnZVg9YS5jbGllbnRYKyhiJiZiLnNjcm9sbExlZnR8fGYm
JmYuc2Nyb2xsTGVmdHx8MCktKGIuY2xpZW50TGVmdHx8MCk7YS5wYWdlWT1hLmNs
aWVudFkrKGImJmIuc2Nyb2xsVG9wfHxmJiZmLnNjcm9sbFRvcHx8MCktKGIuY2xp
ZW50VG9wfHwwKX1yZXR1cm57eDphLnBhZ2VYLHk6YS5wYWdlWX19ZnVuY3Rpb24g
aShhKXtmb3IodmFyIGI9ZihhLm5vZGVOYW1lKTthLnBhcmVudE5vZGUmJgoiQk9E
WSIhPWImJiJIVE1MIiE9Yjspe2lmKCJBIj09Ynx8IklOUFVUIj09Ynx8IlRFWFRB
UkVBIj09YilyZXR1cm4hMDthPWEucGFyZW50Tm9kZTtiPWEubm9kZU5hbWV9cmV0
dXJuITF9Zm9yKHZhciBrPXRoaXMsbj0wLEM9bnVsbCx1PSJBLEIsQklHLEJPRFks
QlVUVE9OLERELERJVixETCxEVCxFTSxGSUVMRFNFVCxGT1JNLEgxLEgyLEgzLEg0
LEg1LEg2LEhSLEksSU1HLElOUFVULExJLE9MLFAsUFJFLFNFTEVDVCxTTUFMTCxT
UEFOLFNUUk9ORyxTVUIsU1VQLFRBQkxFLFRCT0RZLFRELFRFWFRBUkVBLFRGT09U
LFRILFRIRUFELFRSLFUsVUwsQUJCUixBUkVBLEJMT0NLUVVPVEUsQ0FQVElPTixD
RU5URVIsQ0lURSxDT0RFLENBTlZBUyxERk4sRU1CRUQsRk9OVCxJTlMsS0JELExF
R0VORCxMQUJFTCxNQVAsT0JKRUNULFEsUyxTQU1QLFNUUklLRSxUVCxBUlRJQ0xF
LEFVRElPLEFTSURFLEZPT1RFUixIRUFERVIsTUVOVSxNRVRFUixOQVYsUFJPR1JF
U1MsU0VDVElPTixUSU1FLFZJREVPLE5PSU5ERVgsTk9CUiIuc3BsaXQoIiwiKSwK
cj01OSx2PVN0cmluZy5mcm9tQ2hhckNvZGUseD17fSxFPTA7RTx1Lmxlbmd0aDtF
KyspeFt1W0VdXT12KHIpLHYocikscisrO3RoaXMuaGFuZGxlcj1mdW5jdGlvbihh
KXt2YXIgdT1jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF07aWYoIWUu
eW1EaXNhYmxlZENsaWNrbWFwJiYhbCh1KSl7aWYoay5fcHJlZnMuaGFzUXVvdGEp
e2lmKCFrLl9wcmVmcy5xdW90YSlyZXR1cm47ay5fcHJlZnMucXVvdGEtLX12YXIg
dj1hLnRhcmdldHx8YS5zcmNFbGVtZW50O2lmKDM9PXYubm9kZVR5cGUpdj12LnBh
cmVudE5vZGU7dmFyIHU9Zih2Lm5vZGVOYW1lKSxwPWgoYSkscztpZighYS53aGlj
aCYmYS5idXR0b24hPT1rYSlhLndoaWNoPWEuYnV0dG9uJjE/MTphLmJ1dHRvbiYy
PzM6YS5idXR0b24mND8yOjA7cz1hLndoaWNoO2lmKCEocz0oMj09c3x8Mz09cykm
JiJBIiE9dSkpcz12Lm9mZnNldEhlaWdodCxzPTA9PT12Lm9mZnNldFdpZHRoJiYw
PT09c3x8di5zdHlsZSYmIm5vbmUiPT09CnYuc3R5bGUuZGlzcGxheTtpZighcyl7
Yjp7Zm9yKHM9djtzLnBhcmVudE5vZGU7KXtpZihsKHMpKXtzPSEwO2JyZWFrIGJ9
cz1zLnBhcmVudE5vZGV9cz0hMX1pZighcyl7Yjp7cz1rLl9wcmVmcy5pZ25vcmVU
YWdzO2Zvcih2YXIgcj0wO3I8cy5sZW5ndGg7cisrKWlmKGYoc1tyXSk9PWYodSkp
e3M9ITA7YnJlYWsgYn1zPSExfXM9c3x8IWsuX3ByZWZzLmZpbHRlcih2LHUpfWlm
KCFzKXt1PStuZXcgRGF0ZTt2PXtkb206dix4OnAueCx5OnAueSx0aW1lOnV9O2lm
KHA9NTA8dS1uKWlmKCEocD0hay5fcHJlZnMuaWdub3JlU2FtZUNsaWNrcykpe2lm
KHA9Qyl7cz1NYXRoLmFicyhwLngtdi54KTt2YXIgcj1NYXRoLmFicyhwLnktdi55
KSxvPXYudGltZS1wLnRpbWUscD1wLmRvbT09di5kb20mJjI+cyYmMj5yJiYxRTM+
bz8hMDohMX1lbHNlIHA9ITE7cD0hcH1pZihwJiYiTWV0cmlrYVBsYXllciIhPWUu
bmFtZSl7cz1oKGEpO3A9cy54O3M9cy55O3ZhciBvPWEudGFyZ2V0fHxhLnNyY0Vs
ZW1lbnQsCnQ9ay5fcHJlZnMsRT1iKG8pLHo9IiIscj1xKCkuaHJlZjtzd2l0Y2go
dC5tb2RlKXtjYXNlICJmaXhlZCI6ej0iMCI7aShvKSYmKHorPSJ1Iik7YnJlYWs7
Y2FzZSAiY2VudGVyZWQiOno9IjEiO0U9TWF0aC5mbG9vcihnKCkvMik7cD1wPkU/
cC1FKzMyNzY4OnA7aShvKSYmKHorPSJ1Iik7YnJlYWs7ZGVmYXVsdDp6PWYoby5u
b2RlTmFtZSk7ej0iQk9EWSI9PXp8fCJIVE1MIj09ej9nKCk6by5vZmZzZXRXaWR0
aDt0PWYoby5ub2RlTmFtZSk7IkJPRFkiPT10fHwiSFRNTCI9PXQ/KHQ9Yy5kb2N1
bWVudEVsZW1lbnQsdD1NYXRoLm1heCh0LnNjcm9sbEhlaWdodCxjLmJvZHkuc2Ny
b2xsSGVpZ2h0LHQuY2xpZW50SGVpZ2h0KSk6dD1vLm9mZnNldEhlaWdodDt6fHwo
ej0xKTt0fHwodD0xKTtwPU1hdGguZmxvb3IoNjU1MzUqKHAtRS5sZWZ0KS96KTtz
PU1hdGguZmxvb3IoNjU1MzUqKHMtRS50b3ApL3QpO2ZvcihFPSIiO28ucGFyZW50
Tm9kZSYmIkJPRFkiIT1mKG8ubm9kZU5hbWUpJiYKIkhUTUwiIT1mKG8ubm9kZU5h
bWUpOyl7RSs9eFtvLm5vZGVOYW1lXXx8IioiO2I6e2Zvcih2YXIgej1vLnBhcmVu
dE5vZGUsQT10PTA7QTx6LmNoaWxkTm9kZXMubGVuZ3RoO0ErKylpZihvLm5vZGVO
YW1lPT16LmNoaWxkTm9kZXNbQV0ubm9kZU5hbWUpe2lmKG89PXouY2hpbGROb2Rl
c1tBXSl7ej10O2JyZWFrIGJ9dCsrfXo9MH1FKz16fHwiIjtvPW8ucGFyZW50Tm9k
ZX16PUIoRSwxMjgpfVB8fChyPXI/ci5yZXBsYWNlKC9cIy4qJC8sIiIpOnIpOyJm
dW5jdGlvbiI9PXR5cGVvZiBrLl9wcmVmcy51cmxGaWx0ZXImJihyPWsuX3ByZWZz
LnVybEZpbHRlcihyKSk7cD1vYShlYixbInBhZ2UtdXJsIixCKHIsYWEpLCJwb2lu
dGVyLWNsaWNrIiwieDoiK3ArIjp5OiIrcysiOnQ6IitNYXRoLmZsb29yKE1hdGgu
Zmxvb3IoK25ldyBEYXRlLXNiKS8xMDApKyI6cDoiK3pdKTsobmV3IEltYWdlKS5z
cmM9cDt5KHApO2lmKHA9YS50YXJnZXR8fGEuc3JjRWxlbWVudCl7aWYoMz09cC5u
b2RlVHlwZSlwPQpwLnBhcmVudE5vZGU7Zm9yKHM9ZihwLm5vZGVOYW1lKTtwLnBh
cmVudE5vZGUmJnAucGFyZW50Tm9kZS5ub2RlTmFtZSYmKCJBIiE9cyYmIkFSRUEi
IT1zfHwhcC5ocmVmKTspcD1wLnBhcmVudE5vZGUscz1mKHAubm9kZU5hbWUpO3A9
IXAuaHJlZj8hMTpwfWVsc2UgcD0hMTtwJiZuYShhLHApJiZZKGsuX3ByZWZzLmRl
bGF5KX1uPXU7Qz12fX19fTt0aGlzLnNldFByZWZzPWZ1bmN0aW9uKGEpe2Z1bmN0
aW9uIGIoKXtyZXR1cm4hMH10aGlzLl9wcmVmcz0idW5kZWZpbmVkIj09dHlwZW9m
IGF8fCExPT09YXx8ITA9PT1hP3tmaWx0ZXI6YixpZ25vcmVUYWdzOltdLG1vZGU6
IiIsZGVsYXk6amEscXVvdGE6MCxoYXNRdW90YTohMSxpZ25vcmVTYW1lQ2xpY2tz
OiEwfTp7ZmlsdGVyOmEuZmlsdGVyfHxiLGlnbm9yZVRhZ3M6YS5pZ25vcmVUYWdz
fHxbXSxtb2RlOmEubW9kZXx8IiIsZGVsYXk6InVuZGVmaW5lZCI9PXR5cGVvZiBh
LmRlbGF5P2phOmEuZGVsYXkscXVvdGE6YS5xdW90YXx8CjAsaGFzUXVvdGE6ISFh
LnF1b3RhLGlnbm9yZVNhbWVDbGlja3M6InVuZGVmaW5lZCI9PXR5cGVvZiBhLmln
bm9yZVNhbWVDbGlja3M/ITA6ITEsdXJsRmlsdGVyOmEudXJsRmlsdGVyfX07dGhp
cy51cGRhdGVTdGF0dXM9ZnVuY3Rpb24oYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNl
ICJ1bmRlZmluZWQiOnRoaXMuc3RhcnQoITApO2JyZWFrO2Nhc2UgImJvb2xlYW4i
OmE/dGhpcy5zdGFydChhKTp0aGlzLnN0b3AoKTticmVhaztjYXNlICJvYmplY3Qi
OnRoaXMuc3RhcnQoYSl9fTt0aGlzLl9zdGFydD0hMTt0aGlzLnN0YXJ0PWZ1bmN0
aW9uKGEpe3RoaXMuc2V0UHJlZnMoYSk7dGhpcy5fc3RhcnR8fG8oYywiY2xpY2si
LHRoaXMuaGFuZGxlcik7dGhpcy5fc3RhcnQ9ITB9O3RoaXMuc3RvcD1mdW5jdGlv
bigpe3RoaXMuX3N0YXJ0JiZ0KGMsImNsaWNrIix0aGlzLmhhbmRsZXIpO3RoaXMu
X3N0YXJ0PSExfTt0aGlzLnN0YXJ0KGEpfXZhciBuPXRoaXMsemE9TWF0aC5yb3Vu
ZCgxMDczNzQxODI0KgpNYXRoLnJhbmRvbSgpKSxBYT0iIixnYT1SLmhyZWYsTWE9
Ui5ocmVmLE5hPSIiO2lmKCFZYS5fbWV0cmlrYS5jb3VudGVyKVlhLl9tZXRyaWth
LmNvdW50ZXI9bjt2YXIgSDtpZigib2JqZWN0Ij09dHlwZW9mIEMpSD1DLEE9Qy5k
ZWZlcixBYT1DLnV0LGs9Qy50eXBlLEk9Qy5wYXJhbXMsQz1DLmlkO3ZhciBDPUN8
fDAsaz1rfHwwLE9hPSIvL21jLnlhbmRleC5ydS93YXRjaC8iLGViPSIvL21jLnlh
bmRleC5ydS9jbG1hcC8iLFY9W10sQmE9bnVsbCxDYT1udWxsLGhhPW51bGwsRD1u
ZXcgZnVuY3Rpb24oYSxjKXtmdW5jdGlvbiBiKGEsYixjKXtpZihpKWYoYSxiLGMp
O2Vsc2V7aWYoIlhNTEh0dHBSZXF1ZXN0ImluIGUpe3ZhciBnPW5ldyBYTUxIdHRw
UmVxdWVzdDtpZigid2l0aENyZWRlbnRpYWxzImluIGcpe3ZhciBoPWM/IlBPU1Qi
OiJHRVQiLGE9bChhLGIsIlBPU1QiPT1oPzE6MCk7Zy5vcGVuKGgsYSwhMCk7Zy53
aXRoQ3JlZGVudGlhbHM9ITA7IlBPU1QiPT1oJiYiW29iamVjdCBuc1hQQ0NvbXBv
bmVudHNdIiE9CiIiK2UuQ29tcG9uZW50cyYmZy5zZXRSZXF1ZXN0SGVhZGVyKCJD
b250ZW50LVR5cGUiLCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQi
KTtnLnNlbmQoIlBPU1QiPT1oP1phKGMpOm51bGwpO3JldHVybn19Zm9yKGggaW4g
YyljLmhhc093blByb3BlcnR5KGgpJiYoYltoXT1jW2hdKTsobmV3IEltYWdlKS5z
cmM9bChhLGIsMCl9fWZ1bmN0aW9uIGYoYSxiLGMpe3ZhciBmPSJpZnIiK01hdGgu
cm91bmQoMUUxMCpNYXRoLnJhbmRvbSgpKSxlPWkuY3JlYXRlRWxlbWVudCgiZGl2
IiksYT1bJzxpZnJhbWUgbmFtZT0iJyxmLCciPjwvaWZyYW1lPicsJzxmb3JtIGFj
dGlvbj0iJyxsKGEsYiwwKSwnIiBtZXRob2Q9InBvc3QiIHRhcmdldD0iJyxmLCci
IGVuY3R5cGU9ImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCI+J10s
Zztmb3IoZyBpbiBjKWMuaGFzT3duUHJvcGVydHkoZykmJkYoYSwnPHRleHRhcmVh
IG5hbWU9IicsZywnIj4nLGNbZ10sIjwvdGV4dGFyZWE+Iik7CkYoYSwiPC9mb3Jt
PiIpO2UuaW5uZXJIVE1MPWEuam9pbigiIik7aS5ib2R5LmFwcGVuZENoaWxkKGUp
O2UuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImZvcm0iKVswXS5zdWJtaXQoKTtzZXRU
aW1lb3V0KGZ1bmN0aW9uKCl7aS5ib2R5LnJlbW92ZUNoaWxkKGUpfSwxRTQpfWZ1
bmN0aW9uIGwoYixmLGUpe2ZbImJyb3dzZXItaW5mbyJdPVsiY3QiLGUsZlsiYnJv
d3Nlci1pbmZvIl1dLmpvaW4oIjoiKTtyZXR1cm4iLy8iK2ErIi8iK2IrIi8iK2Mr
Ij8iK1phKGYpfWZ1bmN0aW9uIGgoKXtpZihlLkFjdGl2ZVhPYmplY3Qpe3ZhciBh
PW5ldyBBY3RpdmVYT2JqZWN0KCJodG1sZmlsZSIpO2Eub3BlbigpO2Eud3JpdGUo
IjxodG1sPjxib2R5PjwvYm9keT48L2h0bWw+Iik7YS5jbG9zZSgpO3JldHVybiBh
fXJldHVybiBudWxsfXRyeXt2YXIgaT1oKCl9Y2F0Y2goayl7fXZhciBuPSIiLG89
W107cmV0dXJue3NlbmQ6ZnVuY3Rpb24oYSxjLGYsZSl7YT9uPy0xPG4uaW5kZXhP
ZigifCIrYSsifCIpJiYKYihjLGYsZSk6RihvLGFyZ3VtZW50cyk6YihjLGYsZSl9
LGluaXQ6ZnVuY3Rpb24oYSl7bj0ifCIrYS5qb2luKCJ8IikrInwiO2ZvcihhPTA7
YTxvLmxlbmd0aDthKyspLTE8bi5pbmRleE9mKCJ8IitvW2FdWzBdKyJ8IikmJmIo
b1thXVsxXSxvW2FdWzJdLG9bYV1bM10pO28ubGVuZ3RoPTB9fX0oIm1jLnlhbmRl
eC5ydSIsQyk7bi5yZWFjaEdvYWw9ZnVuY3Rpb24oYSxlKXt2YXIgYj1hPyJnb2Fs
Oi8vIitxKCkuaG9zdG5hbWUrIi8iK2E6cSgpLmhyZWYsZj1lYSgpLGk9YT9xKCku
aHJlZjpjLnJlZmVycmVyO00oYixmLGksZSx7YXI6ITAsaXNEZWxheTphPyEwOiEx
LGRlbGF5OjEwMH0pO3JldHVybiEwfTt2YXIgTjtuLnRyYWNrTGlua3M9aTtuLmhp
dD1mdW5jdGlvbihhLGMsYixmLGUpe2EmJk0oYSxjLGIsZix7dXQ6ZSxhcjohMCxz
YXZlUmVmOiEwfSl9O24ucGFyYW1zPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBjPWFy
Z3VtZW50cy5sZW5ndGg7aWYoMTxjKXtmb3IodmFyIGI9e30sCmY9YixlPTA7ZTxj
LTE7ZSsrKXt2YXIgaD0iIithcmd1bWVudHNbZV07ZltoXT17fTtlPGMtMiYmKGY9
ZltoXSl9ZltoXT1hcmd1bWVudHNbYy0xXTthPWJ9TSgiIiwiIiwiIixhLHthcjoh
MCxwYTohMCxvbmx5RGF0YTohMH0pfX07bi5maWxlPWZ1bmN0aW9uKGEsYyxiLGYp
e2EmJk0oYSwiIixxKCkuaHJlZixmLHthcjohMCxsbjohMCxkbDohMH0pfTtuLmV4
dExpbms9ZnVuY3Rpb24oYSxjLGIsZil7YSYmTShhLCIiLHEoKS5ocmVmLGYse2Fy
OiEwLGxuOiEwLHV0OmlhfSl9O24ubm90Qm91bmNlPWZ1bmN0aW9uKCl7TSgiIiwi
IiwiIixudWxsLHthcjohMCxuYjohMCxvbmx5RGF0YTohMH0pfTt2YXIgTz1bXTtu
LmFkZEZpbGVFeHRlbnNpb249ZnVuY3Rpb24oYSl7InN0cmluZyI9PXR5cGVvZiBh
P08ucHVzaChhKTpPPU8uY29uY2F0KGEpfTtuLmNsaWNrbWFwPWZ1bmN0aW9uKGEp
e24uX2NsaWNrbWFwP24uX2NsaWNrbWFwLnVwZGF0ZVN0YXR1cyhhKTpuLl9jbGlj
a21hcD1uZXcgVmIoYSl9Owp2YXIgRGE9ITE7bi5hY2N1cmF0ZVRyYWNrQm91bmNl
PWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGUoKXtuLm5vdEJvdW5jZSgpfURhfHwoRGE9
ITAscmEoYy5yZWZlcnJlcixxKCkuaHJlZil8fCgibnVtYmVyIiE9dHlwZW9mIGEm
JihhPTE1RTMpLCQ/c2V0VGltZW91dChlLGEpOkpiKGUsYSkpKX07dmFyIEVhPW51
bGwsUD0hMTtuLnRyYWNrSGFzaD1mdW5jdGlvbihhKXshMT09PWE/UCYmKCJvbmhh
c2hjaGFuZ2UiaW4gZT90KGUsImhhc2hjaGFuZ2UiLHlhKTpjbGVhckludGVydmFs
KEVhKSxQPSExKTpQfHwoIm9uaGFzaGNoYW5nZSJpbiBlP28oZSwiaGFzaGNoYW5n
ZSIseWEpOkxhKHlhKSxQPSEwKTtuLl90cmFja0hhc2g9UH07bi52aWRlbz1mdW5j
dGlvbihhLGMsYixmKXt2YXIgZT1bImVuZCIsInBsYXkiLCJwYXVzZSIsInNlZWsi
XTtpZihhJiZiKXthOntmb3IodmFyIGg9MCxpPWUubGVuZ3RoO2g8aTtoKz0xKWlm
KGE9PT1lW2hdKXtlPWg7YnJlYWsgYX1lPSExfSExIT09ZSYmTShiLApmfHwiIiwi
IixudWxsLHthcjohMCx2YTphLHZ0On5+Y30pfX07bi5zb2NpYWw9ZnVuY3Rpb24o
YSxjLGIpe2EmJmMmJk0oYnx8cSgpLmhyZWYsIiIsIiIsbnVsbCx7YXI6ITAsc246
QihhLDY0KSxzYTpCKGMsNjQpfSl9O24uZW5hYmxlQWxsPWZ1bmN0aW9uKCl7bi50
cmFja0xpbmtzKCEwKTtuLmNsaWNrbWFwKCEwKTtuLmFjY3VyYXRlVHJhY2tCb3Vu
Y2UoKX07bi5wYXVzZT1ZO24udXBsb2FkUGFnZT1mdW5jdGlvbigpe307QyYmeCgp
fTtlLnlhX2NpZCYmbmV3IFlhLk1ldHJpa2EoZS55YV9jaWQsZS55YV9wYXJhbXMs
ZS55YV9jbGFzcyk7aWYoZS55YV9jaWQmJiFlLnlhX2hpdCllLnlhX2hpdD1mdW5j
dGlvbihjLGUpe1lhLl9tZXRyaWthLmNvdW50ZXImJllhLl9tZXRyaWthLmNvdW50
ZXIucmVhY2hHb2FsKGMsZSl9O3ZhciBMPWUueWFuZGV4X21ldHJpa2FfY2FsbGJh
Y2ssST1lLnlhbmRleF9tZXRyaWthX2NhbGxiYWNrczsiZnVuY3Rpb24iPT10eXBl
b2YgTCYmTCgpO2lmKCJvYmplY3QiPT0KdHlwZW9mIEkpZm9yKEw9MDtMPEkubGVu
Z3RoO0wrKyl7dmFyIHJhPUlbTF07cmEmJihJW0xdPW51bGwscmEoKSl9WSgieWFu
ZGV4X21ldHJpa2FfY2FsbGJhY2siKTtZKCJ5YW5kZXhfbWV0cmlrYV9jYWxsYmFj
a3MiKTtJPVIuaHJlZjstMSE9SS5zZWFyY2goInltX3BsYXliYWNrPWxpbmttYXAi
KT9tYSgibGlua21hcCIpOi0xIT1JLnNlYXJjaCgieW1fcGxheWJhY2s9Y2xpY2tt
YXAiKSYmbWEoImNsaWNrbWFwIik7ZS5ZYS5NZXRyaWthLmluZm9ybWVyPWZ1bmN0
aW9uKGMpe3ZhciBlPSEhWWEuTWV0cmlrYS5faW5mb3JtZXI7WWEuTWV0cmlrYS5f
aW5mb3JtZXI9YztlfHxiYSh2YSsiLy9icy55YW5kZXgucnUvbWV0cmlrYS9pbmZv
cm1lci5qcyIpfTtpZih0b3AhPWUmJnBhcmVudD09dG9wJiZlLnBvc3RNZXNzYWdl
JiYhWWEuTWV0cmlrYV92aXNvclBsYXllck9uKXtZYS5NZXRyaWthX3Zpc29yUGxh
eWVyT249ITA7ST1jLmNyZWF0ZUVsZW1lbnQoImRpdiIpO0kuaW5uZXJIVE1MPQon
PGlmcmFtZSBuYW1lPSJSZW1vdGVJZnJhbWUiIGFsbG93dHJhbnNwYXJlbmN5PSJ0
cnVlIiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAtOTk5cHg7IHRv
cDogLTk5OXB4OyB3aWR0aDogMXB4OyBoZWlnaHQ6IDFweDsiPjwvaWZyYW1lPic7
dmFyIHNhPUkuZmlyc3RDaGlsZDtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Yy5ib2R5
Lmluc2VydEJlZm9yZShzYSxjLmJvZHkuZmlyc3RDaGlsZCk7dHJ5e3ZhciBlPXNh
LmNvbnRlbnRXaW5kb3cuZG9jdW1lbnR9Y2F0Y2gocSl7fWUmJihlLm9wZW4oKSxl
LndyaXRlKCc8IWRvY3R5cGUgaHRtbD48aHRtbD48aGVhZD48bWV0YSBodHRwLWVx
dWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPUVtdWxhdGVJRTcsSUU9
ZWRnZSIgLz48L2hlYWQ+PGJvZHk+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3Jp
cHQiPnZhciBuZXd2ZXJzaW9uID0gdHJ1ZTt0cnkge2lmICh0b3AucG9zdE1lc3Nh
Z2UpIHt3aW5kb3cub25tZXNzYWdlID0gZnVuY3Rpb24oZXZ0KSB7ZXZ0ID0gZXZ0
IHx8IHdpbmRvdy5ldmVudDt0cnkge3ZhciBtZXNzYWdlID0gbmV3IEZ1bmN0aW9u
KCJyZXR1cm4gIiArIGV2dC5kYXRhKSgpO30gY2F0Y2ggKGUpIHtyZXR1cm47fWlm
ICgvKF58XFwuKXlhbmRleFxcLihydXxjb218dWF8a3p8Ynl8Y29tXFwudHIpKDpc
XGR7NH0pPyQvLnRlc3QoZXZ0Lm9yaWdpbikgJiYgbWVzc2FnZS5uYW1lID09ICJz
Y3JpcHQiICYmIG1lc3NhZ2UuZGF0YSkge3ZhciBoZWFkID0gZG9jdW1lbnQuZ2V0
RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXTt2YXIgYmFzZSA9IGRvY3VtZW50
LmNyZWF0ZUVsZW1lbnQoImJhc2UiKTtiYXNlLmhyZWYgPSBtZXNzYWdlLmRhdGE7
aGVhZC5hcHBlbmRDaGlsZChiYXNlKTt2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3Jl
YXRlRWxlbWVudCgic2NyaXB0Iik7c2NyaXB0LnNyYyA9IG1lc3NhZ2UuZGF0YTto
ZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7cGFyZW50LnJlbW92ZUV2ZW50TGlzdGVu
ZXIoIm1lc3NhZ2UiLCB3aW5kb3cub25tZXNzYWdlLCBmYWxzZSk7d2luZG93Lm9u
bWVzc2FnZSA9IG51bGw7fX07aWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhP
ZigiRmlyZWZveC8zLjYuIikgPiAtMSkge3BhcmVudC5hZGRFdmVudExpc3RlbmVy
KCJtZXNzYWdlIiwgd2luZG93Lm9ubWVzc2FnZSwgZmFsc2UpO310b3AucG9zdE1l
c3NhZ2UoXCd7Im5hbWUiOiJwaW5nIn1cJywgIioiKTt9fSBjYXRjaCAoZSkge308
XC9zY3JpcHQ+PC9ib2R5PjwvaHRtbD4nKSwKZS5jbG9zZSgpKX0sMjAwKX19KSh0
aGlzLHRoaXMuZG9jdW1lbnQpOwo=

------------d0i996DVyRvWTiFjAd5Dp3--
