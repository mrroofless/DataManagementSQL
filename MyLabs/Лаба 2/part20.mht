Content-Type: multipart/related; start=<op.mhtml.1330672529749.2f0e4e4d36021b75@85.143.29.174>; boundary=----------EENMMxfYimu4ElrWLQlS6s
Content-Location: http://www.java-course.ru/students/part20.html
MIME-Version: 1.0

------------EENMMxfYimu4ElrWLQlS6s
Content-Disposition: inline; filename=part20.html
Content-Type: text/html; name=part20.html
Content-ID: <op.mhtml.1330672529749.2f0e4e4d36021b75@85.143.29.174>
Content-Location: http://www.java-course.ru/students/part20.html
Content-Transfer-Encoding: 8bit

        <p class="copyright" align="right">
            Студенческий отдел кадров<br/>
            Пособие по JAVA-технологиям<br/>
            (с) AntonSaburov<br/>
        </p>

        <h3>Полный пример бизнес-уровня на Spring</h3>
        <p class="plain">
            Итак, мы увидели возможности Spring на примере одной функциональности -
            <span class="code-text">Profession</span>. Теперь мы сделаем следующее: для каждой из наших
            таблиц создадим подобную функциональность, которая будет включать в себя полный набор классов
            и интерфейсов:<br/>
            <ul>
                <li>Entity</li>
                <li>DAO интерфейс</li>
                <li>DAO реализация</li>
                <li>Facade</li>
                <li>View для UI</li>
            </ul>
            Это сделает наш код чуть-чуть сложнее и запутаннее. Но именно, что "чуть-чуть".
            В принципе можно было бы обойтись одним DAO, одним фасадом и даже убрать DAO-интерфейс.
            Вы можете реализовать такой упрощенный вариант сами. Исходный код для всех классов вы можете
            найти в проекте Spring_04. Здесь мы опишем только функциональность каждого фасада, чтобы вы
            имели представление кто что делает. А дальше по коду вы сможете разобраться сами.
            Я очень хочу, чтобы вы читали код самостоятельно - умение быстро читать код вом пригодится.<br/>
            При чтении кода я вам рекомендую обратить внимание на то, что класса
            <span class="code-text">Main</span>, который мы использовали для "тестирования" работоспособности
            нашего приложения, уже нет. Вместо него я написал специальный класс для тестирования
            <span class="code-text">SpringStudentFacadeTest</span>. Этот класс использует еще одну
            функциональность Spring - тестирование. Пакет предоставляет несколько очень удобных инструментов,
            которые мы еще рассмотрим. А пока давайте посмотрим на код этого класса.
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">package</span> students.test;

<span class="keyword-directive">import</span> java.util.HashSet;
<span class="keyword-directive">import</span> java.util.LinkedList;
<span class="keyword-directive">import</span> java.util.List;
<span class="keyword-directive">import</span> junit.framework.Assert;
<span class="keyword-directive">import</span> org.junit.Test;
<span class="keyword-directive">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="keyword-directive">import</span> org.springframework.test.annotation.Rollback;
<span class="keyword-directive">import</span> org.springframework.test.context.ContextConfiguration;
<span class="keyword-directive">import</span> org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;
<span class="keyword-directive">import</span> org.springframework.test.context.transaction.TransactionConfiguration;
<span class="keyword-directive">import</span> students.facade.ApplicantFacade;
<span class="keyword-directive">import</span> students.facade.ProfessionFacade;
<span class="keyword-directive">import</span> students.facade.SubjectFacade;
<span class="keyword-directive">import</span> students.view.ApplicantResultView;
<span class="keyword-directive">import</span> students.view.ApplicantView;
<span class="keyword-directive">import</span> students.view.ProfessionView;
<span class="keyword-directive">import</span> students.view.SubjectView;

@ContextConfiguration(locations = {<span class="character">&quot;</span><span class="character">/StudentExample.xml</span><span class="character">&quot;</span>, <span class="character">&quot;</span><span class="character">/StudentDatabase.xml</span><span class="character">&quot;</span>})
@TransactionConfiguration(transactionManager = <span class="character">&quot;</span><span class="character">txManager</span><span class="character">&quot;</span>)
<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> StudentFacadeTest <span class="keyword-directive">extends</span> AbstractTransactionalJUnit4SpringContextTests {

    @Autowired
    <span class="keyword-directive">private</span> SubjectFacade subjectFacade;
    @Autowired
    <span class="keyword-directive">private</span> ProfessionFacade professionFacade;
    @Autowired
    <span class="keyword-directive">private</span> ApplicantFacade applicantFacade;

    @Test
    @Rollback(<span class="keyword-directive">false</span>)
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> subjectTest() {
        SubjectView sv = <span class="keyword-directive">new</span> SubjectView();

        <span class="comment">// Установим данные для предмета</span>
        sv.setSubjectName(<span class="character">&quot;</span><span class="character">Mathematic</span><span class="character">&quot;</span>);
        <span class="comment">// Добавим</span>
        Long idSubj = subjectFacade.addSubject(sv);
        <span class="comment">// Перечитаем</span>
        sv = subjectFacade.getSubject(idSubj);
        <span class="comment">// Убедимся, что считывание совпадает с тем, что записывали</span>
        Assert.assertTrue(sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Mathematic</span><span class="character">&quot;</span>));
        <span class="comment">// Изменим название предмета, запишем и снова убедимся, что все в порядке</span>
        sv.setSubjectName(<span class="character">&quot;</span><span class="character">Mathematics</span><span class="character">&quot;</span>);
        subjectFacade.updateSubject(sv);
        sv = subjectFacade.getSubject(idSubj);
        Assert.assertTrue(sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Mathematics</span><span class="character">&quot;</span>));
        <span class="comment">// Убедимся, что всего предметов пока один</span>
        Assert.assertTrue(subjectFacade.findSubject().size() == 1);

        sv.setSubjectName(<span class="character">&quot;</span><span class="character">Physics</span><span class="character">&quot;</span>);
        idSubj = subjectFacade.addSubject(sv);
        sv = subjectFacade.getSubject(idSubj);
        Assert.assertTrue(sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Physics</span><span class="character">&quot;</span>));
        Assert.assertTrue(subjectFacade.findSubject().size() == 2);

        sv.setSubjectName(<span class="character">&quot;</span><span class="character">Chemist</span><span class="character">&quot;</span>);
        idSubj = subjectFacade.addSubject(sv);
        sv = subjectFacade.getSubject(idSubj);
        Assert.assertTrue(sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Chemist</span><span class="character">&quot;</span>));
        Assert.assertTrue(subjectFacade.findSubject().size() == 3);

        sv.setSubjectName(<span class="character">&quot;</span><span class="character">Chemist2</span><span class="character">&quot;</span>);
        idSubj = subjectFacade.addSubject(sv);
        sv = subjectFacade.getSubject(idSubj);
        Assert.assertTrue(sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Chemist2</span><span class="character">&quot;</span>));
        Assert.assertTrue(subjectFacade.findSubject().size() == 4);
        <span class="comment">// Удалим предмет и убедимся, что общее количество уменьшилось</span>
        subjectFacade.deleteSubject(sv);
        Assert.assertTrue(subjectFacade.findSubject().size() == 3);

        sv.setSubjectName(<span class="character">&quot;</span><span class="character">Literature</span><span class="character">&quot;</span>);
        idSubj = subjectFacade.addSubject(sv);
        sv = subjectFacade.getSubject(idSubj);
        Assert.assertTrue(sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Literature</span><span class="character">&quot;</span>));
        Assert.assertTrue(subjectFacade.findSubject().size() == 4);

        <span class="comment">// Проверим, что работает поиск по списку ID</span>
        List&lt;SubjectView&gt; list = subjectFacade.findSubject();
        List&lt;Long&gt; check = <span class="keyword-directive">new</span> LinkedList&lt;Long&gt;();
        <span class="keyword-directive">for</span> (SubjectView s : list) {
            check.add(s.getSubjectId());
        }
        Assert.assertTrue(subjectFacade.findSubjectById(check).size() == 4);
    }

    @Test
    @Rollback(<span class="keyword-directive">false</span>)
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> professionTest() {
        ProfessionView pv = <span class="keyword-directive">new</span> ProfessionView();

        <span class="comment">// Добавим новую специальность</span>
        pv.setProfessionName(<span class="character">&quot;</span><span class="character">Chemists</span><span class="character">&quot;</span>);
        Long idProf = professionFacade.addProfession(pv);
        pv = professionFacade.getProfession(idProf);
        Assert.assertTrue(pv.getProfessionName().equals(<span class="character">&quot;</span><span class="character">Chemists</span><span class="character">&quot;</span>));
        <span class="comment">// Исправим значение и убедимся. что так и сделано</span>
        pv.setProfessionName(<span class="character">&quot;</span><span class="character">Chemist</span><span class="character">&quot;</span>);
        professionFacade.updateProfession(pv);
        pv = professionFacade.getProfession(idProf);
        Assert.assertTrue(pv.getProfessionName().equals(<span class="character">&quot;</span><span class="character">Chemist</span><span class="character">&quot;</span>));
        <span class="comment">// Всего специальностей одна штука</span>
        Assert.assertTrue(professionFacade.findProfession().size() == 1);
        <span class="comment">// Создадим список предметов для специальности</span>
        List&lt;SubjectView&gt; svList = subjectFacade.findSubject();
        List&lt;Long&gt; check = <span class="keyword-directive">new</span> LinkedList&lt;Long&gt;();
        <span class="keyword-directive">for</span> (SubjectView sv : svList) {
            <span class="keyword-directive">if</span> (sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Chemist</span><span class="character">&quot;</span>) || sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Physics</span><span class="character">&quot;</span>)) {
                check.add(sv.getSubjectId());
            }
        }
        professionFacade.updateSubjectList(idProf, check);
        Assert.assertTrue(subjectFacade.findSubjectByProfession(idProf).size() == 2);

        pv.setProfessionName(<span class="character">&quot;</span><span class="character">Mathematician</span><span class="character">&quot;</span>);
        idProf = professionFacade.addProfession(pv);
        pv = professionFacade.getProfession(idProf);
        Assert.assertTrue(pv.getProfessionName().equals(<span class="character">&quot;</span><span class="character">Mathematician</span><span class="character">&quot;</span>));
        Assert.assertTrue(professionFacade.findProfession().size() == 2);
        svList = subjectFacade.findSubject();
        check = <span class="keyword-directive">new</span> LinkedList&lt;Long&gt;();
        <span class="keyword-directive">for</span> (SubjectView sv : svList) {
            <span class="keyword-directive">if</span> (sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Mathematics</span><span class="character">&quot;</span>) 
              || sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Physics</span><span class="character">&quot;</span>) || sv.getSubjectName().equals(<span class="character">&quot;</span><span class="character">Literature</span><span class="character">&quot;</span>)) {
                check.add(sv.getSubjectId());
            }
        }
        professionFacade.updateSubjectList(idProf, check);
        Assert.assertTrue(subjectFacade.findSubjectByProfession(idProf).size() == 3);

        pv.setProfessionName(<span class="character">&quot;</span><span class="character">Removed</span><span class="character">&quot;</span>);
        pv.setSubjectList(<span class="keyword-directive">new</span> HashSet(svList));
        Long idProf2 = professionFacade.addProfession(pv);
        pv = professionFacade.getProfession(idProf2);
        Assert.assertTrue(pv.getProfessionName().equals(<span class="character">&quot;</span><span class="character">Removed</span><span class="character">&quot;</span>));
        Assert.assertTrue(professionFacade.findProfession().size() == 3);
        professionFacade.deleteProfession(pv);
        Assert.assertTrue(professionFacade.findProfession().size() == 2);
    }

    @Test
    @Rollback(<span class="keyword-directive">false</span>)
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> applicantTest() {
        <span class="comment">// Получаем список специальностей</span>
        List&lt;ProfessionView&gt; pList = professionFacade.findProfession();
        Assert.assertTrue(professionFacade.findProfession().size() == 2);
        ProfessionView pr1 = professionFacade.getProfession(pList.get(0).getProfessionId());
        ProfessionView pr2 = professionFacade.getProfession(pList.get(1).getProfessionId());
        Long applicantId = 0L;

        <span class="comment">// Заполняем данные для абитуриента</span>
        ApplicantView av = <span class="keyword-directive">new</span> ApplicantView();
        av.setLastName(<span class="character">&quot;</span><span class="character">Стрельцов1</span><span class="character">&quot;</span>);
        av.setFirstName(<span class="character">&quot;</span><span class="character">Павел</span><span class="character">&quot;</span>);
        av.setMiddleName(<span class="character">&quot;</span><span class="character">Сергеевич</span><span class="character">&quot;</span>);
        av.setEntranceYear(2009);
        av.setProfessionId(pr1.getProfessionId());
        <span class="comment">// Записываем</span>
        applicantId = applicantFacade.addApplicant(av);
        <span class="comment">// Считываем</span>
        av = applicantFacade.getApplicant(applicantId);
        <span class="comment">// Проверяем, что оценок у только что введенного абитуриента нет</span>
        Assert.assertTrue(av.getApplicantResultList().size() == 0);
        <span class="comment">// Добавляем оценки абитуриенту</span>
        av.setApplicantResultList(createMark(pr1, applicantId, 1));
        applicantFacade.updateApplicantResult(av);
        <span class="comment">// Перечитываем и убеждаемся, что оценки теперь есть</span>
        av = applicantFacade.getApplicant(applicantId);
        Assert.assertTrue(av.getApplicantResultList().size() == pr1.getSubjectList().size());
        <span class="comment">// Поробуем поменять фамилию у абитуриента</span>
        av.setLastName(<span class="character">&quot;</span><span class="character">Стрельцов</span><span class="character">&quot;</span>);
        applicantFacade.updateApplicant(av);
        av = applicantFacade.getApplicant(applicantId);
        <span class="comment">// Убеждаемся, что изменения произошли</span>
        Assert.assertTrue(av.getLastName().equals(<span class="character">&quot;</span><span class="character">Стрельцов</span><span class="character">&quot;</span>));
        <span class="comment">// Перечитываем и убеждаемся, что оценки остались</span>
        Assert.assertTrue(av.getApplicantResultList().size() == pr1.getSubjectList().size());


        av.setLastName(<span class="character">&quot;</span><span class="character">Иванов</span><span class="character">&quot;</span>);
        av.setFirstName(<span class="character">&quot;</span><span class="character">Андрей</span><span class="character">&quot;</span>);
        av.setMiddleName(<span class="character">&quot;</span><span class="character">Васильевич</span><span class="character">&quot;</span>);
        av.setEntranceYear(2009);
        av.setProfessionId(pr1.getProfessionId());
        applicantId = applicantFacade.addApplicant(av);
        av = applicantFacade.getApplicant(applicantId);
        Assert.assertTrue(av.getApplicantResultList().size() == 0);
        av.setApplicantResultList(createMark(pr1, applicantId, 2));
        applicantFacade.updateApplicantResult(av);
        av = applicantFacade.getApplicant(applicantId);
        Assert.assertTrue(av.getApplicantResultList().size() == pr1.getSubjectList().size());

        av.setLastName(<span class="character">&quot;</span><span class="character">Смирнов</span><span class="character">&quot;</span>);
        av.setFirstName(<span class="character">&quot;</span><span class="character">Сергей</span><span class="character">&quot;</span>);
        av.setMiddleName(<span class="character">&quot;</span><span class="character">Петрович</span><span class="character">&quot;</span>);
        av.setEntranceYear(2009);
        av.setProfessionId(pr2.getProfessionId());
        applicantId = applicantFacade.addApplicant(av);
        av = applicantFacade.getApplicant(applicantId);
        Assert.assertTrue(av.getApplicantResultList().size() == 0);
        av.setApplicantResultList(createMark(pr2, applicantId, 3));
        applicantFacade.updateApplicantResult(av);
        av = applicantFacade.getApplicant(applicantId);
        Assert.assertTrue(av.getApplicantResultList().size() == pr2.getSubjectList().size());

        av.setLastName(<span class="character">&quot;</span><span class="character">Затейников</span><span class="character">&quot;</span>);
        av.setFirstName(<span class="character">&quot;</span><span class="character">Виктор</span><span class="character">&quot;</span>);
        av.setMiddleName(<span class="character">&quot;</span><span class="character">Капитонович</span><span class="character">&quot;</span>);
        av.setEntranceYear(2009);
        av.setProfessionId(pr2.getProfessionId());
        applicantId = applicantFacade.addApplicant(av);
        av = applicantFacade.getApplicant(applicantId);
        Assert.assertTrue(av.getApplicantResultList().size() == 0);
        av.setApplicantResultList(createMark(pr2, applicantId, 4));
        applicantFacade.updateApplicantResult(av);
        av = applicantFacade.getApplicant(applicantId);
        Assert.assertTrue(av.getApplicantResultList().size() == pr2.getSubjectList().size());

        av.setLastName(<span class="character">&quot;</span><span class="character">Федоров</span><span class="character">&quot;</span>);
        av.setFirstName(<span class="character">&quot;</span><span class="character">Алексей</span><span class="character">&quot;</span>);
        av.setMiddleName(<span class="character">&quot;</span><span class="character">Дмитриевич</span><span class="character">&quot;</span>);
        av.setEntranceYear(2009);
        av.setProfessionId(pr2.getProfessionId());
        applicantId = applicantFacade.addApplicant(av);
        av = applicantFacade.getApplicant(applicantId);
        Assert.assertTrue(av.getApplicantResultList().size() == 0);
        av.setApplicantResultList(createMark(pr2, applicantId, 5));
        applicantFacade.updateApplicantResult(av);
        av = applicantFacade.getApplicant(applicantId);
        Assert.assertTrue(av.getApplicantResultList().size() == pr2.getSubjectList().size());

        Assert.assertTrue(applicantFacade.findApplicant().size() == 5);
    }

    @Test
    @Rollback(<span class="keyword-directive">false</span>)
    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> applicantDeleteTest() {
        List&lt;ApplicantView&gt; avList = applicantFacade.findApplicant();
        Assert.assertTrue(avList.size() == 5);
        applicantFacade.deleteApplicant(avList.get(0));
        Assert.assertTrue(applicantFacade.findApplicant().size() == 4);
    }

    <span class="comment">// Вспомогательная процедура для установки оценок</span>
    <span class="keyword-directive">private</span> List&lt;ApplicantResultView&gt; createMark(ProfessionView pv, Long applicantId, Integer mark) {
        List&lt;ApplicantResultView&gt; arvList = <span class="keyword-directive">new</span> LinkedList&lt;ApplicantResultView&gt;();
        <span class="keyword-directive">for</span> (SubjectView sv : pv.getSubjectList()) {
            ApplicantResultView ar = <span class="keyword-directive">new</span> ApplicantResultView();
            ar.setApplicantId(applicantId);
            ar.setSubjectId(sv.getSubjectId());
            ar.setMark(mark);
            arvList.add(ar);
        }

        <span class="keyword-directive">return</span> arvList;
    }
}
        </pre>
        <p class="plain">
            Как видите мы не делаем что-то особенное - просто пытаемся вызывать методы, которые мы написали
            и убеждаемся в том, что они работают. Думаю. что профессионалы могут упрекнуть меня в таком
            не очень разумном варианте кодирования - создание данных можно было бы сделать и покомпактнее,
            да и делать проверки на количество записей в базе данных тоже не самое лучшее решение.
            Мне просто хотелось показать, что можно проверять и как. Надеюсь на вашу сниходительность.<br/>
            Автоматическое тестирование - очень мощный инструмент при создании и поддержке больших проектов.
            Если ваш код покрыт тестами, то ошибочные изменения сразу проявятся если тесты написаны хорошо.
            И скорость проверки повышается гораздо больше, чем кажущаяся экономия времени при отказе от
            написания тестов. После того, как система станет очень большой, то любое изменение будет очень
            тяжелым делом - вам же придется проверять море функциональности. Вручную.
            Но сейчас нам надо обратить внимание на самое начало файла. Рассмотрим несколько моментов:
            <ol>
                <li>Наш класс <span class="code-text">StudentFacadeTest</span>, который занимается тестированием,
                    наследуется от класса <span class="code-text">AbstractTransactionalJUnit4SpringContextTests</span>.
                    Это позволяет нам использовать транзакции и даже отменять сделанные изменения. Что достаточно удобно.
                </li>
                <li>Мы используем аннотацию <span class="code-text">@ContextConfiguration</span> для указания, какие
                    файлы используются для конфигурации Spring
                </li>
                <li>Аннотация <span class="code-text">@TransactionConfiguration</span> позволяет нам выбрать
                    тот менеджер транзакций, который нами будет использоваться в случае тестирования. В нашем
                    случае он у нас один, но вполне может быть ситуация, что ваше приложение в реальности
                    будет работать под управлением Application Server J2EE.
                    Значит и менеджер транзакций будет использоваться от самого сервера. Когда же мы тестируем
                    нашу программу, то вполне вероятно, что использование J2EE сервера не очень удачная мысль и тогда
                    нам потребуется иной менеджер транзакций. Вот для этого и нужна данная аннотация.
                </li>
                <li>Еще одна аннотация - <span class="code-text">@Autowired</span>. Она позволяет автоматически
                    установить значение поля, что конечно же удобно.
                </li>
                <li>Остальные две аннотации: <span class="code-text">@Test</span> служит для обозначения методов,
                    которые надо вызывать в процессе тестирования. И <span class="code-text">@Rollback</span> - значение
                    <span class="code-text">false</span> говорит, что изменения в базе данных, которые сделаны в этом
                    методе должны быть оставлены. Я это сделал намеренно.
                </li>
            </ol>
            Для тестирования проще всего просто пересоздать базу данных и запустить тест - он специально написан в расчете
            на пустую базу данных. Зато сразу получим какие-нибудь тестовые данные.
        </p>
        <p class="plain">
            А теперь коротко рассмотрим функциональность фасадов. Только предварительно я хочу сделать
            небольшое отступление. При написании приложения возникает некоторая сложность при работе
            со списком и единичным экземпляром. Суть ее в том, что информация, которая
            требуется для списка, может быть более экономичной, чем для одного экземпляра.
            Когда же мы смотрим например одну специальность, то хорошо сразу иметь и список предметов для этой
            специальности. Для списка специальностей эта информация будет скорее всего излишней. Можно сделать
            отдельный класс View для списка и для одного экземпляра. Здесь я предлагаю иной вариант - класс один,
            но его заполнение может проиходить двумя способами - полное и частичное. Дополнительный логический
            аргумент в конструкторе View позволяет выбрать режим заполнения.
        </p>
        <p class="plain">
            <strong>ProfessionFacade.java</strong>
            <ul>
                <li><span class="code-text">addProfession</span> - добавить новую специальность</li>
                <li><span class="code-text">updateProfession</span> - изменить существующую специальность</li>
                <li><span class="code-text">updateSubjectList</span> - изменить список прдеметов, которые
                соответствуют данной специальности.</li>
                <li><span class="code-text">updateSubjectList</span> - иной вариант изменить список предметов</li>
                <li><span class="code-text">deleteProfession</span> - удалить специальность</li>
                <li><span class="code-text">getProfession</span> - получить одну специальность</li>
                <li><span class="code-text">findProfession</span> - получить полный список специальностей</li>
            </ul>
        </p>
        <p class="plain">
            <strong>SubjectFacade.java</strong>
            <ul>
                <li><span class="code-text">addSubject</span> - добавить новый предмет</li>
                <li><span class="code-text">updateSubject</span> - изменить существующий предмет</li>
                <li><span class="code-text">deleteSubject</span> - удалить предмет</li>
                <li><span class="code-text">getSubject</span> - получить один предмет</li>
                <li><span class="code-text">findSubject</span> - получить полный список предметов</li>
                <li><span class="code-text">findSubjectById</span> - получить список предметов по набору их ID</li>
                <li><span class="code-text">findSubjectByProfession</span> - получить список предметов для
                    выбранной специальности
                </li>
            </ul>
        </p>
        <p class="plain">
            <strong>ApplicantFacade.java</strong>
            <ul>
                <li><span class="code-text">addApplicant</span> - добавить абитуриента</li>
                <li><span class="code-text">updateApplicant</span> - изменить данные абитуриента</li>
                <li><span class="code-text">updateApplicantResult</span> - записать результаты абитуриента</li>
                <li><span class="code-text">deleteApplicant</span> - удалить абитуриента</li>
                <li><span class="code-text">getApplicant</span> - получить данные для одного абитуриента</li>
                <li><span class="code-text">findApplicant</span> - получить список абитуриентов</li>
            </ul>
        </p>
        <p class="plain">
            <strong>ApplicantResultFacade.java</strong> - разберите его сами. Названия достаточно очевидны.
            Я сознательно не занимался проверкой этого класса в нашем тесте - попробуйте придумать что-то сами.
            Кроме этого можно придумать еще несколько функций для анализа данных. Например:
            <ul>
                <li>Список оценок по предмету в каком-то году</li>
                <li>Список профессий по предмету</li>
                <li>Средняя оценка по предмету среди абитуриентов</li>
                <li>и многое другое</li>
            </ul>
            Как говорил мой хороший знакомый:
            <i>"Есть два способа научиться программированию. Первый - пытаться создавать что-то самому.
            Второй - пойти на курсы, прочитать рекомендуемую литературу и ... пытаться создавать что-то самому."</i>
        </p>
        <p class="plain">
            Остальной код вы можете рассмотреть самостоятельно. Для запуска теста откройте его в редакторе и
            нажмите <span class="code-text">Shift+F6</span> или выберите пункт меню
            <span class="code-text">Run->Run File</span>.
        </p>
        <h3>Библиотеки</h3>
        <p class="plain">
            Для текущего проекта нам понадобятся следующие библиотеки:<br/>
            <a href="Libraries/antlr-2.7.6.jar">antlr-2.7.6.jar</a><br/>
            <a href="Libraries/asm.jar">asm.jar</a><br/>
            <a href="Libraries/cglib-2.1.jar">cglib-2.1.jar</a><br/>
            <a href="Libraries/commons-collections-3.1.jar">commons-collections-3.1.jar</a><br/>
            <a href="Libraries/commons-logging.jar">commons-logging.jar</a><br/>
            <a href="Libraries/dom4j-1.6.1.jar">dom4j-1.6.1.jar</a><br/>
            <a href="Libraries/ejb3-persistence.jar">ejb3-persistence.jar</a><br/>
            <a href="Libraries/hibernate-annotations.jar">hibernate-annotations.jar</a><br/>
            <a href="Libraries/hibernate-commons-annotations.jar">hibernate-commons-annotations.jar</a><br/>
            <a href="Libraries/hibernate3.jar">hibernate3.jar</a><br/>
            <a href="Libraries/javaee.jar">javaee.jar</a><br/>
            <a href="Libraries/javassist-3.4.GA.jar">javassist-3.4.GA.jar</a><br/>
            <a href="Libraries/jta-1.1.jar">jta-1.1.jar</a><br/>
            <a href="Libraries/log4j-1.2.15.jar">log4j-1.2.15.jar</a><br/>
            <a href="Libraries/mysqlJDBC-3.1.13.jar">mysqlJDBC-3.1.13.jar</a><br/>
            <a href="Libraries/slf4j-api-1.5.3.jar">slf4j-api-1.5.3.jar</a><br/>
            <a href="Libraries/slf4j-log4j12-1.5.3.jar">slf4j-log4j12-1.5.3.jar</a><br/>
            <a href="Libraries/spring.jar">spring.jar</a><br/>
            <a href="Libraries/spring-test.jar">spring-test.jar</a><br/>
            <a href="Libraries/spring-webmvc.jar">spring-webmvc.jar</a><br/>
            <a href="Libraries/junit-4.4.jar">junit-4.4.jar</a><br/>
            <a href="Libraries/jstl.jar">jstl.jar</a><br/>
            <a href="Libraries/standard.jar">standard.jar</a><br/>
        </p>

        <h3>Переходим на уровень Web</h3>
        <p class="plain">
            Как только мы начинаем заниматься Web-программированием, у нас возникает потребность
            удобно делать несколько вещей, главными из которых на мой взгляд являются:
            <ol>
                <li>User Interface</li>
                <li>Вызов обработчика запроса от клиента на сервере</li>
                <li>Передача данных с клиента серверу и обратно</li>
            </ol>
            О первом пункте мы поговорим в другой раз. А вот пункты 2 и 3 мы рассмотрим, т.к. Spring
            включает в себя инструменты для них.
        </p>
        <p class="plain">
            Для решения данной задачи был разработан шаблон MVC - Model-View-Controller
            (Модель, Представление, Контроллер). Их функции можно описать так:<br/>
            <span class="code-text">Controller</span> - это компонент, задача которого каким-либо
            образом решить, что конкретно надо делать. Можно сформулировать иначе и более конкретно:
            какой метод какого класса должен обработать данный запрос.<br/>
            <span class="code-text">Model</span> - компонент, который является хранителем данных,
            которые будут отображаться. Важно отметить, что модели совершенно неважно как данные будут
            отображаться на экране. Это очень важный момент, который позволяет иметь несколько вариантов
            отображения - для броузера, для телефона или даже для печатной формы.<br/>
            <span class="code-text">View</span> - компонент, который умеет отображать данные модели.
            Для отображения одной модели может быть использовано несколько View.<br/>
        </p>
        <p class="plain">
            Таким образом, схема работы этих трех компонентов может быть описана следующим образом:
            Controller получает запрос и по определенным настройкам (правилам) с учетом полученных
            параметров определяет, что именно надо делать для получения данных (Model). После работы
            с данными Model может быть передана View и с помощью этого View данные будут
            отображаться на экране.
        </p>
        <p class="plain">
            <img src="images20/figure_20_1.png" alt=""/>
        </p>
        <p class="plain">
            Очень часто контроллером может быть какой-то сервлет, который
            по определенной конфигурации делает что-либо. Model - здесь не могу однозначно что-то
            сказать. Это может быть самый обычный класс с нужными полями. А в качестве View выступает
            чаще всего JSP-страница.<br/>
            Систем, реализующих данный шаблон, достаточно много. В данной части мы рассмотрми реализацию
            MVC на Spring.
        </p>

        <h3>Spring MVC</h3>
        <p class="plain">
            Как я уже упоминал, в качестве контроллера часто выступает сервлет. Spring следует этому
            правилу и для начала мы рассмотрим файл <span class="code-text">web.xml</span> - вместилище
            сервлетов. Кстати сам <span class="code-text">web.xml</span> можно также рассматривать в
            качестве несложного контроллера. Он ведь занимается вызовами разных сервлетов по определенным
            маскам URL. Итак, вот наш <span class="code-text">web.xml</span>
        </p>
        <pre class="code-snippet">
<span class="ST0">&lt;?</span><span class="ST0">xml</span> version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
<span class="xml-tag">&lt;web-app</span> <span class="xml-attribute">version</span>=<span class="xml-value">&quot;2.4&quot;</span> <span class="xml-attribute">xmlns</span>=<span class="xml-value">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> 
<span class="xml-attribute">xmlns:xsi</span>=<span class="xml-value">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> 
<span class="xml-attribute">xsi:schemaLocation</span>=<span class="xml-value">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;context-param</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;param-name</span><span class="xml-tag">&gt;</span>contextConfigLocation<span class="xml-tag">&lt;/param-name</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;param-value</span><span class="xml-tag">&gt;</span>
            /WEB-INF/classes/StudentDatabase.xml,
            /WEB-INF/classes/StudentExample.xml,
            /WEB-INF/classes/StudentController.xml
        <span class="xml-tag">&lt;/param-value</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/context-param</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;servlet</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;servlet-name</span><span class="xml-tag">&gt;</span>context<span class="xml-tag">&lt;/servlet-name</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;servlet-class</span><span class="xml-tag">&gt;</span>
            org.springframework.web.context.ContextLoaderServlet
        <span class="xml-tag">&lt;/servlet-class</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;load-on-startup</span><span class="xml-tag">&gt;</span>1<span class="xml-tag">&lt;/load-on-startup</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/servlet</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;servlet</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;servlet-name</span><span class="xml-tag">&gt;</span>applicantServlet<span class="xml-tag">&lt;/servlet-name</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;servlet-class</span><span class="xml-tag">&gt;</span>
            org.springframework.web.servlet.DispatcherServlet
        <span class="xml-tag">&lt;/servlet-class</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;init-param</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;param-name</span><span class="xml-tag">&gt;</span>contextConfigLocation<span class="xml-tag">&lt;/param-name</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;param-value</span><span class="xml-tag">/&gt;</span>
        <span class="xml-tag">&lt;/init-param</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;load-on-startup</span><span class="xml-tag">&gt;</span>2<span class="xml-tag">&lt;/load-on-startup</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/servlet</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;servlet-mapping</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;servlet-name</span><span class="xml-tag">&gt;</span>applicantServlet<span class="xml-tag">&lt;/servlet-name</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;url-pattern</span><span class="xml-tag">&gt;</span>*.std<span class="xml-tag">&lt;/url-pattern</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/servlet-mapping</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;session-config</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;session-timeout</span><span class="xml-tag">&gt;</span>30<span class="xml-tag">&lt;/session-timeout</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/session-config</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;welcome-file-list</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;welcome-file</span><span class="xml-tag">&gt;</span>index.jsp<span class="xml-tag">&lt;/welcome-file</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/welcome-file-list</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;resource-ref</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;description</span><span class="xml-tag">&gt;</span>DB Connection<span class="xml-tag">&lt;/description</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;res-ref-name</span><span class="xml-tag">&gt;</span>studentDS<span class="xml-tag">&lt;/res-ref-name</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;res-type</span><span class="xml-tag">&gt;</span>javax.sql.DataSource<span class="xml-tag">&lt;/res-type</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;res-auth</span><span class="xml-tag">&gt;</span>Container<span class="xml-tag">&lt;/res-auth</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/resource-ref</span><span class="xml-tag">&gt;</span>

<span class="xml-tag">&lt;/web-app</span><span class="xml-tag">&gt;</span>
        </pre>
        <p class="plain">
            Давайте внимательно и подробно рассмотрим все детали - здесь вважно будет практически все.
            <ul>
                <li><span class="code-text">ContextLoaderServlet</span> - это сервлет из пакета Spring, который
                    берет на себя обязанности по загрузке контента Spring. если web-сервер поддерживает
                    спецификацию Servlet 2.4 и выше, то документация советует использовать
                    <span class="code-text">ContextLoaderListener</span>. Но мы оставим наш пример в таком виде.
                    Как видите мы его загружаем сразу и первым (см. <span class="code-text">load-on-startup</span>)
                </li>
                <li><span class="code-text">DispatcherServlet</span> - в обязанности этого класса входит
                    обработать все запросы. Это по сути и есть контроллер. Я бы назвал его предварительным.
                    Как мы увидим чуть позже, он не единственный. Его мы тоже загружаем сразу. Отметьте, что
                    он будет обрабатывать все запросы, которые оканчиваются на <span class="code-text">.std</span>
                </li>
                <li><span class="code-text">contextConfigLocation</span> - этот параметр содержит список
                    всех файлов для конфигурации Spring
                </li>
            </ul>
            Также обратите внимание на определение ресурса класса <span class="code-text">DataSource</span>
            (он в самом низу файла - ресурс <span class="code-text">studentDS</span>). Мы уже пользовались
            таким определением в <a href="part9.html">Часть 9 - Простое Web-приложение</a>.<br/>
            <strong>ВАЖНО:</strong> Не забудьте скопировать файл
            <span class="code-text">mysql-connector-java-3.1.13-bin.jar</span> в каталог
            <span class="code-text">/lib</span> корневого каталога Tomcat (я говорю о Tomcat 6).
            Для Tomcat 5 каталог <span class="code-text">/common/lib</span>
            Если в двух словах: Tomcat предоставляет возможность воспользоваться реализацией интерфейса
            <span class="code-text">javax.sql.DataSource</span>, которая является пулом коннектов к базе
            данных. параметры для коннекта находятся в файле <span class="code-text">META_INF/context.xml</span>
        </p>
        <pre class="code-snippet">
<span class="ST0">&lt;?</span><span class="ST0">xml</span> version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
<span class="xml-tag">&lt;Context</span> <span class="xml-attribute">path</span>=<span class="xml-value">&quot;/Spring_05&quot;</span><span class="xml-tag">&gt;</span>
   <span class="xml-tag">&lt;Resource</span>
      <span class="xml-attribute">name</span>=<span class="xml-value">&quot;studentDS&quot;</span>
      <span class="xml-attribute">type</span>=<span class="xml-value">&quot;javax.sql.DataSource&quot;</span>
      <span class="xml-attribute">username</span>=<span class="xml-value">&quot;root&quot;</span>
      <span class="xml-attribute">password</span>=<span class="xml-value">&quot;root&quot;</span>
      <span class="xml-attribute">driverClassName</span>=<span class="xml-value">&quot;com.mysql.jdbc.Driver&quot;</span>
      <span class="xml-attribute">maxIdle</span>=<span class="xml-value">&quot;2&quot;</span>
      <span class="xml-attribute">maxWait</span>=<span class="xml-value">&quot;5000&quot;</span>
      <span class="xml-attribute">validationQuery</span>=<span class="xml-value">&quot;SELECT 1&quot;</span>
      <span class="xml-attribute">url</span>=<span class="xml-value">&quot;jdbc:mysql://127.0.0.1:3306/db_applicant?characterEncoding=UTF-8&quot;</span>
      <span class="xml-attribute">maxActive</span>=<span class="xml-value">&quot;4&quot;</span><span class="xml-tag">/&gt;</span>
<span class="xml-tag">&lt;/Context</span><span class="xml-tag">&gt;</span>
        </pre>
        <p class="plain">
            Надеюсь, что больших вопросов содержание данного файла у вас не вызовет. Если что -
            читайте 9-ю часть. Там все описано более подробно.<br/>
            Гораздо более интересным будет файл <span class="code-text">StudentDatabase.xml</span>, где
            мы увидим как использовать заново определенный <span class="code-text">DataSource</span>
        </p>
        <pre class="code-snippet">
<span class="ST0">&lt;?</span><span class="ST0">xml</span> version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
<span class="xml-tag">&lt;beans</span> <span class="xml-attribute">xmlns</span>=<span class="xml-value">&quot;http://www.springframework.org/schema/beans&quot;</span>
    <span class="xml-attribute">xmlns:xsi</span>=<span class="xml-value">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="xml-attribute">xsi:schemaLocation</span>=<span class="xml-value">&quot;http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&quot;</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;studentDS&quot;</span> <span class="xml-attribute">class</span>=<span class="xml-value">&quot;org.springframework.jndi.JndiObjectFactoryBean&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;jndiName&quot;</span> <span class="xml-attribute">value</span>=<span class="xml-value">&quot;java:comp/env/studentDS&quot;</span><span class="xml-tag">/&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;resourceRef&quot;</span> <span class="xml-attribute">value</span>=<span class="xml-value">&quot;true&quot;</span><span class="xml-tag">/&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;sessionFactory&quot;</span>
        <span class="xml-attribute">class</span>=<span class="xml-value">&quot;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;dataSource&quot;</span> <span class="xml-attribute">ref</span>=<span class="xml-value">&quot;studentDS&quot;</span> <span class="xml-tag">/&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;annotatedClasses&quot;</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;list</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;value</span><span class="xml-tag">&gt;</span>students.entity.Profession<span class="xml-tag">&lt;/value</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;value</span><span class="xml-tag">&gt;</span>students.entity.Subject<span class="xml-tag">&lt;/value</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;value</span><span class="xml-tag">&gt;</span>students.entity.Applicant<span class="xml-tag">&lt;/value</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;value</span><span class="xml-tag">&gt;</span>students.entity.ApplicantResult<span class="xml-tag">&lt;/value</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;/list</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;/property</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;hibernateProperties&quot;</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;value</span><span class="xml-tag">&gt;</span>
                hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
                hibernate.show_sql=true
            <span class="xml-tag">&lt;/value</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;/property</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;txManager&quot;</span> <span class="xml-attribute">class</span>=<span class="xml-value">&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;sessionFactory&quot;</span> <span class="xml-attribute">ref</span>=<span class="xml-value">&quot;sessionFactory&quot;</span> <span class="xml-tag">/&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;abstractTransactionProxy&quot;</span>
            <span class="xml-attribute">class</span>=<span class="xml-value">&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;</span>
            <span class="xml-attribute">abstract</span>=<span class="xml-value">&quot;true&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;transactionManager&quot;</span> <span class="xml-attribute">ref</span>=<span class="xml-value">&quot;txManager&quot;</span> <span class="xml-tag">/&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;transactionAttributes&quot;</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;props</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;prop</span> <span class="xml-attribute">key</span>=<span class="xml-value">&quot;find*&quot;</span><span class="xml-tag">&gt;</span>PROPAGATION_REQUIRED, readOnly
                <span class="xml-tag">&lt;/prop</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;prop</span> <span class="xml-attribute">key</span>=<span class="xml-value">&quot;get*&quot;</span><span class="xml-tag">&gt;</span>PROPAGATION_REQUIRED, readOnly
                <span class="xml-tag">&lt;/prop</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;prop</span> <span class="xml-attribute">key</span>=<span class="xml-value">&quot;add*&quot;</span><span class="xml-tag">&gt;</span>PROPAGATION_REQUIRED,-Exception
                <span class="xml-tag">&lt;/prop</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;prop</span> <span class="xml-attribute">key</span>=<span class="xml-value">&quot;update*&quot;</span><span class="xml-tag">&gt;</span>PROPAGATION_REQUIRED,-Exception
                <span class="xml-tag">&lt;/prop</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;prop</span> <span class="xml-attribute">key</span>=<span class="xml-value">&quot;delete*&quot;</span><span class="xml-tag">&gt;</span>PROPAGATION_REQUIRED,-Exception
                <span class="xml-tag">&lt;/prop</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;/props</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;/property</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;hibernateTemplate&quot;</span> <span class="xml-attribute">class</span>=<span class="xml-value">&quot;org.springframework.orm.hibernate3.HibernateTemplate&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;sessionFactory&quot;</span> <span class="xml-attribute">ref</span>=<span class="xml-value">&quot;sessionFactory&quot;</span> <span class="xml-tag">/&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>

<span class="xml-tag">&lt;/beans</span><span class="xml-tag">&gt;</span>
        </pre>
        <p class="plain">
            Как видите, теперь мы обращаемся к ресурсу по имени и этот ресурс предоставляет нам Web-контейнер
            Tomcat. Т.е. теперь параметры коннекта зарегистрированы у Tomcat и каждый, кто захочет, может им
            пользоваться. Опять разделение труда и облегчение работы. Что приятно.
        </p>
        <p class="plain">
            Разобравшись с <span class="code-text">DataSource</span> и вопросом загрузки контента Spring
            давайте рассмотрим что и как делает Spring после этого для реализации шаблона MVC. Но прежде чем
            рассматривать xml-файлы и конкретные классы, давайте более подробно остановимся на принципах
            организации всго механищма MVC в Spring. Я воспользовался картинкой из документации Spring.
        </p>
        <p class="plain">
            <img src="images20/figure_20_2.png" alt=""/>
        </p>
        <p class="plain">
            Как видим, все начинается с прихода запроса в DispatcherServlet (Front Controller). В нем
            определяется какой именно класс (который реализует интерфейс
            <span class="code-text">org.springframework.web.servlet.mvc.Controller</span>) будет
            использоваться для обработки конкретного запроса. Именно в этом классе мы будем организовывать
            логику получения данных для отображения. Если быть более точным, то
            <span class="code-text">DispatcherServlet</span> использует объект/класс, который реализует
            интерфейс <span class="code-text">HandlerMapping</span>. Вобщем-то никто не мешает
            использовать уже готовые классы от Spring - <span class="code-text">SimpleUrlHandlerMapping</span>
            или <span class="code-text">BeanNameUrlHandlerMapping</span>. После того, как сделаны нужные
            изменения и данные готовы, контроллер решает, какое именно представление (View) будет использовано
            для отображения.
            Имя этого View передается так называемому ViewResolver'у (точный перевод сделать сложно, но наверно
            лучшим будет что-то вроде "определитель/выбиратель" View). Если быть более точным - ViewResolver'ов
            может быть несколько. Они организуются в последовательность (причем порядком вы можете управлять)
            и каждый пытается определить, какой View скрывается под указанным именем. Когда View определен
            (в большинстве случаев это какая-то JSP-страница) ему передаются данные и уже сформированная
            HTML-страница (а может WML) отправляется в броузер.<br/>
            Еще раз кратко опишем всю цепочку: HTTP-запрос получает DispatcherServlet, который передает
            управление нужному контроллеру (в соответствии со своей конфигурацией). Контроллер получает данные
            и передает их набору ViewResolver'ов, которые по очереди пытаются найти нужный View. После того,
            как View найден, он получает данные, подготавливает HTML-страницу и отправляет ее в броузер.
        </p>
        <p class="plain">
            А теперь давайте рассмотрим готовый пример, в котором мы сделаем три несложные страницы для
            показа списка предметов, списка специальностей и списка абитуриентов. Сначала посмотрим на
            файл конйигурации <span class="code-text">StudentController.xml</span>
        </p>
        <pre class="code-snippet">
<span class="ST0">&lt;?</span><span class="ST0">xml</span> version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
<span class="xml-tag">&lt;beans</span> <span class="xml-attribute">xmlns</span>=<span class="xml-value">&quot;http://www.springframework.org/schema/beans&quot;</span>
    <span class="xml-attribute">xmlns:xsi</span>=<span class="xml-value">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="xml-attribute">xmlns:aop</span>=<span class="xml-value">&quot;http://www.springframework.org/schema/aop&quot;</span>
    <span class="xml-attribute">xsi:schemaLocation</span>=<span class="xml-value">&quot;http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-2.0.xsd&quot;</span><span class="xml-tag">&gt;</span>


    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">id</span>=<span class="xml-value">&quot;viewResolver&quot;</span> <span class="xml-attribute">class</span>=<span class="xml-value">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;viewClass&quot;</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;value</span><span class="xml-tag">&gt;</span>org.springframework.web.servlet.view.JstlView<span class="xml-tag">&lt;/value</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;/property</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;order&quot;</span> <span class="xml-attribute">value</span>=<span class="xml-value">&quot;2&quot;</span><span class="xml-tag">/&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;prefix&quot;</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;value</span><span class="xml-tag">&gt;</span>/<span class="xml-tag">&lt;/value</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;/property</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;suffix&quot;</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;value</span><span class="xml-tag">&gt;</span>.jsp<span class="xml-tag">&lt;/value</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;/property</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">id</span>=<span class="xml-value">&quot;professionController&quot;</span> <span class="xml-attribute">class</span>=<span class="xml-value">&quot;students.web.controller.ProfessionController&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;professionFacade&quot;</span> <span class="xml-attribute">ref</span>=<span class="xml-value">&quot;professionFacade&quot;</span> <span class="xml-tag">/&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">id</span>=<span class="xml-value">&quot;subjectController&quot;</span> <span class="xml-attribute">class</span>=<span class="xml-value">&quot;students.web.controller.SubjectController&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;subjectFacade&quot;</span> <span class="xml-attribute">ref</span>=<span class="xml-value">&quot;subjectFacade&quot;</span> <span class="xml-tag">/&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">id</span>=<span class="xml-value">&quot;applicantController&quot;</span> <span class="xml-attribute">class</span>=<span class="xml-value">&quot;students.web.controller.ApplicantController&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;applicantFacade&quot;</span> <span class="xml-attribute">ref</span>=<span class="xml-value">&quot;applicantFacade&quot;</span> <span class="xml-tag">/&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>

    <span class="xml-tag">&lt;bean</span> <span class="xml-attribute">id</span>=<span class="xml-value">&quot;urlMapping&quot;</span> <span class="xml-attribute">class</span>=<span class="xml-value">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;property</span> <span class="xml-attribute">name</span>=<span class="xml-value">&quot;mappings&quot;</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;props</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;prop</span> <span class="xml-attribute">key</span>=<span class="xml-value">&quot;/profession.std&quot;</span><span class="xml-tag">&gt;</span>professionController<span class="xml-tag">&lt;/prop</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;prop</span> <span class="xml-attribute">key</span>=<span class="xml-value">&quot;/subject.std&quot;</span><span class="xml-tag">&gt;</span>subjectController<span class="xml-tag">&lt;/prop</span><span class="xml-tag">&gt;</span>
                <span class="xml-tag">&lt;prop</span> <span class="xml-attribute">key</span>=<span class="xml-value">&quot;/applicant.std&quot;</span><span class="xml-tag">&gt;</span>applicantController<span class="xml-tag">&lt;/prop</span><span class="xml-tag">&gt;</span>
            <span class="xml-tag">&lt;/props</span><span class="xml-tag">&gt;</span>
        <span class="xml-tag">&lt;/property</span><span class="xml-tag">&gt;</span>
    <span class="xml-tag">&lt;/bean</span><span class="xml-tag">&gt;</span>
<span class="xml-tag">&lt;/beans</span><span class="xml-tag">&gt;</span>
        </pre>

        <p class="plain">
            Начнем рассматривать этот файл снизу вверх. Как видите, для определения имени контроллера, который
            будет обрабатывать апросы, мы выбрали <span class="code-text">SimpleUrlHandlerMapping</span>.
            Думаю, что вы уже догадались, как происходит выбор контроллера - это обычное совпадение по маске.
            В маске можно использовать <span class="code-text">*</span> для обобщения нескольких страниц.
        </p>
        <p class="plain">
            Далее идут три наших контроллера - для показа наших трех тсраниц. И самое интересное - это
            "выбиратель" страниц - в данном случае мы воспользовались классом
            <span class="code-text">InternalResourceViewResolver</span>. Принцип его работы следующий:
            Сначала подставляется часть из <span class="code-text">prefix</span>, потом к ней подставляется
            имя View, которое нам передаст контроллер (мы чуть ниже это увидим) и в конце подставляется часть
            из <span class="code-text">suffix</span>. Т.е. если в качестве имени контроллер передаст
            строку <span class="code-text">subject/subject</span>, то итогом будет страница JSP
            <span class="code-text">/subject/subject.jsp</span>, которой и будет передано управление.
        </p>
        <p class="plain">
            А теперь самое время посмотреть на код одного из контроллеров - они у нас достаточно похожи
            и поэтому мы рассмотрим только один - <span class="code-text">ProfessionController</span>.
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">package</span> students.web.controller;

<span class="keyword-directive">import</span> java.util.HashMap;
<span class="keyword-directive">import</span> java.util.List;
<span class="keyword-directive">import</span> java.util.Map;
<span class="keyword-directive">import</span> javax.servlet.http.HttpServletRequest;
<span class="keyword-directive">import</span> javax.servlet.http.HttpServletResponse;
<span class="keyword-directive">import</span> org.springframework.web.servlet.ModelAndView;
<span class="keyword-directive">import</span> org.springframework.web.servlet.mvc.AbstractController;
<span class="keyword-directive">import</span> students.facade.ProfessionFacade;
<span class="keyword-directive">import</span> students.view.ProfessionView;

<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> ProfessionController <span class="keyword-directive">extends</span> AbstractController {

    <span class="keyword-directive">private</span> ProfessionFacade professionFacade;

    <span class="keyword-directive">public</span> <span class="keyword-directive">void</span> setProfessionFacade(ProfessionFacade professionFacade) {
        <span class="keyword-directive">this</span>.professionFacade = professionFacade;
    }

    @Override
    <span class="keyword-directive">protected</span> ModelAndView handleRequestInternal(HttpServletRequest arg0, HttpServletResponse arg1) 
        <span class="keyword-directive">throws</span> Exception {
        List&lt;ProfessionView&gt; l = professionFacade.findProfession();
        Map&lt;String,List&lt;ProfessionView&gt;&gt;  data = <span class="keyword-directive">new</span> HashMap&lt;String,List&lt;ProfessionView&gt;&gt;();
        data.put(<span class="character">&quot;</span><span class="character">professionList</span><span class="character">&quot;</span>, l);
        <span class="keyword-directive">return</span> <span class="keyword-directive">new</span> ModelAndView(<span class="character">&quot;</span><span class="character">students/profession</span><span class="character">&quot;</span>, data);
    }

}
        </pre>
        <p class="plain">
            Как видите, в нем нет ничего сложного. Мы унаследовали наш контроллер от класса
            <span class="code-text">AbstractController</span> и переопределили метод
            <span class="code-text">handleRequestInternal</span>, который в качестве параметров
            имеет то же, что и обычный сервлет. Обратите внимание на два момента:
            <ol>
                <li>Мы создали объект <span class="code-text">Map</span>, который содержит
                    имя объекта с данными и сам объект (именно по этому имени мы будем обращаться к данным из
                    страницы JSP)
                </li>
                <li>Нащ метод возвращает объект класса <span class="code-text">ModelAndView</span>, в конструкторе
                    которого мы указали имя View (которое позволит нам сконструировать имя для JSP) и объект
                    с данными.
                </li>
            </ol>
            Теперь нам осталось собрать проект, положить готовый файл <span class="code-text">Spring_05.war</span>
            в директорию <span class="code-text">&lt;TOMCAT_HOME&gt;\webapps</span> и запустить Tomcat.
        </p>
        <p class="plain">
            Еще один момент - это страница JSP которая будет отображать данные.
        </p>
        <pre class="code-snippet">
<span class="ST0">&lt;%@</span><span class="ST1">page</span> <span class="attribute-name">contentType</span><span class="ST0">=</span><span class="attribute-value">&quot;text/html&quot;</span> <span class="attribute-name">pageEncoding</span><span class="ST0">=</span><span class="attribute-value">&quot;UTF-8&quot;</span><span class="ST0">%&gt;</span>
<span class="ST0">&lt;%@</span><span class="ST1">taglib</span> <span class="attribute-name">uri</span><span class="ST0">=</span><span class="attribute-value">&quot;/WEB-INF/tld/c.tld&quot;</span> <span class="attribute-name">prefix</span><span class="ST0">=</span><span class="attribute-value">&quot;c&quot;</span> <span class="ST0">%&gt;</span>

<span class="ST2">&lt;</span><span class="ST2">html</span><span class="ST2">&gt;</span>
    <span class="ST2">&lt;</span><span class="ST2">head</span><span class="ST2">&gt;</span>
        <span class="ST2">&lt;</span><span class="ST2">meta</span> <span class="ST3">http-equiv</span><span class="ST3">=</span><span class="attribute-value">&quot;Content-Type&quot;</span> <span class="ST3">content</span><span class="ST3">=</span><span class="attribute-value">&quot;text/html; charset=UTF-8&quot;</span><span class="ST2">&gt;</span>
        <span class="ST2">&lt;</span><span class="ST2">title</span><span class="ST2">&gt;</span>Profession List<span class="ST2">&lt;/</span><span class="ST2">title</span><span class="ST2">&gt;</span>
    <span class="ST2">&lt;/</span><span class="ST2">head</span><span class="ST2">&gt;</span>
    <span class="ST2">&lt;</span><span class="ST2">body</span><span class="ST2">&gt;</span>
        <span class="ST2">&lt;</span><span class="ST2">table</span> <span class="ST3">border</span><span class="ST3">=</span><span class="attribute-value">&quot;1&quot;</span><span class="ST2">&gt;</span>
            <span class="ST0">&lt;</span><span class="ST1">c:forEach</span> <span class="attribute-name">var</span><span class="ST0">=</span><span class="attribute-value">&quot;profession&quot;</span> <span class="attribute-name">items</span><span class="ST0">=</span><span class="attribute-value">&quot;</span><span class="scriptlet-delimiter">${</span>professionList<span class="scriptlet-delimiter">}</span><span class="attribute-value">&quot;</span><span class="ST0">&gt;</span>
                <span class="ST2">&lt;</span><span class="ST2">tr</span><span class="ST2">&gt;</span>
                    <span class="ST2">&lt;</span><span class="ST2">td</span><span class="ST2">&gt;</span><span class="scriptlet-delimiter">${</span>profession.professionId<span class="scriptlet-delimiter">}</span><span class="ST2">&lt;/</span><span class="ST2">td</span><span class="ST2">&gt;</span>
                    <span class="ST2">&lt;</span><span class="ST2">td</span><span class="ST2">&gt;</span><span class="scriptlet-delimiter">${</span>profession.professionName<span class="scriptlet-delimiter">}</span><span class="ST2">&lt;/</span><span class="ST2">td</span><span class="ST2">&gt;</span>
                <span class="ST2">&lt;/</span><span class="ST2">tr</span><span class="ST2">&gt;</span>
            <span class="ST0">&lt;/</span><span class="ST4">c:forEach</span><span class="ST0">&gt;</span>
        <span class="ST2">&lt;/</span><span class="ST2">table</span><span class="ST2">&gt;</span>
    <span class="ST2">&lt;/</span><span class="ST2">body</span><span class="ST2">&gt;</span>
<span class="ST2">&lt;/</span><span class="ST2">html</span><span class="ST2">&gt;</span>
        </pre>
        <p class="plain">
            Обратите внимание на часть<br/>
        </p>
        <pre class="code-snippet">
            <span class="ST0">&lt;</span><span class="ST1">c:forEach</span> <span class="attribute-name">var</span><span class="ST0">=</span><span class="attribute-value">&quot;profession&quot;</span> <span class="attribute-name">items</span><span class="ST0">=</span><span class="attribute-value">&quot;</span><span class="scriptlet-delimiter">${</span>professionList<span class="scriptlet-delimiter">}</span><span class="attribute-value">&quot;</span><span class="ST0">&gt;</span>
        </pre>
        <p class="plain">
            Если вы посмотрите снова на код нашего контроллера, то увидите, что наши данные мы поместили под
            именем <span class="code-text">professionList</span>. И именно по этому имени обращаемся к данным.
        </p>
        <p class="plain">
            Теперь вы можете проверить наше приложение подставляя разные URL:<br/>
            <span class="code-text">http://localhost:8080/Spring_05/profession.std</span><br/>
            <span class="code-text">http://localhost:8080/Spring_05/subject.std</span><br/>
            <span class="code-text">http://localhost:8080/Spring_05/applicant.std</span><br/>
        </p>
        <p class="plain">
            Исходный код для всех классов вы можете найти в проекте Spring_05.
        </p>
        <h3>Тестирование без Tomcat</h3>
        <p class="plain">
            В конце мне бы хотелось обратить ваше внимание на еще два класса, которые у нас появились в
            разделе <span class="code-text">Test Packages</span> - а именно
            <span class="code-text">StudentControllerTest</span> и <span class="code-text">StudentSuit</span>
        </p>
        <pre class="code-snippet">
<span class="keyword-directive">package</span> students.test;

<span class="keyword-directive">import</span> javax.naming.NamingException;
<span class="keyword-directive">import</span> org.junit.Assert;
<span class="keyword-directive">import</span> org.junit.BeforeClass;
<span class="keyword-directive">import</span> org.junit.runner.RunWith;
<span class="keyword-directive">import</span> org.junit.runners.Suite;
<span class="keyword-directive">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;
<span class="keyword-directive">import</span> org.springframework.mock.jndi.SimpleNamingContextBuilder;

<span class="comment">/**</span>
<span class="comment"> *</span>
<span class="comment"> * </span><span class="ST0">@author</span> <span class="comment">ASaburov</span>
 <span class="comment">*/</span>
@RunWith(Suite.<span class="keyword-directive">class</span>)
@Suite.SuiteClasses({
    students.test.StudentFacadeTest.<span class="keyword-directive">class</span>,
    students.test.StudentControllerTest.<span class="keyword-directive">class</span>
})
<span class="keyword-directive">public</span> <span class="keyword-directive">class</span> StudentSuit {

    @BeforeClass
    <span class="keyword-directive">public</span> <span class="keyword-directive">static</span> <span class="keyword-directive">void</span> setUpClass() <span class="keyword-directive">throws</span> Exception {
        <span class="keyword-directive">try</span> {
            SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder();
            DriverManagerDataSource ds = 
                <span class="keyword-directive">new</span> DriverManagerDataSource(<span class="character">&quot;</span><span class="character">jdbc:mysql://localhost:3306/db_applicant</span><span class="character">&quot;</span>, <span class="character">&quot;</span><span class="character">root</span><span class="character">&quot;</span>, <span class="character">&quot;</span><span class="character">root</span><span class="character">&quot;</span>);
            ds.setDriverClassName(<span class="character">&quot;</span><span class="character">com.mysql.jdbc.Driver</span><span class="character">&quot;</span>);
            builder.bind(<span class="character">&quot;</span><span class="character">java:comp/env/studentDS</span><span class="character">&quot;</span>, ds);
        } <span class="keyword-directive">catch</span> (IllegalStateException ex) {
            ex.printStackTrace();
            Assert.fail();
        } <span class="keyword-directive">catch</span> (NamingException ex) {
            ex.printStackTrace();
            Assert.fail();
        }
    }
}
        </pre>
        <p class="plain">
            Spring предоставляет немало интересных вохможностей по тестированию. Одна из них - возможность
            создания объектов, к котороым можно обратиться через JNDI - мы ведь используем данный способ.
            Чтобы не переделывать конфигурацию можно использовать нужные классы.
            Мы создаем эмулятор JNDI и помещаем туда <span class="code-text">DriverManagerDataSource</span>, который
            связан с тем же именем, что и при использовании Tomcat. Также следует обратить внимание, каким образом
            создается целый набор классов, котоый мы запускаем для тестирование - я имею в виду аннотацию
            <span class="code-text">@Suite.SuiteClasses</span>.
        </p>
        <p class="plain">
            И давайте посмотрим на класс <span class="code-text">StudentControllerTest</span>. В нем самое
            главное - это использование так называемых mock-объектов (я бы перевел это как подставных/тренировочных).
            Как вы уже видели в метод контроллера мы должны передать объекты, которые реализуют интерфейс
            <span class="code-text">HttpServletRequest</span> и <span class="code-text">HttpServletResponse</span>.
            Но это интерфейсы, а нам нухны реальные объекты. И Spring предоставляет нам такой набор - их
            возможности достаточно большие - я настоятельно советую вам посмотреть документацию на них.
        </p>
        <p class="plain">
            <strong>ВНИМАНИЕ !!!</strong> Перед запуском тестов база данных должна быть пустой. Вы можете
            это сделать запустить скрипт создания базы - <a href="students.php?name=part9">Часть 15 - Новая структура данных</a>.
            Такой вариант не является удачным, но в данном случае мне хотелось сразу наполнить базу данными.
            Ну и заодно увидеть, что не так именно в таком тесте. Вы можете сделать тесты более удобными
            и правильными.
        </p>
        <p class="plain">
            Архив с исходными кодами: <a href="Sources/part20.zip">Исходный код</a>
        </p>

------------EENMMxfYimu4ElrWLQlS6s
Content-Disposition: inline; filename=figure_20_1.png
Content-Type: image/png; name=figure_20_1.png
Content-Location: http://www.java-course.ru/students/images20/figure_20_1.png
Content-Transfer-Encoding: Base64

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
SUVORK5CYII=

------------EENMMxfYimu4ElrWLQlS6s
Content-Disposition: inline; filename=figure_20_2.png
Content-Type: image/png; name=figure_20_2.png
Content-Location: http://www.java-course.ru/students/images20/figure_20_2.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAyAAAAIBCAIAAAA+lUwYAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAA
OpgAABdwnLpRPAAA/45JREFUeF7snQd8FMUXx5emYsGCCvaGigLSEUVUECnSmygi
KLY/vfcmvafdpffee+/9k9577z2hShf5/2bncrlcQnJJLsklzH3mE4692bezb2d3
vvvemzd9/vvvP459mAaYBpgGmAaYBpgGmAaYBuSoAQAW+zANMA0wDTANMA0wDTAN
MA3IUQOcHGUxUUwDTANMA0wDTANMA0wDTAPEPci0wDTANMA0wDTANMA0wDTANCBf
DTDAkq8+mTSmAaYBpgGmAaYBpgGmAWbBYn2AaYBpgGmAaYBpgGmAaUDeGmAWLHlr
lMljGmAaYBpgGmAaYBp45DXAAOuR7wJMAUwDTANMA0wDTANMA/LWAAMseWuUyWMa
YBpgGmAaYBpgGnjkNcAA65HvAkwBTANMA0wDTANMA0wD8tYAAyx5a5TJYxpgGmAa
YBpgGmAaeOQ1wADrke8CTAFMA0wDTANMA0wDTAPy1gADLHlrtLG8B+zDNMA0wDTA
NMA0wDTQWzQgOzQwwJJdV22uie7k5ua2ds2aH5cv/2nFClaYBpgGmAaYBpgGmAZ6
ogZWLF3652+/hYSGYmSXkQYYYMmoqPZUw2X4+supn86es3rXnpVbt7PCNMA0wDTA
NMA0wDTQEzXwy97974+b8Mvq1Qyw2sNDct8Hl2H86NHnrGyS7/0XdfUfVpgGmAaY
BpgGmAaYBnqiBjIePFh37PjShQsZYMkdltojEJdhwtgxR3T1Q6rrfApLWGEaYBpg
GmAaYBpgGuiJGoi8cv2XPfuWL17EAKs9PCT3fRhg9cS7iLWZaYBpgGmAaYBpQEoD
DLDkzkgdEsgAi92iTANMA0wDTANMA71AAwywOsRDct+ZAVYvuKnYKTANMA0wDTAN
MA0wwJI7I3VIIAMsdk8yDTANMA0wDTAN9AINMMDqEA/JfWcGWL3gpmKnwDTANMA0
wDTANMAAS+6M1CGBDLDYPck0wDTANMA0wDTQCzTAAKtDPCT3nRlg9YKbip0C0wDT
ANMA0wDTAAMsuTNShwQywGL3JNMA0wDTQNdrILq8anNIGCdQG6Cjg7/4ji2SzYgs
q3zD1KyvtjYqPK6r61VQ3PWNjK+ome3mzqmr840UCJNTg4rLwkorhhgb9+Mb9oy+
vn9Radc3jB2xWQ0wwOoQD8l9ZwZY7EZlGmAaYBroeg0ApzYGh3KqKpyWFv7iuxRg
RZVVDjUx4TQ1UQGY1S2AlVBZ862rG9CKb6SqIIkAVnhpxWBDI9qwJ3R1GWB1fed5
2BEZYMmdkTokkAGW4twbrCVdqQG/olIMDM0W/ORbWILSkfaIJUNaR+R0xr6+itek
zjhNBZfJAEvBL1BPbB4DrA7xkNx3ZoDVE+8i1uYOagDQY5mVa5KRbdqkmGVkO+YW
uOcX+RSVtJuNYGygwvHXKiu33XI6eJpNdyctKSh2zSvsID7KvWGPoMAOAhauIH1J
CCguQ/EvLvMtBMo3onnxr6gADdNdaP0W+iStwwssSahojwULO9JDUyGP4MXtrlNm
gCV3RuqQQAZY3XUnsON2owZiyqvfMjKGy4P4PhqXxzU0vnZy/sXP/0J8ojc/TrS1
nRhR7HPyOBUVIllF5QNT07iK6rYK6Yz6foWl9jn5ByOjf/b1Dy2p6IxDMJmya6Aj
gAUG8ioocszNN83I0kvL0EtLB807g5t55KJtwBfzzGy91HT9tAzd1HRAP351yMk3
SMtAcc0raGqmpdSFOkbpmSbpWW75hUlVtTPb4iKkDOeWV2iZlaOTSlrlwtO84rxj
yH6BemJNBlgd4iG578wAqyfeRazNHdRATHnVW2bmnIYGiSxpWrBdoPaMtjbCYuhA
1abD8YCVj7hgIllD4wNLS0UALIyvh6KiwY6civJbJiZAzDadFKssdw00AiwVlW2h
4SlVtSEl5eKSVFn7anMxWOAkmEU3BAV/7eQ0CLHnFy+iDNHTW+ThdTwmzi2/iNIM
wqcmWFlzSkqcmhp38YJ+asbpmIQZzi59BYJ+AsEKbx/tlHRJZzEPRkXHomO/cnJ6
XFPzOR2d7728gUezXN1ljMEieFdcCq5a6eP3vpkZDvqyvv5ST2+8q/gWlcCaJXcd
MoFSGmCAJXdG6pBABljsFn0ENSANWEIhJy4Ao3o2elJLa11QcGhJeZvcHIoJWBgp
icUOp6mhAbiEBh7B665Qp9wIsNTUlnh5a6WkXUxIEhfNlDRxLLk4yB29yyY772tH
R1zNQfr6H1lZfWJj+6Gl1TN6etjST0N9rX+AdwGxGBHAsrMnV5wH/bnuHk/iOwyr
/HtFH6FwlJW1ZabIf423CI+Cor8Cg57Q1iI4hVsAlS9e+MzG5n1LS9GrSItB7tRM
pZqU/K6pKTkKdocQ3og7WE9vX0QkDsHsWJ3dAxlgdYiH5L4zA6zO7vFMvgJqQAqw
xtrajbezpwXD1Xvm5k/q6pJBRV39JQPDk7HxYSXlkmeBcSIQk9VLyiNKK4JLygMa
m7haBSxUwC7gNuwOcwW+NwU4Uqe4DL9ixhaOBdsADor6+C89KNyX4iaRkJfisqCS
csyfRwUUqVZhC4Y3Ou0L5/WOuXlG9SV6dLEcWVqlgJey5zapEWBpaxMiAZcAgsUF
/6WXrH4WIa4RogN/9/Pnzp17Sd9APSkloaIadi90xUUensRSJRAMt7CAWxAdoBFg
gai0tD6ytEIPf8vUjMjU1HxCW3tLSAhqQofoY6dj4/traaLPo+YrxsaoOcHe/gUD
gwZDb4uAhf5pmJb5NoQLBP11dN4yM5tk7zDc0hrTDLHleT39YzFxOFab3lV67sXt
rpYzwJI7I3VIIAOs7roT2HG7UQONAEtTM7y0EsG8KMj6A+6xycr92dePJP7hp6Z/
YWuHgYG+fANHCO7AipCVeyYuYX9ktFZKunNuAeBGPHK0AFjYnYQYF5XaZ+fBULE3
MkotKcUxJx8yJV/uIQFbsF2QlHI0Js48IzuwqBQmKBzuSHTsgagYOlueKpBOV3TJ
K0CozYnY+MPRsQejYuD9QSRNcHE54q4gDWPbvsho0WitqfmSkfG5+ERUU0lMgRwZ
W9WN16tXHroRYDXrqpbYSC1YuJToBj/5+I63tVvm5R1WUkHj3NF1tyClFg9kfbQ0
EWYXUVbZCLDU1Vd4eXsXFCdW1GgmpfYBz/HINcnODp0fQjDv4XtPb8J2Ghqvm5go
xScmV9bCR3k+LgGw1aoFCw3zLCjeHBxCsk5AgqkpIC+r5rJHftFkewfCjqoq893c
4L5sq8O9V176zjspBlgd4iG578wAq/P6OpOssBqQAiwMWg3WINiWSiswFH2H2F7i
5hB+bGWNYOGgYmLsgckHYwYGs88cHJ+CievChXdMTWe5uKklJoNUKGM9DLCwO62z
PyLqC0enFwBw58+/YmAwzckFxgNQl3jsAV1hYJvl6jbYwKCvquoEW9udYRF6Kenc
2bNkED1/fqqNbUJlrZiuEHnzrYvLEMTrKCtx586ivGti8o2LK7bD4AGxT/CemoZo
M9hFlJXR+AmWlvGVNTK2SmGvZg9tWDMWLJigpEpjCxbtXVHlVYg9Bz/hZQDJSEE2
AJeffPw4NVVyiZWVNwaFQHgjwBII4H+kcwk984uAa9SWOdTIKKqsCtvRw8fa2PJO
PTV0PIil6IZDTHV0ajUGC5XxmjGPT0mKu2ainT1MpLEV1Vk1l+BkJ9QlFE6ytcOr
gvjFoIdeNQVvNgMsuTNShwQywFLwG4Y1rzM00AJg0TEMQ8shmHwwYmmoI9D4YnwS
vG/gHtAVAngRAkzGDNFYCJ+OypvkpT+JWqEeBliQCW7bEBT6NIY3FWUinEjA7sqD
9fUPRcaQWV1FpcHFZWdj40l0M6gIhCdAhPLFF4TCX/0DQXtkXBQKpzo5Y/hEfZjW
YNN6XkcXG0fb2CLOZqGn12QHhydQTU1toI7OqZg4tOoJDHs4ltgiQtqvivBnBEEn
V9e12ioWOtMZnbARYKmrj7C2WezphSsoLvjvk4isapJoFB0prLQSXRFBWr/5B851
cx9tbfOMvqimOGepFGBhQh/1ZQP0RYClqYlEpkhnil6EFO390S1xLDW1hR5esF3R
U44trwaptwpYaBKmDb5Ms49qaLxtZg4rGnLT7yPvEs6cUMBpajyB3ghveymbvtqJ
eSsYYHWIh+S+MwOsznh0MpkKroGWAQuNx5BzNi6BUIimZj9trf8FBmGkgfnqr8Dg
/hhChMIXDAynO7v86OP7ibU1Ik4whLxhYmqWkfUwwAIM4d0dFIXAFwxXWGBkioMT
WO1Te3usggKKel5fXy0pmcQa5xe9Wz/D8QVDgzlu7ku9vL9xdnndxFjk46sHLDTS
ID1zBLafPDHTyRkuJIyLqVV1XvlFbyIUBgY2oXC2qyuMWD/4+AK8RIClqTlI32Cl
r98CD0/MXMN5tdoqBlid0Z8bzyJU3hsRVVh3jbqqacmvu/oaAsYbAxYNw9obHjnL
ze19UPiF888bGk52cBxuZSWanFGfFF4KsIzTs6iJFP1ECrDQsS/EJXJKF0kPUVOb
7+GJo9NTTqyUKU0DJBunZ5IZi5BA48nOnibG1LNnyCRHwD1updOndgaHRLLZFZ2Z
GIwBltwZqUMCGWB1xqOTyVRwDbQKWBhyLiYk1y9jojrf1T21us4uJ2+SrS0NJV7g
7oGMnRnVdUZpmS8a8S/uAsHhyGhYg5DvsWmaBoxAznnwobhRd8ln9g4uuQVwoCDQ
CnkcyNCoqvK/gEAMnxfik56GRYoE02htDAom0coV1chINAcuSzq9sR6wQGzIV/R7
QCBQCbFcIXxEDsxs6dWXhltawfaGyphohmAsSIDlQBzk/q65ReGlq9gYW16FXEqt
tgrMx5K/y71Lty8PFuxPJ2Pi+qK/qag8ra3zg7evTkpaZFkFnMgiL3DbAQt9DNF+
pHvwFiyY0OLqs3jEV1TPkM2CZZaZ/RjeNHgL1qsmpngV+cnXT7LAIKeRkkZj6lnp
JA0wwOoQD8l9ZwZYndTRmVhF1kCbAcvNPaPmsmZyKiYYEspRUTkRE5dVexlGgry6
K+AVYi7S1Fzl44eAGLBIU8AC9yAn5DgbGz7gV3Wtf2BB3VXsXnz52nQ6gAmFc1zc
PPOL4fQhAxU/ccw2O49ajwKKys7BogZ3oQRg0eB0jNMwXCGSBqmtEPXslFMAQxqi
jEWByQIBGgMhJE1D/SxCcZoGGVsFCmRGLLn353YAFq6CXU4+mQbIJxP5yMoaDj5M
EUVH2hLKB7lLLGsouwUL3QALGHxibUMTK3zr4kqnnaLgTQPxgsTH1+JahGgYOgny
ctEYrE/tHfJqr2LKSHxldVr1JcRj0ZB5fvZrNyxZLfdrp7ACGWDJnZE6JJABlsLe
KqxhnaeBVgFL0kUILvnFLyCn9sqmkFDRW766+kR7eyQugjNlubcvPG6UXYYYGZFV
aJoDLBiQEMnOYRo8aqqrf2hltdzbB7uv8PbF6z7ls4G6OjCSfQIIq5+ZD9MRVQJA
CkHKojiqegsWjadBSD5GQbuc3PXBIVMcnTDoPm9gAOuXyCGort4CYMnYKtjJaHw0
K3LUQPsAyzIzG+mpiBtOXX2MrR24H02KKKv4IzCIuOHaBVh0FiGmGRJEU1d/x8xM
IykluaouuapWJSHpNTgieWtoC4s901mEm4JCaJ4teKhN0jJh9EWwPHJJ4N0A+EVC
DFkX6mQNMMDqEA/JfWcGWHJ8YjJRPUUDsgS5H4iM4oPcNYYYGYONMJL97O1LJt+R
KBMd8gUhJufPcefPku8YV1AuXkS6BAxXTS1Y4WWVByOiSDwKDVKBZLo7/iJyhe5+
5rRVRvYbWMOHTwUJC5ZYn7AxYEWUpoCFRAzwEH3n5vaRtc2TAsET6hrjbO1+Cwh8
iXotcawWAUvGVukkp6EBPeXi9pR2tgOwyFo3ufmjqR1UQ2OYhYV/UQk8wvBTj4RT
GHZQXHEVFUSXo4cjjqoh0ahA0EIMFjSG6wsMehKmU+TB0tZ619wcK+Qgh/tQcY6G
FgELEtDtdVMzXkXvFQhggv3YygqzEb92dnnbzOwVE+P3LCzgIkQgPOtIndo/GWDJ
nZE6JJABVqd2dyZcMTXQMmDBfOVVWLwYmRvhGVEXjrRGwuucRHhhkGqIxqkIBLA/
IQEppkpJlgOR0cRF2FwMFuxMyJvVj0/wiN2/cnY5i0xUjXffEx6JV/zJdvbU/gTA
gl1BZMEqKtNMlrZgwW+ICrMRm4WwMBWVT6ysT8cm2GXnoaniGKyWAUvGVmH1a+Yi
lHtPbgdgUZvl2bj4p3R14C9+QltnlLXtpw6OLxkaIgP7cwb6pHepqsLLjPQK6Aay
AxadXfGbf0A/fm4EQXzYw86dG21h8Rbc4nRRqZYzuWOSbGHJgYgoTIkVzbEVTYMV
Inx+oKbG/4JCPAqKWUeSe0eSFMgAq0M8JPedGWB1andnwhVTA1KAhUnvJF6EL5hV
55RbAG+gKGK3PtEoolI0klPxZk9jsJDLCjEukaWV0WUkKRFigTFewiFC/SBNLVgI
SDfJyBpbH4OFrEVIwI36iKHBQAhRaBLyG4F4MGORzCvkAcsiMwcDEk0bcSQyRmSi
qHcRIu5qZ3gEDSvGkLYlJBxhWDgQPDtYO0Xk1nmIBYsuj4j8qFjTt9VWsUGxM7px
dHn1Rvj1MNsO8x7OnsZ3bJE8EPrDUD1dktFDVaWvmipm/+FXdAYspQw0/8zBgSxE
qKwEF94ST6/z8UnzEcwHm+iF85Osbcwzc1KrLyHPGfEnQv75c8ZpmQ2zCElyEBhN
lSEfR6EHJfMwcgt2hoW/g3mp58+9rKf3nZsH5MzCsjwXzpP6584IkO+NrC5QORgr
6vANe0IoEOdvo47Ci/GJ890934LpC9MSlS4O1TfANNgzcfGIvmKO5s7oSAyw5M5F
chPIAKuzezyTr4AakFoqZ4SV9ShrG1pGWtsgaP1ZvIXzS+UMMTREvgbYAzA2wP33
hb09MRcJhdOdnZ1zCoAy7nlFO0LCMajYZeeKh8BmZxFidv1SWMX4ZdrG2NhYZmQj
pYJ/Yen+8Kjj0bHWWTleBUXIVIRYq2f42ViwY33v5eVXWAIYssjIHo8JjNSQUA9Y
MRXVv/v6E7cjSaylAvsZ6BCjHYQQEKSVJQGrflk6BLmj5eAzLFonS6sU8Ar2gibh
Mllm5Z6OS7iQkIS/+C615hIuJSaHnk9IQgUU8SmjS+C7dVauRnKaUkKyaXo2LiLi
8CyyciAHOfoxWQ+mTbiPtVPT8V/sC3MpkpGKQ6CoQEiGfMnU6vS7QVrmqbgE9EOX
3EJYcw3TM7E76sMEi3cPmoBUtb5hSonJkpFVpPvhTsktwNrS2AtFKzUdRCiZR7cX
XDuFPQVmwZIbG8lFEAMshb1VWMM6TwPSiz3TBZ7FBSG9vFnoKW2djcEhoaVkGRwU
mJcQmPU8Mjqqqw/U1X3TzAyx6lhzDUmtXjQ0wrq8fwYEPWwWITUXYXmcVxAdJRTC
PIYUR8hdhGUBnzUwGGxg+Ky+ARY/wQCGIJXpTs5kHr6WFo6CClhtF9E2E5BouzFg
oT2YXf8WYuRBTmpqyzy9AYLIvIAVS56GC6k+Bos6+DAGj8E0MX4jjg6IhAkEgyis
aLK0ihmx5N4b4VCjqdLBRvhL8tA2joDGf8E3+JUWyQagNwJZkJMW28XrLNEFLrGF
puanKwfQfaUWLBfLlFrUklrIIBD10V0pb9H/UiHibvCwhomNYeJD4wvrPHLvPA8T
yABLLlwkNyEMsLqs67MDKY4GpAFLaiU4cIxAAP/LltBwvyIyCtKWI+YJcSq/+wci
/xDJmAAOQ00as6KqOt7GBu42OkQ1tWBhO4YZr4KSnaHhg/X0aY540e68z3GYmZkw
KZX3BpZBDgKq+mA7df+pqQ3R1UXIl5SLkHoP/wgIfAyTE4XCp/T0XjU1HWJs0kdT
421TE7LILr8cim5KOo4O6xosbcT8Vk9pz+vqHIqKjiyrkqVVinPtWEuYBpgGGGDJ
jYE6VRADLHavPoIaQKwSiRHhnX2NikAwUEtrkYfn5uBQrOIMKJFamxbTuBBKglyg
P3r7voBlTPgU1V87Oe8Lj7LNzpVYKiePxAjz4PWBmRkNeKLs5VNYrJ6cutrX/3WY
slBHRQVrwO0IDcdicBAuXs0QHpaf/fwgYYCGxk8+/oZpmXppmaJZhALBVAdHhG1R
aIPRi1/c0OFxDc3n9HSRxOhIdAyCt141NKSL+eBYsKuhMiJsNgWHTcHiu6qqT2pp
I3MpVjyEZULGVj2C/YSdMtNAz9IAs2B1Ki+1WTgDrJ51/7DWykUD4BLk8LTKym1a
rLPzEL+CBXER6dJs+nJKUfC42WTnIW4GBeDixbOOuG3wzmA7hOMvpvVJ/kQpCpYw
ZIykuyNFEEiOmqOonYx85516kIBQG0TPwCOjT9M0aGo+rae3LSQMrj0xtGF3tAE1
cVJ04qHkCYLAxDVBWvgvDorGI/UoZnWJkK61VslF7UwI0wDTQKdqgAFWmxmoU3dg
gNWp3Z0JV1gNAEEeVlrNiEgriHdvNn2ipPCmSnjY7rAnrfb12xMWoZ2SBmYCbKHA
ioYI+lW+vnT+/BumpvhVcskR0h7+dMQ2MMpYtEg2T7LlTU+z1ZNS2KvJGsY0wDQA
DTDA6lRearNwBljstmQaUBwNICJ4V3gkouaxgDRC0ZGvgRZ8Fy3Qq67+iY2tXyEh
J8VpNmsJ0wDTgCJogAFWmxmoU3dggKUIdwVrA9OAyItHchFhXWdXzB/sp61NMo7S
1KaamvgvgtaHWViaZ2SzdNiswzANMA001QADrE7lpTYLZ4DF7lKmAUXTAObbayen
bQkO/drRaZCBAQxar5iYIGEEFjOB31Aq7l7RGs/awzTANNBdGmCA1WYG6tQdGGB1
153Ajss00IIG4AEEZsFSRVMWIeIK+RuBVs3GezFNMg0wDTANQAMMsDqVl9osnAEW
uy2ZBpgGmAaYBrpAA3QWBXtJ6DxVdxSwAATiT5tpQoF36K7zYoDVeX2dSWYaYBpg
GmAaoBogRtniMvi4kaOEMVYn9Yr2A9aD//67ee9eUFlZWEVFcHl52qVLgAMFRqY2
NO3f+/dDKypwXqHl5Qk1NV15XgywOqmjM7FMA0wDTANMA1QD8G4jW5sgMXWOmzuW
UMRsWaaZztBABwDrwYOcy5e5U6c4JSXuzJlZDg5dCSJtwKW2V71+5w534QI5r/Pn
Rxgbd+V5McDqjF7OZDIN9CwNYPxruhZezzoF1lqF1QAiCHVTM3708XsRix+cPXsy
Ji6stEJhW9ujG9YxwLpyhSwuganLAsEsd/euBJG2U1Mb9iCApaJC0jQrK48wM+vK
82KA1aNvJ9Z4poEOasC/uAxrBrvmFWD9RJZbq4PKZLs3q4H4yprl7h7chfMk4Yiq
ClbVZIDVSV2FAVYz4HXr3r1l3t7f+/gs8fLaER7OAKuTOh8TyzTANCCpATotUTkx
+RsX1y2hDcvvMC11ngawjBLmh0aXV0WVVUaXVcK6g6uAhY/AHJJLM2FjUEk5tqMa
ppFil2abhAWdIAHVIkorqN8N/4VYIry8CnvhcNiIv6iAjbSIRQGpRZX5Bnjza1Y2
/FpYgnms2BF1QksrAh8Sn46mgtHFwlEfNSms47hoVUHdlZ98/UTGERUV5YSklKpa
yGRAL/du1lmAJRn5LhkwTr83a01qWq1pzWbrtFwNx2q0V/2xW27Vw4LcpSL6pYRI
nRfOs2mFlsPnmQVL7l2cCWQa6BEawNhpmpE9z8PzNSw7ffbMck8vWBp6RMt7dCMB
PeaZOeuCQraFhm8IDsXK3y65BfsiIs/GJWL1STAHoARE5ZVfbJKetTs8cktIGFZG
csktxEapE0fMOPhYLzX9QGT0gYgoZKANLalAhNN6XjgOgQNRMsO1Rp2tIWHYvj00
nFIXeA4LU24MDsXGTSFhp2LjxYegYIQFA6wyc45ExUCUUkKifXY+2dgY9bALmg0P
4GZeOFp7MDLaJisXDQOTgRGxaDoWJxhvZ08WeuK9T4s9vfaER+LcmdFU7j1Z/oAF
RIitrj4RH6+cnHw8Lo4Gv5dev66XkXEyPj6xtvY+jx3SLPLgARxzAaWlpxMStNLS
Iioqrty5I0Vj9L9Xb99Orq3VTk8/m5joV1ICyRShqEB8uXz7NoTg6KjgWFCALVdu
33YqKDgaG+tWVHT733+pnHv372dcuqSRlmadm5t5+fK/EkLu/PvvxaQkSLiQlGSS
nU2F42/W5cs4I2zHiURWVWFL9c2bptnZx+LiwisrIVDyvOhRyq9fdy0oEKSmZl++
jP9W3rxJNYMWehUXN6uHCWPHHNHVD6muk/vFZgKZBpgGFFYDsFicjI5FTAzWN0R8
wnJvn/iKaoVtba9pGFF7VCx35jQJCzl3boGz6/rgUHwfYWZulJ4FEgovrcSi3St9
/D6xsRkgECBu5H1z89mu7top6eAnsR5gNwKZ/RUQOMzCYoCGxuPq6iOsbZQSkr93
8+DOnSXCz5zGgagzLqq8aqiuLkRhe19VVcSbYyMkGKdlog2k8oULEywtEyprqdkp
pKTCI78Y7AUwekZLE7++Ymg4xcEJ3j20UMxY4C0A4nduHh9bWnHKSkSOsvJTGhqT
HRxX+foZpWckVtb+4evPnT5N6IpfioD8RTAMap49q5OcxtYkkG/H7hTAOhsTwx0/
ToLEjx/XSUmxzcubhrUmcEXPnRtnY6OWkvLP3btiwsIXwI1vSclSH5/3zMxQp5+a
2jBLy0WenkaZmffrqYXQyn//YQs8d2Pt7B5DRz9//k1T09lubpvDwgqvXhVjUEPo
/dmzs+ztMy5f/s7DY4i+PnrVUH39PVFR5TduoPKFxETIGaCq+rSOzqcODqrJybd4
9gJLNRvkjp+ssrK4Y8fIeZ08eSg8PLCsbKa7+yC4sc+cGW5ufio+vvbWLUnUA7rN
dXcfbGDQT0Xlc0dHlZSUuMpK7sQJIuHUqdVeXgyw5NubmbTepAG80IMw4iqq8RcD
EvWewM9CjQp04MF34oIpr0qorIkoq8QLerMTzrERb/ZwmsRWVIeWlGMvDCTYBcLx
F2MeHeHwN7y0gh4U2yUdOtgRG1HwhR5dXCCcOo+wC9qJ9jTraiHBVSXlYjkQRTxN
vBeJeqmyai+rJaVwKspk2FNV/dnPv/jyNcjEXlKuot50lbv9XAhgxcYTwuDXQXrJ
2ORlEvp9ZoKVNQyK6FRY2Huak0s/dSHClTg1VeJZQxGoDbe00klJw+LflI3c8ot+
8PLpq6kBmxDBFx7X3jQweB2DGogZwlUaop3QFYeamJAQKC0tLGrZAFjpWWR3VBYK
J9jZ4+pTc5dHfiEI6THUJ8HB9W1QVcHg8ndUjHiZcMvMnGHmFgSY0ACBGmknKuML
SE7pIoDPo6B4fUAgBixOXb0BsHBE1Dx3DqfDAEu+HbJzACsxkTAEeom6+kg7u6G4
lidPkmuM/qGm9oSODuxJSIVAbU74x72w8C1TU7KLuPDo/ay2tn5mJjUF4XMxOflZ
yIScixdJQWXM9UPPUFb+1tW1kscmfHLEofeami8aG39ibk5oDzXRy0m3E+yNitoX
EzMIvRBTICENzeNb5VZYiFaBsK7fvUu7Pn4aYW0tRjer3FxyXGzX0BhmZfUOXkEg
GVtQGX1UQ0M3I+NuvYXMPCcH62mQvo6Cpp4+/Zq6+q6oKNH9o6q6OiCAAZZ8ezOT
1ms0gDHDNa9wubcv5jp97+27JSTcq6AIzpT/BYU45OTTGXY0XMYkPRNv9gs9vA5H
xVhn5YBapPiG4FRRqW5K2s6w8J99AwSJyXC1wFmzwMMLwhd7eouDfDHWHoqKWeLp
je2LPLwsMnPoMjign1/8A3/w8UPBF8n4G3xHMzCw7YuIgsCtoWFmGVnYCFuCmMPw
Bd4ZDKKG6Zlr/AIgBPJX+frrpKa75hZGllUBs3CsZV4+Xzm5iBw36urDrazW+gfh
vEBdTb1RveZCd/uJSAFWf23tz+ztQTNn4hLQNgQzzXXz6IOxQ0P9dRPTpZ5eawMC
R1hZkVUpMTpYWbvkFeBNAH3sTGwC6mBjX20tVPjFP4CvaS2iq/YCFsH34jL4+/ph
lBEKnzcwnO3q9ldQ8BQHh8d1dbDlBX0DrZQ0mjL0M3sHMpxpaT2uo7vA3fO3gEB0
s8l2Dm+amH7u4Pijt69VVq5mStqv/gEY12hNSJjh4vpHYNAPPr4w1LEwLPl2yE4G
LE3NJ3R1QRLC1NQNISHPGhhQFvnZz+9GvREr9+pVGKKwETUXeHpSxyIMXQTVT58e
Z2qaWFcHENHOyHia7w2AlbmurucSE1VTUnZERDyJLTy3zfP0RF4uKcDCgqxTnZ2V
kpPhxRN1KXX1J3V0cBct8fGB525bRMTzhoa0Vatoq+CsbBWwNDUH6Ogs9fZWT03d
GRExxNiY3EWqqnPd3Kpu3oQEuCnfAdipq+M+fM/C4khsLHyOm8LCyEb6NsMAq7EZ
QL7dmknr6RrwLSy1z84jbyb8G9Q7hkbgJ05d+JKO7tm4BPAKxkWMbRgIsdzyk7h/
lZQG6+t/bGW9NzwyoJjkOJDUwIagYDhuBmpr91VTe9XEBMahIxFRxHHDv7hjRhWN
doJH5lsHR5jG+e1ngWIwTZFRtqT8GX6+FQq+4L9UOMDIr6gEkTSAoefxuqWkhGfU
+5aWa/0DkbwRVAS0QkFTDdMy5ri6f2hp3Y9aC1RV+6ipvW9pNdXR6XhMLE4HxyLO
Qfwqdtxg/OMdNxsDg2Ci6+kXVGHb3wiwhMKxNrYwWSVV1YbzAe/GGZnv4D0Z10Io
XBcYTA2fKgnJeP5j1ECPUktMRjeA+WqNnz95l9bQeMvMDMSDaijG6ZmEsWi0U7ss
WDgi3ii+dnTkzWaCmS5unvlF6TWXEFb1pilvG1NT3RES5llQjD7/hBpv/dLUHGxo
FF9Rk1JdF11WbZWZi0Y65+YjAN+noBjdsvjK9VVoLc0AoKKsmpQCgXGVNWxVTbn3
0k4GLFXVP4KCrvLRVDAOjQQ2oadqaj6tr3/p9m260RR+N75fvmFmlskHbOGjn5Hx
sZXVX8HBiIIqunYNVq75rq7E2iQUfu3snMvHM9HPkZiYx9DXtbSeUFePrKxsBFhC
IY6Yd+WKqGZsrMiupqLyg48PwqfI9v/+G9WkVa0DlqrqQk/PGirhwYNZbm7kyYhH
sKYmPJLY4lJY+BR/B6Jtljk5tBr0sC44mFmw5N6JmcDepwG8kSPkVvSSjTdyXd2X
8Hp27uxbBoaIGo4qq3LOKVjo4dmXf7kiQwVYhDhE1J7W09sRGuZTUAJEowz0R0Dg
k6AfuHio4+bihacEwtfNzEVWaoloJ4yI37ry9zL/CiRIShVPBMMCz2Sjlha+UMDC
uz4Cn9cHBcP4LdWGflqaP3j7wAJH42NgpvqUmBaE1FhO2kCzwJBEMEqDdPUwwmkn
pxLHDbaIAQutxRPvzOmNAQAsFozVyC0rxw7fCLAEaog5CaoHdPx0OjbuRcw54DkG
VsbU6jp0ksTKmoHoUVpaeLxvDQ5BJJZxRtZz1HwgFOJaw9EMWMGlxwy++UiIgMva
XsBCZ0PU/EeIqeJ7786wyPy6q2gA3Mdjbe1Ij1JXX+Tugc6GI053diFN1dREL1WK
T4RFCi1JxQzB8iq8KhDA4guc4Ijwa9oqOWqViaIa6GTAunhRJyODcgz+TLC3Fz0x
1dRouBJCzn/x9yd9QkPjI94ZR2vW3bqVVld3k7cn4RNVWUnsT7z5yrDeaSgOaac9
G68USomJjQALvO/mVk9iDxDzLgIsJSVYv8Tbm7aqdcBSVj4QHS2WsMynvrMqKSEA
H9v3RkZS7HtST4/yJT0v96Ii8tBkFixmvmIaaFEDUoAFk/OndvaY63QuLtGrgDhu
/gwIIh4ZofBlY+NVPn7HouPmubmTYU9dCJxSS0yhgSkIo3laTxfPB9iS3ze3wLwq
zN5a4unVT5u86JM7sd2AVVgKWxoaxgkFGM8WuHscjY5d7ev/goEhtuCBtjU0HL7C
mPLq+R4eJDQHh9PQWOjuCRsb/IkrvHw+sLCAWQv+GoygmD6Gjd9j2KsPwcE4Dd8l
vKJwLLLImM4bsBsBlpoaptRFl1XRSD7EycFTzGnw/URDA6G6011cv3Z2+cbZFb4R
CtzDLS2B+zop6aIHu1D4haOTeHYCJCz18u4IYCG2by+srTw2YfT8wNJqpqs72jDb
zR3uQvpW/5Surk12LnhONzX9JSNDBF31UVd/ychopLUNetESL2/DtEzEiomTXTHA
6rzuJCW50wHLMCuLp4vGgCUUUsBCtLvo1RD+bBsbWpNUbpzgALP2qOkLAU/OhYXi
alTsC9THp6UFe5UUYM2uT3+K7Q2AdfEipjS20KrWAUtJCV4/sYQGwFJWTuYdmgQH
+SY9pafXcFIPHkQgyJ0BFmMLpoHWNNAIsDQ0hhqbwMsWU16FQQJWJbyaT4UvD4YB
gQBc5V1QBLsCPClvwy6FoUigtjUkFE4TDDmYo96HH4Rg2ToflxBWWok4dLzuL/bw
FKFMuwALkt3yC1cjmRDaoK4Oc7tjTh7aALMZsSLwfsD5bu4ueYVJVXWjzEgIBI13
QSNRDRYFTAozSM0AV8FrQwNokqvqLiYkiaKtVVVX+vrl1F2JLK8CXUmF1XfZ8PAo
HKgxYKmSyZv12TFwpabC9EjtTyAqpYskOSctvL8Y/rXBmpqwL0oAluBLJ+ckfvYf
73SuIdCMSPP2WrDQVTYGBotMA2gDDnr+HGkA/mI+BG3G+XOWmdlk8gdWv0lK+d7L
Z6SVFQkOxkRCZeUB6urwDk13dhYmptBEEgywuqxjdzpgGfAGp4cBFkEZ2n0lwsmb
ZnDYERJCotRR7eJF98bZDRoAS1PzBR0dKcAS55eXAixqBmupVS0HuSspHW4RsF6B
UY2PtZICrOjqatGtwmKwWhtiu+weYAdSQA1IARbICf44GiOCIBJMd4L5h7x0qajs
CovMq72KMaPoUr3TREN9rqsb4AYGpLeAXHxUCl7DMPxgEIJkuF32wypAY1DaC1j2
OXlfOTqRNggE051dcfSEiprCS9f+CAgmY55QOMbaBpmTMG1wU0joU4hH5i1Yf/gH
wswAYIKXB6hHHDf16SKlTCksTUPXdMsW1A7rI1y9JJ6d+P4E28MiLsQnIfhdXE7H
JYCJg4rLzTOz30CoFj+PaoqDYwxvA0OB/YnYwFpzEdJZouiuMLhKzSLENMbDUdH9
aBvU1BZ5egmTUyXbgO+wdCL3FT0i+jYCwhD7hURcfwUEzXRxfU5fjzh/hMKJdvZm
Gdl4P2GA1TVdqytchC0DFsLSR1Jjj5QFS+x+478g1xQJkEf3VVKyycujHjdq6EL2
KRqljsmuK3x9ZQSs1rGvY4CF7Ax9eBsyXITIqiXO0RVSXs4sWF3WudmBeq4GpADr
fQs4YkQJr/FlZ1gEGTN4ZIFxa5S1zUdWVkhThPcZajmGB9A6Kxe2nyeoK4eE/RqG
1QenI2jmREwcwaD2AhYsAfpIWUScR8Q8NkjfAEenbXjJiJ/ywofjHIuOxRCLGCwM
un34QQ7uS8zPf8/cAs89jIuwYIkzhjPA6pbu2oLaMfngXFz8y6IYLDVBYgpwB2k+
8Bch5OBj8t/SCiCyY27Bd27ulGOQXgGzVv2LytD98Eoww9lVxEyNgtyrhlKxfJoG
t7xCHrDKhMjT0ThNA4DJIC1jpDUfg6Wq+mdAcFx5NdqMEldRAwREGxBoRX2a+Isj
ooVoG95DPAuKIBmuZ0J4fIdc4e1L855IxmCdIpZdkYRuuQS9+KDdbMFCUoOD0dE0
BusDS0uxZzC+ulolORmJQOm0PgS/T0L8Fp/kDQmrKH1R+1PB1auD+BgsxDyZ8O7I
hjQNEiskSlmwOhuwlJKSEJaLm2egnl7Z9eviBhtkZIhdACxNQy++r9ipdVADUoCF
h4M4roU4TYJCiPuDOm7IYwE5FZGzUZn4Ymjw+MWLSJ3QGLCMMBTRVmE4waAiuhPb
ZcGC5AavkJY2sWOJ28DH2pNy9uzB8EhMRsM0fgTsI/RqjqvbYzTOXU0NvIXg0XfM
zHeGIgMF8RIywOpgn2nf7i2oHVcZdsr3kcgKcKOujhwNHnmFMElaZuauCwhSjk9C
5JMXTEdFpfBHb8IEJlx62EoNDPaHRwKDwNarfPxpmJSUixBYtsDdnQTwaWnBQnYx
Pgnub+fcQriVxdkTaB4sABOsU3NcXIlwoXCSnZ1VZnZSZY17XtGW4NBjUbHmGVlo
FT13TDC0yso5H5uwPjDYLpv4rGPLqw9ERJP7gg9D/DMwEAcCHS739BZZcFVVEL+I
WZPYnaVba18XamGvbgYsTA/0QNw3z9eYrOHCJ16HWWtPZCSQa7CR0WQHh/CKCmxc
7ukpyqSlpYUEnhRZam7c+MTWlgYbDtTSohMGFQGwkmpqnuFnESIWcktoKE2OlVpb
+7mDKE8JS9Mg967MBPYmDTQFLLx50xNEZu1jMbEknp2f24WcCxhLDNIyJYteagaN
wZru5Cx2EfoXEv8gTSyEUPdWXYTC+lmEGA4HNZ5FSL05ItsG73zB6CjVBixX4pxb
QBMLwTjhXVCC/2omp/4dHfObf8D7cHHyFjgEIyNYHk1igNUtHbhltcMatCk49Gkd
0tnQ5ZCR5zVTU1wyfIdTBV92h0VSSxXsTG8j3xCfmgeBxaj2qqnpk0AozB7lRyjJ
NA3Y5WhULJncyrPX8wYGvFhjEYrx4XriRKOwRaGHDDE0wkbYEXDQ101N0RK4R9At
n9TT/dHHF2GF6GloKkShYWgeJn+gGtogyo4kFCIBPRpJl0o8GBE1SE+fmloxLQND
7a/+/vCqszxY8u2E3QxYMENh6Zvvvb3RdWApfc7QEHlv0SeIqZ93CC5yd6ez8GKq
q0daWtJ8nnjze83MDIF7Q0xMyDxtvAQgyWd6OrVpKQJgoRm/BgQQxzk/w/wVvqO/
b2WFRF+iFxQWg8VisJgGHq6BFgCLZCdKzxyN7Cq80wT5h+DyCywux6CFLxiN8IVm
SIeQTcEhNIYGDw3b7Fw6eR4//YFJiDQyRsqCBVMBMl+T7aoIr6F5Fhyy857GaCSR
poF6hebWe4Um2dnjuAioCiwqwxcsbAJgwr50tWAaw04zufMR68WwScDAJhpNeeM9
zHLNjvTiJN3yfe4zaWINtAxY6DBgl5Xevkh5JZpoVT8htK+6+kJ3D8x1EF8jeIQH
G+iLnvAYv1RUvrR3+Iy8VEvnwULHAM0gLygdv6j/7mltbcxClbJgoZ0krW5B8Y7Q
8MH6BiLPeH0b0HvH29iaZGRRFyFCrL7FHAvcF7xTiCPV+C/IUKqnh7hD3CD0BQMO
dMQIilyH/F3wpYOjXQ5LNCrnbCDdDFg0jir3yhUkphJ1C2pQ5QP6JtrZIVkDdQcS
C1Bd3WgEbPGMJapTP3mVplBXIMD67z8skoiUKqJnKH//jLC09C0tZS5C9nBnGmhV
Ay0AFsYbWKcweZAMD0IhSEs3JR1hKNaZuWt8/baHhGklpzrm5COQHEIQ1EIAS0sL
aVwWe3gg/yd2R2pQkuKB2hUkAItMiQ+PeBbGKjImCdb4+mNg88wvhliSWFICsCAZ
P20PDSNt0NDAmg1n4+LDSioQbrUpKAQGKiQOtc3KJb4/3sVjmp51Ojb+ey/vi3FJ
dKEeJJKoDxfTRkg+3JdkpI/Bmi18Ghc1tQUenlgaCB4oGr/cqsZYhfZpQKR2utCI
qspyL2940CRFkWtdWHIhPhHZQIjNiWeXH7x9scU9j9AVrYwvuNzoe19gfquKyusm
JltCQtFJVvj4NptxCh3DIjMbKXD7I2RQSwvHVU9KweqHIugRCCbY2dGlcqhw1Mfq
h38FBr1qzCc+FQi+dnI+GhXjkJMn2T1ccwv4nubzoQXJdI0kbVMdHDYEheinpkvC
Ot5A4ONGirghCAUTqH1iZf2/gEBEBDILVvt60cP26hBgAYxISmI8DgSCpgkRyPaL
FyWjnSbyebDI9vo0DeKkDDBTWeTkEMxSU4OR87fAQMf8/EZL+/EohlUCkUpqd0QE
QlYhZLGnp2ZqalJtLVlouX6x5463iqZpEC2GILFUDlyTOCOyvbk0DWS7snIKT4T0
vIqvXcOKhxAFi7FmWtq1O3ewDDabRSjfHsyk9UoNtABYOF9YiTAd/W0Ex2BlErIw
iM5AXb0ndPQQ1NKfJyFkmYLhgY55M/FOz7MR/PVwnaD01xbRkhRgkYDi1PT3+DUY
8BNE1dcXJT3CRnGiUYCaVWYOiQ3ln2nw3aANKAO0dUiSJE1NBLYjNSWg7VRM/BBj
E1josf0xHTSAVMNiJtR0AdOaamIKkAt2BXhwhomPzgtBUAFmqNF8p6x0kgbA6055
Bc55BfjbLM4SgiGoXYTFA1ANBbtQgm/aJEiAHHQ/9D0S7dRiSk/IoQKB/nzef1FL
sIXaxsTy6XfMpYVkcVObtoHiIMS65hehGhqM9tC1Dpu2FtJgSENrcSzs0knqfZTF
th+w6DKCmCJHy916xMF25GdHBlFsxF/xmoPYDiOTuL5ULgYqDZxERP37L77g07QO
qXb/PmRSOc1Wk0urGs6rfg6g5HnhV/F50ZmM4vq00eIK+C9OR2xdE+XB0tCAB92G
jyRrmpNiwtgxR3T1Q6rrHuV+yc79EddAy4BF37OxzC2WhxO9C/Fmb8AW/s5wdkFs
MnXPUb/JBFtbasfijUaayNa41j+gaR4s7ALQwWs9kmbRmqAifNkWEoZ4F0kLlni4
goVsNFwtGvz7GN8G8kVDY6SVNdKHAowgk9i6QsIAUvhJshqEY00LBOzTBXlwUrCI
/ODli1dHMgeZN3t/aGGBnBS9ey1CqIgWKME7v9grt8gjt8A9O09cXDNzxcUtM1e8
3SOnAJVh5AOXiCQ0XiJJ9puIWndadcjKUkdkcJI5Z7rUQVttiYxtkGxGC3po9ZRl
1yGr2VQDHQKsZgGIbQQ27QwPx/KLQeXlWOcH6xLSgkmR65DQi19rfZytLV3whwEW
uy2ZBppqgAIWLFIIx4R7brSNLeZDSVUDDFlm5OwJi/jAwhJ1wC7Ik45l12BpkHpZ
hyj4VmBAwosNaAnrsiF7UNNZhJRyYEtQSkgky4Zqac5z86CLzdGYYhR8Ea9FiPqw
YyF0/UhkNBbTxSq/KIjHOheX4JJbILmyGx8Un4Uwmm+dnRGYjJP62tEJs8CQPVWy
Gr4jE+nhiGikrQelfWxphelgZpnZvS+Tuy+C24hZrtQjt9A1I8chOcM5LUfF3umo
rt7ve3Yt/XXJlOkfT576/uQvPxg97pVBgzhann2We/Ptp6dM+wjbJ385bNaSr3/b
vXPXhfNKNvZm4TFOqVku6Vnu2fmYTwD5YmjrxvuLZZzqRuUrwqEZYMkfCIFNZjk5
ZJYTnxaFTvFtKDQfCZ+yiwGWItwDrA0KqwFYgGh5WDZzDKI0pIlWA8c8LFwJ1Wgd
fGk5rpnGu1CZYoHiljT11qE+ZKKmuKniRd8kFYtq4Cewmqip/NSzpq0VS8NyQPz0
NJJ6W2EvUFsb5ofEqsXlgCoQlU1cioab75YTJ+av+Pq9YQOfGsh99tmABQsHHj7c
F1FwYWFcTAyHHD5Yq/bBg4aCsJTwcLIdvzo5cUeO9Pl17YDPpzw2dAj3+usDps0Z
sXbn+rPmVqbhMfaJqS4ZuTzJlYvNmW1tcAfrExchlspBxjU89pWVEWMnXq+mg5LZ
7j1CAwywOgGw/vvv1r1728LCMHkQU2RJeCwfF4kJI/gvYjjmeXhc49e6bnpsbGQu
wh5x57BG9lwNsIQIXXzt/EvKA0orPfOKbONTdbyDdl9Qmr/iq3fefXzYe9z/1vW1
s+UuX25EUZJEJfv369e5kGDu72N9P/u8z7vvcl99O+y3XRtUHNwsohJcM3L9sQAz
5tC114fYPo0h6dRa/0De8GmCqDskgu/d3t72aakX78UAS/6ARScz4pN/5Yp5dvZf
wcEfWFmhTHFysszJSaypwXTHZumK7sgAqxffb+zUFEEDDLC65iqAZvzLKvxKKuwS
0jQ9/PepCuYs/XzEx9yK7zkHe+6SPKDqYfj1779cdBR3+EifUSNBWm/9dWCnwMXH
PCLWK68ooKyK9052hV0Q4XdwKGPtAcx1QHZ1mDnZspJdo3kFOQoDrE4BLNHsSMpZ
zX0edlQGWApyY7Bm9GIN8DPz48hquHwG9uWeXlIz83vxuXfNqREfa3mVb1GZaXjs
KWOrH/5YPn4cN28e5+rC3f9PDsYq2c1aqBkfx+3cyY0awX23eNRuJYGuT7BrZl5w
VS38lV2jDXaUR1YDDLA6EbDaIZoB1iN7K7IT7zINwKiglpTypqkZFjHEYjWbQ8Ki
yqq67Oi9+0A8WlX7FpVrewXuuqi+eOWUaV+TbJe3b3U1VzWFsKBAbtky7ts5L/51
cL+SnadjSnYIw6wuseT17j7fwtkxwGoHBXXiLgywHtlbkZ14l2kAbhrEjydW1sJw
hb8waNFEQax0TAPF8L6BrvT8wzaeUFqw7L1FCzgnx+7nKknS+u8/LiuT27yJ+/Kr
J3/Ztu6chYtHbnFY7eUujs3qmJ5ZR+0xGmCA1Ym01A7RDLDYo4dpgGmgx2kAYezh
tVfNI+K3nVNf9vPEFcv7REYoFlpJGbSuXuX+PszN+u6F3/YeVHP2DSirDqlC6kHG
2T2GXXrEPcIAqx0U1Im7MMDqEbcNayTTANMA1QDMgaE1lz3ziveoGn+/du6KFQPc
XLn79xWarsSwVVnJbdrIzV34xu8HzhkGRUVevk7i35k5k1lz5aQBBlidQkvN5riS
5UgMsNi4xTTANNBTNAAcib52U8sr+MeN25cuHWSoz92+3TPQStKglRDP/b6WW7xy
wmFtB//SasS/9xT9s3YquAYYYMmCPW2oI54ymHn5suQyQTKKYICl4DcMax7TANMA
MVwhAUFVbWBFzV6B+ZKfxhw80OfSpZ6HVmLMuv8v5+zIzV/8+to9xx2SsyMuXe1N
+V1Zj+0uDTDAkpF8ZK1G0l9du7YnKuozR8cb9+7Jult9PQZY3XUnsOMyDTANyKgB
0FXUlX9sEzJWbDy8dPmL3l7cvXs9mK7EmJWTzW3d9uS8H+cr2fuF1lxBYJmMCmHV
mAaa1QADrLYiUEv1gUdH4+I+c3IagAUHVVWv373bVukMsNiNyjTANKDgGoi5fkvo
ErRw1fzduweWlvQGtBIz1pXLnL4uN3fJ8H0C08DymkDk72AhWXIKSFLwXt0ZzWOA
1VYEagWwRpiYiBaR1dRkgNUZXZbJZBpgGuguDdCgq6MGLvOXf4yIq+vXehVdiTEL
WeC/X/n6/w6f9SmqDKqsgcWuuxTOjtujNdC5gCVLHvOmdZpdoU+qmng5mqbh5JI1
JUWJt8soX5ZqkiveUPkjrK1JemgtLSw++M+9e22NdmcWrB59O7HGMw30Wg0UIM1V
JRxnW84aLVr2ekhQ70QrMWMV5HEbtry47I8/XDIKQqsvsQwOvbZjd6Z9rhMBC6yg
nZ4+w81tibf3NBcXBH2HlJcv8/FxLii4+++/ooWOHzwovn7dIjv7Ow+PXwMDQ8vL
r9y5I0ktYpAqv3ED1X709T0aG5t+6RLqbA0PX+DpCeELvbywuDKtWXvr1mx3d2yc
6+FxMCaGisJfj+Lir11csB1/8V0KjOpu3QooLf3Jzw+iHPLzy//5p2kb7v/3X8n1
66opKTP5M5rl7n42MTH3ypXbOBf+g8Nh+yADA7JwOgBLSwvSFnt7rw4IkJLWghGM
ARa7jZkGmAYUUANY+sanqOy3/ed+/OmlrIxeTlcUs6oqubNn+8/5fo5FTFpwJZta
yFJktVkDnQtY6wIC0EM5NTXu3DlhSspUFxdOSelXf3/4zghzPHhglZPziY3Ny0ZG
iFjqLxS+bmo638MjqbZWCoAAXtNdXJ4FuwgET+nooFpweflwU1PijINwFZXrd+5Q
kCrFiuoXLpCNFy9OtbMTA5YgOZk7fZpsP30a38Xy8SWqsvJbV1fI7IvAKTW1V4yN
J9rbuxUWSta5eufO8bi49ywtB+vriw/6nJ7eMEvLn3x9M3jg+9LOjqxuVk9XhLFw
OFXVF3R0GGAp4IDBmsQ0wDQgowZgu/IuLFv/9+l1G56vKHsk6IoyFlb4MTLkFq2c
ZhOXEVRRLaO6WDWmAaqBTgaskBBxQNLzRkYDVFW5M2fOxMXd5n1nVrm5Lxsbc0Ih
KIRTVgZ7kS/q6l84OaXW1YnZKKKycoytLamGwpMTcG2ooeFjurrUUASmodFOBLD+
+YfUwUahcKqzcwNgpaaSHbH94kVBaqp4e3RV1TiAEZx6km0QCt82N3crKqKmqXv3
7+ukp8PlB7wjbUBTIYqyHb6fPw+7Gqp9g0aeOUOq0Vah4IwuXnxBQ4MBFrvfmAaY
BnqoBshkuqKKjceV1m145vLlR4iuxO5CK2tuwY9f2yVmkpj3zvQoMeG9TANdBVjq
6h9aWppnZwNo6m7fht8O7rZXEQ+uoTFAR+evoKDIykrf0tKpTk4UpJb7+Iicg//9
tyE0lILXCwYGp+Pj42tqwioqZru59dPW7ghgUXKa4epKjqiuDoGwWsXV1Pzs79+H
j6BCg2tv3kQ1WNTIFkCYUAjjFpyJaZcu+ZSU/BoQsNLXVyU5GeY0iMq+cgXlXQsL
EWNpagZXVMRUVyfU1DDA6mW3DTsdpoFHRAOIavcvq955UefnNc9eqnsU6YpiFl7D
53//pWNyFsvd8Ij0fLmcZlcBlorKucTEu/fvU5sQPnZ5eY+BkDQ1B+nrZ1B71YMH
xllZxDIkEEywtS28dg0b8XcGHIu8H3BjaCgyS9HdMy9desPMTIwy7bBgQUh8dfV7
EAJyUlOzyc1FlBXFqb58w57X1w8rL8cW+BCJoxMbVVVpQBX9XLl9+9KtW/fq48no
RhbkLpd+yYQwDTANdLsGfIvLfIvL9wv1f17z3KNpu5JM+O7g0Gf2kimumXlkOR1m
x2IakEEDXQVYyspm2dkEQPgAb/x7KDq6P88xLxgaipElurqauNXU1RER5cpHQanB
tQe6QmCTkhICzKkEWv9DK6sOAhaa9CLCv+DUU1XNvXqVigVmUcAaqKd3ITERW6pv
3lzm7U2taB9bW1vk5ORfvYos7aJmS4SsNwIslqZBhv7HnlNMA0wDUhrwziv2LS4N
hFG/qLR7leNfWnnW3HHegucqKx5d25UkYx07NmDt9rWeeYXdfmm6t2Owo8uoga4C
LCUlv9LSer4ihPQqQtT5QCXQzCsmJkNMTIaamAwG7tAgcTW1P4KCUO1sQoI4dko/
M1NSAlhHlBChXTFYEIVZfsQ/yEdxvWRsjAbQZog9jzgEpSg4BF/HdoGgr5bWU/r6
gw0Nn9TT+8HXF/FhN/lZhJSyGGDJ2O1YNaYBpoFmNeBXUuaWkb/ngM3GdcYuyTlB
VZU+RW2euyQX3QaUVup4B81d9CaW6pOEjEf8+08/DzqorsoyY8mlj/V6IV0HWIFl
ZZIggoCqhgl3gCqpoqKy2t+fAFZiIrFp8cHpBo0Bq8EZ117AmuXmRuLW6yPlpdug
rv6uubm4zQga00tP/9rZWWRR09SkQWBfOjkBs8SmtaatalMmU8iZMHbMEV39kOq6
Xt/52AkyDTANSGnAr7TMPatg43rjUU9t/GbEkV17rJwSs/3LunrNFv+SCsvohKWr
Pre3Y3TVSAM3b3JfTR8sdHZjXZdpoFUNdBtgwfxDPXHURXjz3j1akNEKfxFrdYe3
DAWVlYFyiJ1JSYnO/hO7CD+wtOygi/BkXNxATEUE26mqpl66hBAxyTbQxohsU7BO
/fcfvIfYmHf1KqxxB6KiiBEO8VsCwSIvL5o6i1mwWu1wUhWIpb2gGK+D3vnFXvlF
rHSNBojCC4p5N0c3O6Ha2mF6ff0GwHpy06dDd00aunP68EO799o4JmTDb9g11iyE
XjmlZa7d+fvRY30fcXtVs6dfUMBN+Ox12/ikXt8b2Ql2UAPdBlim2dmP6egAbpDd
qoiPZ8cHgU3I24m/Yo9bwdWr39Agd2VlrKCMyXq0ZnJt7WvgG5oTQcqCRb1+QuFk
R0daGWy0OzKSpFSQSNOAzbA8IR0DDXJ3r0/KgGOjDTiQlOUJ/wfzoYhCwB482B4R
IZKppESTl0oB1j803VdbPo+IBQtDOwZ49+w818xcZTuHU8Ym28+c+WnzBlY6WwMr
N61fu3vnMT39k0bG9omprpk5nrl8QEl3h/t08EHWa3aXsGBt+vSVXbRMfHnH1x8e
3HvA1iE+y6egpFMDgPh7s+SorsF3c/swunqYBmxs+s9ZNh3Xotd0PHYinaGBbgOs
7MuXn4OXUEvrcV3dwzExZTdulP3zj25Gxhp/f8Sex1ZXI3copZP/BQfTAPPXTEww
zRBz95AlQTT7r0keLGQEXY6AdDCThgbgKbC0FMYwzFhEzgVRuFV9HiwIv3H37mQH
B1JZXX2ln19yXV3NzZtAJXgntdPSgsrL8V9UA2zlXLniVFCwNzJye3g4jg5yQgL6
+Z6ehPyEwvctLFL45Kj4jMV03nrsi6uuRoA8iuyQ1esBCy/H6MfuWfnnLawX/LL4
lbcHfTh+4OipT361/InFmzhWOlsDSzZz8/7sO276wDFfPjVoMPfpjNFbTh63jknw
yClgc6M64wnbVpnNAhbFrPGDt3/9waH9h+zsYzO98opg0PLthPAs36Iys7Coz754
triYOQcfqoH797k1a5/frXQRvtS2XmJW/9HRQPcAFo0HV0lKehIeOuAIn2JKlMaT
zzv6sY0NMkhRZImsqkK2d1IBvjze2oTyrL5+PxjApACLNzIhZTypRoPleWmP8VMC
RVsaJxqF4eotmqlBsg284w+mNZu8PDQAuRh+CwoikIeALf4nUUHLUdTUMCOSOBP5
jyAl5Wl6UvzRB6irI0mp7Has3g1Y/qUVcAWqOrh+NnPCx5MH/LSfu+DL6Sdz+imc
XjKnl8RKF2kACkfRTeS2aXFfr+j/3qjnt5055ZiS4VeKlJLMadidZokWAItg1tCd
417Y9tX7Bw8ctreNSof1EUHxcjRoQZRrRu6KP1aqqTK6akUDmFk58bNXTEIjWWas
RweY2nqmnQxY4BIkPQeUnDsHY5IUZ1y7c+fv2NghxsbPYP0ZPttnP03N5wwNP3d0
DK+ooJVpxJVjQcFIG5s+fC51RE09ra9vn5//fpMYLHEy94WeniS4SiCAQEz3Wx8S
ciQ6WtwSMJBIOP+PSXb2cCsr4BSRz5MWwsIgnOaVoDIRYgUhWGcQTe0LdBMK8RfN
wH9h7oLtTVwT7k7knUdyLyoNYpEclQEW+iVZbSO/bMPRfaM+G7TuIiEqgxROO57T
imWl2zQAxjJI5c55clOX9vli7niz8DjMzG91wPYrKfUvLWOlMzQQWFkB69Smjaaj
ntwodhFKfUFg1pjntk774ODBow42EWke2YWIgicRWh1OjOJbWHrS0GjGDEZXrWsA
Rix7x37T503zK65gryUd73u9UkLnAtaJ+HikA/3E1vYVU1NqkZKMR6L/xao4ysnJ
w62tkRPhWzc3ZGmH506yJrUMYZHBVf7+kLMrMjLr8mVsGQGzFnhIIgZLFLn1339w
FKqnpr5mZjbH3Z3OXrTJz0f+BbQEfy1zc8XyqXD4+6xzcxGzNcrWdrStrW1eHnUO
iluL7//+9x+cg8LUVIS0v21hgdWpkcMdWUlpWJhkTSRHNc/JmejggMOdT0hoSpaP
3GLPBcVYxssts+D7dWtm/NRfNYQzSu82pGA811QDOgnEoLVRBR7D4dqegUGVray5
BheVVViqdXgaK3LXgG1Uhllg0h+/6H7yzOaHAZYoMGvIjjHPbpn+0eHDJ5ysw1I9
cwoDysv9OmaAtE1IHjdxcHFR63jBwrOgASzMtnL1C7suCNik716JRx0/qU4ELNFa
NxRhHh7rXf97o3+lEKTZOk3zYElSjtQuko1pyjeytEHqdMS7yCJN9jB3iO19aRpg
u/Irrlz6+y/f/c6pRxHbFaMcRdOAdhzxTu7U48ZPG2YYEBlcVdvsw8WPj/v57Sed
6R8fmTXuOCudoYGZY499+d7+SUN2tgxY4vj30c9unjHq7yMnnUC9XnnFsIG1z5qF
ILzf9+zcvuMxBk+yayAujhs++mP/0qpW7b4dH62ZhB6ngc4FLNnBoq01iQWrSaLR
tgpRwPq9D7Dw3AmuvPS/Qye+/flJ5SBiKVE0tmDtoRoAY8FjuFGNmzxzklNqdrPr
2tKIn2UzLn7y9KYJL25npZM0ICNdiQkMzfhk0OZvPzl65KSzRXAypugGVVe2FbMc
ktI/GjHo0iVmvmqDBq5c4X79Y/Dmk0phdVd63PDPGtzZGmCApViU1fsAK/zS1fMW
LlPmDttvxplkcVoxDLAUVwPwFapHcku2DFj864bw2qtNX8opYH0/W3ns81tlsa+w
Ol2pAUwzBPjOHHscmGUemAxbI0kEL1tgVmB51Zpt2/buf1x24w2rSTUQG80NH/OJ
fwkzYnXn7BAZ+3kXV+vJgIU8WIigx+LQSkrI6aBYoNTe1vQywML8Gu/Csu9++GnR
Rs40R3HBghmxxBqAifGwDffpzGECJ4+mkSUMsLoSmNp3rHGDt416etOsscf2HrAx
8o5HbtJWvVeoYJ+U9vHIwbW1bTDeMMCiGrhUx/2xbvCGo+ciL1/r4vGbHU7BNdCD
AetQTAxm8K0NDPwlIABZEtqLNIq1Xy8DrPC6qycMrL5a9PphazJbjXGM4muAzutc
sZP7dvGa2Bt3pJ5fDLDaBz1duRfmGI5+dgtMWXMmnDgr9JIlj0NAedX/Du3fvO3J
//5jgNUeDYSHcR+OnhBYXttWt6yC8wFrXgc10FMBS8YIesWiJxla08sAK/LKP2u2
/f3FEhJ6xTIyKD5d0RYapnObBdyEL6e5ZRUgdZnkI4YBVleiUluPNWnoLswrHPfC
1qXTL+w7ZGcVmiLjWtEBZVXvjfgwNbU9bMHsWNBAaSm37MdXDmsZhtVe7uCQzHbv
TRrowYAlA670vCq9CbAwNrtl5c9b9evizZx5PjNf9RgNYJrnUTtu+rJ3YX0Mq2k0
YLAg906KapcS29Ygd6DYmOe2gK6WfnPhwBF7y+CUsEs1gbIFYMGPL3B2m/TZICxj
zGipfRqA5Q9pGSdMWxh15UZv4gN2Lh3UAAMsxYKwbgQszDxCHp3wK7X+ZWXehcUd
7FjYPbiyRtc7bOaKqeuVOKOMHoMXPcXO1HntRKi7kj/33drHf9t9OOpqowGDB6yS
VYuEk1/b/eV7B1jpFA28e+DzN/bAHCWTBWvoLkw4GD1o09Lp55F31CIwKbSuWkbD
Fb3HIy5fmzJ7roXFAGTObB9esL2ggeQkbtKXI4xDojFdoOMPTyahd2iAARYDLNHU
DySDNg9MOnHR3TUtL+JaHY9ZHZoVghBpZRu3aUs/2G3IGaYxwOoxGoAzVyOKW7ie
W7TmfzH/3JZ80tHF7/Sco1WMgtRMg1mRuwaE5iHKBgGrFgthjmoFsIBWL2wd9dTG
xV+fO3TMwdw/Mbi6qk1ohUuJ3FdOqVnvfPBadRWjqw5p4OpV7tCRp37YsCv62q3e
AQfsLDquAQZYDLBEFBVcU6VmEjT51V0rF6idUvHwyCqMuFqHldHa3cnCaq8c1TGd
uvC5405kwcHOs7gwyfLVABJiocCxO2vZr3FN4tzRHzCKh9RVh9SyIn8N8Cbk8i1b
zEY+fKkcgBdWJBzxxIaFX5w5fMLR1DcRyUWDKltf46jpvYwlFnZdUPv19+eQlJwZ
ojqoAVdnbvj4GWHN5Tdp91OU7dijNcAAiwFWA2CpW4YgQvaTpzd/8fbeH+epwprl
lVsYfrUWjqF29PLwumv7VLQ/n9cfKzojS7h8IYBJ6zwNEMCK55Zs4mYtbR6w2tEZ
2C4yaqDlxZ4nv7Jr/OBtIx5fP//zU3+fcjL1S4ClObBdaEXbE3n5+uQZM21t+/z7
LwOsjmogJpr7/JvxRsGxgRXMS9gh74eMN4viV2OAxQBLErBCJ760feKQnRNe2o6Y
2S/e3rditjIwyzu/OOxyjW9J21aTZYDVeQzUqZJFgAULFgOsjnnJ2zEAPAywJr+y
G3lEP3583dxJJ/4+7Wzmn4iMAIEVFa3muGqhDdjXt7j81beH5eV1lC06aPvpHbtX
VnCbtz2/8fj5iMvX23Hp2S69TwMMsBhgNQGsl0WLoE14aQfiZ6e+u3/5TKUTSu4+
hcWIn5U90YuiAZZmDMkWYV3MWRa2VKyKOER5dyrBNCscRiMFyWTBAKsbH/RNAWvy
q7vxwvPx4+vnjD9+9IyLeUCSb2FJYEW57Hfiw04H4diqTp5fzXijupoBlnw0oK2N
JL0/xP0jnUCuG3sUO3Q3aoABFgOshwKWaDXZl3YgN/SX7+5f9s2Fk8oeCHMOrq70
KW7dAqxogIX0Tls1uBdf494Z2VIZ+jZ3xr2rGQuLAIK6hGEk+Knr2U7qiAywuvGJ
LAlYCIic+NIOxFrNGn306FkXsshgYUlAeTvXcm56UoiSXLFu/ZmzT7AEDfIyofl6
c5O+nu6UmoMV7ruxF7FDK4gGGGAxwGoFsESY9fLO8S9un/re/sVfnz+l4gnnAiI/
sApHC/1Y0QDLOJP74zQny+e4I1n2uMtAB8dSDuQmz+Nm/8KZ53XdcR92ggywuvHp
LAKsDSbgKswQ/HbU38fPu1qHp5EsKmVysFpJnlrklRtjv/jK2ZljCRrkBVhJSdzC
FSMv2Hg2XWaqGzsVO3R3aaDXAhYSSvXQz4QxY44ZGkZcuYKsVF1ZEMyuZRsOZ8TE
ehdh01niE4fsmPjyDlizFn117ozAG5iFGU8P67sKC1gTZ3MqQdwxh+bL33ZkwWOt
LrQkYQ3s308S8JvxE/FddhnYMcDqrsduC8elgPXHL7pIhXX8vJtddAYiIP1L5YxW
ogj3S9cGvzI8NaV579i9e1xODufkxK1dy73yCinLlnGRkdy1a/LxprXKNFgYUb7k
B2nDhnHjxze0PzmZ69+f+/VXuZ1RSTH314YXt5/XxNNPAXsXa1IXa6AXAha46p9r
t1ytYyy0g610Q3pW8bRJnvjBvDW/nT+l7HX0nEtXlpMq7hvXG096eSfWMms5AQ/S
TKMgNguYdV7T16+4tNlsDgoLWF8v52zLiY3qYaUr6QqUg2Ww1xwhgPXtKgZYrbue
u/gR2cWHQ2SVe2aBiW8CsrEDrcgE3hbtxO1uHhZasI1P/XD0R/n5zeBFYSHBjgED
SBF/+vThUEaN4mxsuM6edRgQwL32GldXJzf0Ac8BsND+F15okBkdTU5u9my5HeX6
de7goX4/btwddfVmuy8N27HXaKB3AlZF6aUVX55Hsumpb+/rWeXLd/Z/+uqOz97Y
PeWtvV1f8NIsU/LoV0iOaXAYkk1jpiEw66KuPzBLKupWYQHrq2UcItllMRRRAkNN
eM3od6kYKbI9gf8pofnwKforlaATXy+EX1CZFmy3KOB+PUoe9DNXc7Zl/FEkKsjS
TvnWYS7Cbn6+F5RgKQUyxa+obfN229RsZMC6aO0ya/475eXSeBEcTEBk8GBOTY0D
gpSUENC5dIkDdXl7czNmkL76999yg5JmTVkjR5Kj9DjAwrkoK3FfzF0dd+Numy4H
q9wrNdA7Aau8+NLiT0+PHbwdBNDjCkEcrJLRXYWHpzYUfkGPKW/uWTj1rLK+v+RN
0tMBC3MJn36eFM1o7odd5HGPAPm9RqKkqfj1vC/320nuw4nkJ/zFd2yRnIFoms29
8h75VSmA267Nzf6V6z+AGzSY+9854qMERRnxyyrjg+349OvPPT6QfPlpP2eWKxMC
yhetxMxH8mCxNA1dnqOhK8eY0JrL646c3bpj0OXLjVApJob0wCFDuIyM5hEKtisX
F4JfZ892ImO9+25PBSxjQ+6TKUswgcC3uD3pA7uyD7BjdbYGeilglVxaPPn0uBe3
twEU2kQVrHJzGsB8cmCWimGgV14RpjtFXFKsRKPiIHdYsJCsgeYrlyqSvAJUeuwJ
gj7LdxD06dufG/wKt9eQM0glEVrbtLg3h5Mx4LHHuQGPk7/4fDCe223AafJ2Ker7
A5Phs3IvN/AZIg01+w3gHhvIfbWcE0ZwaBIFLMjHp28/UofU38cA61H3FXb2oz+8
7uoPG7acOPWEZA7327e5lSsJPGVltQJPcKvNnMlVNV5gB2seI3ILcxJR8AX/lbJO
Ac5wuDt3yHY47HC4GzfIfyVrYiN+fecdciOUlpI6dJIj6qAy/RXC6XepQ0jKbBq/
1SYXYcui0Aa06tYt0hicFBqD7/SIri7cF7Nn2yVmsImEnd2HFV8+A6y2WGsYV7Wm
ARog//MSoW1UevT1GwqVyV0MWJ8vIAmxYFWSKhf9yRp8YsaigNWnLzdpDnfSmTj4
1ELJX2SlxzTDt0ZwL77KbVDhhOEEufAX37EF2/ErzVwvBizwE1a8Vg0hux+z58bP
4J54itukRnYEimHm4C9/k+Fk5s+cTQmp073JGpiLUPEf3B1vYcSl6/N+XqOq1p9S
Ai2hoSToSiBo3TTl48NZWTUKeAde+Ppye/dyj/MvG1u3cm5uhIQkGcvdnfz0229k
O44ydiz575w5XFSUiLpQecIEslHy89RTREhZGdmGCDB8X7eOfB8zhsvMbJCflsYp
K5MwdipTX5+rqWl0dNkBKz1dJlEgUZzI4cPkiG+8wcH4h7Z5enBfz51hEZXMVn3u
eC/t6RIYYDHAkocG4IodshNBb9+MOLL+T0Or0NSAigqFdRFKP78l/r/XmLAXZSyR
BesxbocOCbESuc/iicdw4Tqu/2PcJlUOTkAxkOE7tmD7gr8IqMHLJgastcc4bXHQ
VTy3TZMccvqPot1ZkHtPf4z2xPYjR8O0BUv09fvcvSuiEFiDLl7knn66dfNV06gp
TC3cvp0DCT3zDHEvDh3KPfss9+SThLckKYcC1tdfc3/9Rb68/DKpiXl8L73E2dmJ
mgHbGMClX7+GCnAXigHr9dcJ0IACn3uO++YbjuagR8uNjEhQPPaCzFdfJRIoZsXF
NVi5ZAQsT0/uvfdIFBpEYe7kiy8SUbNmcUVFDbgGUX37El2dPMk98QQ53LhxHHI0
oDGBgdysxV/o+UUEVdb0xI7B2ixHDTDAkgdetGbX6cWeSoS6I3HDZ6/t/vaTo0Ar
67BUcbZ3hQWsgU9zL79JnHdSZeBT3CELTq9+XWoKWHDqXfRrMCkhAh1LK46ayr09
QgRhkhYvfEcWU8RjnfMisepiwDrh1JD3AdtPOJNH9lsfkfB2NotQjo8zJkp2DURd
vfHZzO8sLBrmAwJTliwhYERdeG0q588Tw9W+fSQinrrtKiu506fJRvCQWBQFLHyW
Lye+Qrrdy4sAFriqoqKhZtMYLGrBArTt2SNyGorF+vsTqps2jSAOPTpOAccCISEk
Hy2hNWUBLIhCY4CAYlG0hZC/aFEDLFLAAhr+8QcJ/5fUVUQEN//7CWrO/iFVtbJf
DlazV2qgdwJWWXHd3LEnRjy9acwLW3tWGf38lk+H7pn44g4s6dr1ZUJbotaAVhNe
3IFk07PGHF3/h6FlSDLWK5RcFlphAeublZzbNUI/UgVx5SREPaaRBQuMpSuxUjXs
W4csiZlq5BQSJiXpy8N3bMH2/o+TOqgpBiwl/0aIBh8iA6xe+TztQScVff3WR+O+
8HBvZJWRymIgI2MBjGA9+vFH7urVRqgB5+P69SQtAvJpUVEUsEBCUtMDFywgFiPM
WBQf8WGA9eabIquVuCZY6ocfOGynBiTJYmZGGMjYWASRrQIWgrog6u23OeTHkhLl
4UFgEWY2CnBUFMx18fHSNeNiuSUrR563ZrlGWRhlSe8ErJrKq7t+NVo1Q+mX2ao9
q/y5QHPSm3/OnHBo2QylJdMvdGVZOuPid5NOYdIlmcDYok0O3kCsOzvplV2zxh5f
94ehWUBS2OXapqmwFBawZEzTQC1YKJITAw3SyHxAfMbN4KxLpCf6YQu244M6qCkG
LCkbGAOsHgQivbWp0ddufTxhqrubHAALkwrhs0NG+KZAFhZGQERHpxFgAcWkaq5e
Te4a4FergPXhh9L7Zmdzw4dzkND06GAvkN/PP4usZa0CFhyOH39MoLBZskSUFTye
NGSNinr+eWlbGn7KyuBW//bWYW3rsNrLvbXzsPOSUQO9ELDo2jc9NI07mj1+9Jgz
1uYJ929FXK/rypLw4LqBW8zEFjO5fzp0J9YlRD732eOOrfvd0MQ7IexSDVbwaLa3
9U7ASuV26ZHBYOw0zqpJ1nVswXZ8dumTAHYGWDI+hli1rtcAsWCN/0KSaQANiF4C
NMhouBJXoyHnkvYn8U+5ueQnzEyUtGA1hSHZAWvECOnmOTjwd9yu5pv9/vvkpGgc
WKuAhSxfiOJCa1NTSSiVZMEWsNonn4hsb01FiU85JZn7Yc37J42dQmsudf1lZUdU
KA30WsBSrCUGZW4NAGvC2DFHdPW7fimr4JoqdcvQhwLW0F3jBm+FD3HO+ONwCBp5
xsEhiEj2FnpzrwQsTA886cK9Ooz7cALJYiWZEZTmtcL2IW+TKCvUZIDVXQ87v5Jy
ZCpX/NKpqURbVn70tZujP5/m6NgQAw7n17lz3KBBMqX3pNkTqL/syy8J4qQ0t+QO
DZwSUxF1EcoXsIRCIvPIkeYBC4fGB82QBbCoqJY/DxMlBqzwMG7e8klCt8BgFoPV
qzPJyfJwY4AlM/t0SUUFBCw4Dcc9vw2Gq9njj2/4y8jAPRZh7IFVra8V3ysBC+5C
JGvAYjuDX+XOenAmmaLgKgRg4Tu2IHB+ygKSRxQ12wpYSNOABF2dkTu0TTJ7cJqG
otLgqrqoq/94F5Q6p+coeHHJyA2qrI24fI3M5y8oluV5Lcc6mEX41dxFmHx3r34W
IRABbr6BAzlkcm/ViGVqyh0/LsqDtXAhYZLExGb2Ki4mP4HAOs+CZWBADnHgQPNt
/ugj8isNn2/VgmVoSCpjFyAgFl5sWr77ThTS3oIFKySE+27pZC3PkGA2i5AB1pXr
v+zZt3zxIozsMhIE3lrYp7M0oFCAhTD2sc9vRZk97vjGdcb6rtGhtdUwdMm4OFqv
BCy6Ns5fZ0ne0alLybLQSK+FyYD4i++I7hrwGEnUThfVaStgYS1Cx2oiDQHymvWx
9m1iI7lU7omA5V1QHFBWFVZ3Vd3d56+Taiu37l7xv/WKXtZtWL3v+HZlbbPIuKgr
130Ku5SxIi//M3PZCi2tvpJzBpHYk4artwpYmAY4eTKZM4iaurqESzD/ruleoC58
MJ2w8wArNpbM+0Peh2bb/NZbJFkDjb5vFbCQjgvZH3bubP30WwAsby9u2rxvzCMT
WB4sOb4P9FBRzILVWajUPrkKAVhDdiLWClw15lmCVps3muq7RIGrgmur2+TR6JWA
BYIBPIGlkAoLydmRun3heu7ng9yijdxHn5JU7IAkJB2l6w/KCFjGGaJ87q+9z/2w
m4g6YN6QjksuzNQmIT0RsJA12yU9Y8sFjYUzh89+l/v9U27HN4petk3nVozi5n78
2LIfvjtt6YjU6sDELhtIwi9dX7z2j4tKA2iedFqQlFxFhcy8u3ChJcjAZDqkLdDS
EtVBtk8kgsLqhDTNurggCaeqKkkWFR7eiYB15QpBqM8+a0jHIG4AwsLg8YTfU5w7
vuXFnhGqNX06Sa8FmU1xzcSEQ3pVmjasBcDCvIGpc2baxKUxwOqyzqywB2KA1T4Q
6qy9uh2wJry0ffSzWz55ZjPC2LdtNddziQmqqgy5VNMmtKLdvbcCFvI4IFcWPIDg
qrc+5p4aRN7RkbgBubWWbCLZ4cWzDmUELKRuh73qpwPck7wofIBZvX4twoDy8tBL
1f6lZT4FcpjOHXn1xo/b9n436gnb37mbmtwdbe6mRg8od7W5kvPc+UXcrMmvXLRz
xupSXcZYWCzvtz1H9+x7Wiq3QnU1yaWO5JnHjjWDLFgbB8yE9ARwn0nmf8J/gTKY
TiheoAbhWUFBJFEnElyJF7TpjBgs4A6SwoOcdu8W0Q9lI5wIaAmJTMU5F1q1YFFR
IEJEdEklA1NSIomvTp16KKuJgczKkhv31XyfwnL/kuZn/ygsDbCGyV0DDLA6C5Xa
J7d7AUvNOGjkwA3ffvL3jh2WcAgGVlRgCGwHWikmYOknc0dsiBdvoyqJRm/VqIOg
9UUbSJGMZBftFUNsVJgnKAjl/neeQ2Kttce5Mx7E7CROBI+a+L5iFzfnV04Q1pBo
FNKQFguGLvCZYRrfDJ7Y8OWvc2T7ip3cKTfRYjutNrIzKnS2BSugvCLiap19XOZ5
bT+7mEzJ3Gnte8Bh3eJzlrYzJ70euZv7R4Mru8iVXugxpVKJu6LGmazlpnwz1SUr
v8tGZUQIHdO3XPrDa1X1eTjFiIBlnhFshA/Wolm1ituxgwAH0nv+8gsJV8c8O2yE
M1HSxgNfIXZBYk9ktNq/nzt4kFuxgtAV4pkSEhpqyg5YOBY+iIVCcBWNr5KKl5c8
OoxwOCi8e5/CcrmDoCEmNuLQyCwP96U4Vb0sgAXbFVbyQdaJL74gvkKY5fAX/lBs
wdqL4lSoLViwdLS40VOXx1y/5VNU2r7+zPbqNRpggNU+EOqsvboRsDAl0NAzbutW
Mz2XaP+yslBYrYpLO2JdUDQLFqxEYCykqjLKIMvdyIIm5vkcysNqAkQwVdAki7Mq
It5A4JTUGoI4IgxRloXS22HisuR3aWhGDFmC0CSbbMfShBDbK2OwkNEDaOWSknvy
ovsP36nMGHlE3zUmsLKluaiyPGrjb90d++0SpcVcjUoPoysKglXKXMoR7sevBm87
rwJHoSyn3PE6cKrq+YVO+nI44tCbusNgqQJYIHodCTzFHywagxVjtLUbkrBL7gj4
ANzAVUdXuUGmUCSgkqQrVJYdsJCJ9KefiLMSH8m1CJumaaBtQHoquCzh3UOaCXzg
svzqK87GppEhShbAgigc+swZsk4i4v3pB+sbrl3byJ73MMD69x536iT33ap1sf/c
6fg1YhJ6ugYYYHUWKrVPbjcCFkLXPXMKvQtKQutq/DqGVoppwZKFqFgdaKAzLFj+
BK1qXdNzj19wXTlfDctWfvzE+q8+PGjkFddBwILJx7uwbMSUb8x/4a4IeozhStLG
Vn6RKzzLnVjMfbP8J2L56JK5V37FxDk79M0PcrIfGm6F1WyQ/wmJprCIMvKhI2v5
9eutBICDzGA00tDgsPTyjRvSlbGc34kTzYTDI0Ae2yUX+wPoiEUFBBA5aAyWSsQK
0y0E4MOU5eREgq6wCzyYYtck3QX/RcOwCLRYAg6BAHwsSi0lE7Fo4EXwGTyD9vZk
cUapVaubiqISIHDL9kHrjpyLuIxZC3LwfTMhPVoDDLDaB0KdtVd3AlZhCUxWfiVy
M2srmgWLwZOMGpAvYPmXlodfqXXPzD96zvWHuSqfv7Fn9DObJ7y0AznVpn98uOOA
BVeXlm/wjBkT3TZytao9ErDg0wRjqXzPjf92fuyNrrN8IBXWa8M+iYxsfdJcC0zD
fpLUQHYmt3LNu3/rWYfVsDTujC9741I5ncU+XSK3ewFLvu8KDLBkBBpFqyYvwEJw
FRL9e2YXHD3j/P1MpSlv7R3z7OaJL+2gCzHJC7CwpK6ys/ecGaO9txAXYQ+KvhI3
FYBVdoEA1oSZC7oSsDCR8Ntly/X0+t1t++rOjKua1QCSYE2dNcUkNC6wolq+j1Mm
rSdqgFmwuoSbZD4IAyxFo41HsD0dByy4n5CN1iuv6Og5l2UzLnzx9r4xz20Vo5Xc
AUvV1WfOjDFeXQ5YmABYrcw90OOuq3PF51phu+Lz3G0t7l9dYqySosDuAiykGt9+
VuXP9S9KTSRk8NRuDdjacB9NnBN55Z92zw3qiRjB2vwwDTDAkpl9uqQiA6xHEGgU
7ZQ7AljwMgdXV3nnFx0777Jk2vmp7+4f+8I2KbTqNYBVo8p5bedeeZ7b8i13S6sV
wLoq5OaP4Ua8xmWekI7E7y7AwoJCjimZb773Jl3+hZUOagBRYkeP9V/2584uC6Rj
ZKPgGmCA1SXcJPNBGGApGm08gu1pH2DhlT2oshJLvhy/4Lb4q7NT39s/HuuCv7yT
4lTTMh4xWCOOmAUkIUILO7a7RF29quEdMOfbMV6bu9pFeEmNs+XXOZ77CXdftxXA
uqHBvTmYVE499lDAmjhnYcp/D9qtiqY7ItMKmQv88GhrZN4aNuKTiPpEoB0kjEd8
95wcbsXP7x03tGHLPCs493RZ8xhgycw+XVKRAdYjCDSKdsptBSygFXJ8+BaVnFB2
Xzj1zNR3DyC+auIQUazVwwBr4ss7vnxv/+591mc1vE+perS7XND0/3OHxtTxH3pv
7eogdzkCFvyGqj9w7474Ss0wqt2qkNrxhJKbkp6fQ1wmyeb6EMYKqapbtWXHkaMD
kebgEcejjp++vx837JMpvsUVMA122RDODqTIGmCA1RI3AXdkX6NRLgDGAEvRaOMR
bE8bAKuoBPkX/IpKTgs8CVq9tx8mq0lYaukhViup7ZNf2fXFO/uwV0fK18OOfDz0
95GvveKzoxnAuizgUBDzVKlMviAKnoZAIagc368IyS5SiUlRAZFVqIyfkAW0adR8
lRJXp8aBrpAVoqkFC9KQ1wq/ouALDkQltGzBwkGFP3FPDvho+genOqINyX0/e333
wi/P6jpHwWn7sEEooLRC6OL1+dRXm10cpuPM8ehIQGYsXR1uynfLY/65rchDPmtb
V2qAAVbzXATQuXf3X2+HBLWjrl3JWAywFBNopDKIdryREIjEpLpJJI07lYZEo9hC
ltnpvmWeaUtkBCxMEvQtKob9acEXZ8BJ4CqsDi4jWomrYZcOlsmv7Bv27JoRQ4c2
BawKJe71F7g3XuAqLnIaq7jBT3O/f8n57STwlHOaWzeNOOxmj+QSjjSQGaAq5hBJ
SfXGYG7BGM7sDw7B6WICAy0hsB2ivvmIe/9lLnQf57alkYuwWoV4AJV+4Ea8yn38
Kqf6I5d/hkMzZASsx/sM//zVIx1UiHj3sS9snTPxhLZDJFmg/eFewqCK2pHjR0VE
SGeNenTYSC5niiReK1e/eVDLlPkHu5JgFPxYDLCaAaz79//zc0la/a3KlDf2bFmp
ywCrfZ2416Rp0IjhTjg3t2AOjyPtKEjUjkV78BnxOWdZIFoWetUBsgUr81g8PHd8
O47Vjl1aBSx+hlTxeW3fBVPOTHlzLz+iNx9o1Vbeakf9z17d//7zvzwMsAY+xj0+
gNNeQ9aqo5+xb3LBe7gFoxsSlM/4iIs/zBu0BJzNOu79IaKf+mKXPtwvU7icUyLG
KjzHbZzO9etLtuPzwRBu8zcNgAU4C93LfTGMbKk/GgnPAsDBlCWLBQuANeW1o+1Q
QrO7jBu87btJJ3QcI1uwYOHWxprEG48d37T1WanV9+SCHY+OkKAA7p2PPwutucLm
D7ZvvOiVezHAEgHWgwf/3b9/H1arQPeU1TNVYF3HmDFxyM4tPzLAame+uN4BWBpR
3OJN3LODyQI77YCVZncBYB22IsPw+2PJMjuogxV1sMAzPvP+4Cx45OrG0jJgIfG6
kWcski9MfnVXN3KVGClaBaz+fbm933HpxwknHV9MlPzqc8QfV3KByzjBLR1Ptuis
4W5rc1mnuE/fJYYuo7Vc0Tku7Tj382fkV91fiB0LVijr/3H9+nBLxxFmQu510NjH
r4gA64E+qfP9RO61F4jfEMLxX63V3BMDuKOLiN0LS1C3EOROXYTdAlgAAofk9PeG
v1pby8Kw2qmBK5e5fQee+nX3ITz0eiUosJNqnwYeecB68B8MVPf/vX/3zr0Qr7Rf
56hOfnW36Nk9FOMHA6x20hW6Y+8ALLUQMoI+9yJnnCk36OnRgEVsHhUVWLDyx/kq
8AziZmmHZ1BeRhrIaRWwgDhR+4kJCv47+AepEauWD8YC9MAbiM+2mdwDI85xI/fs
QJJzASyFX+HaS/yb8Nay8VzuabJx67fc049zCYfJrxAIijqzrB6wjLmg3dzbL3Ir
JpKfwGoocCmOfI34E5OPkiRYiglYuKABZVXzf1qiq9dXam2ZR8f+1MEzxbpAoyaO
to1P9S/t6MKa7RvI2V6KqYFHF7BoADvQ6vatu6E+6Wu/U0MQCUxWDY9+BlgdW0ur
8wAL4UqIVULRjm9pJWZYYkTV4qSXWyaRRhCSKNpOavIypQRiiyBcBFhYm5lI449I
6mNf/ruoMY1bQoxADz96mwCrZVHE0MUfiDaGnFR9I9ttA2vVRYhnGcwewdWVuk6R
wKwvhx0gmCVzbLsc6UoWwIKXEBHuwCMxYMFMdU+HbGkEWFbc6s/JtYbZ6Zp6fWS6
hNkJOAXH33NPkgh3GreOMHa79fWAZSFitQbXo8Q3hGohxajCAhaupmFgyCfjX7p9
u50mnA4CSo/eHcsUGhr1+fK7xVFXbyrmMM9a1V0aeBQBS4RW9+/f/OdOqG/6b/ME
SMmDxdGkn/sMsBQPsDD2a8Zw5725ky7cSWdOKYD8t2kEOiADrj3lQFLtjDunFkoi
xykbiSPK8esxB041hOwOijrjSQKtVIIaxZifduP+tiXj5KDBnJI/kXbOi9NN5ARh
3HFHsgWYddGffL/gy2lGE9YhyMUHquOgODR2wYHQGMmjyw5YZK8WReGI6pHcCSfu
vA9pDI6F7+e8yRHbHZgvC2DRB5ZvcRkCqLXsI36cp4KVm2HKaiHxVXNchfo7yLqE
HSiTXt777jNrRgxpPsgddIVCw8w7BbDq82A9qAesQQNJZP0rzzWUx/tz3tsJ0rUK
WI9xH05++XBHtCG57+hnt8wad1zbIaLlIHd6KTGdcP7KBQYGfXo063RL4wsLuS++
+UDHJziwrLK7BnJ2XMXUwKMFWGK0un71JqxWv88XjnlhK0JBm3+llgAsumPXfCaM
HfO3vmFY3WXM0uq5Be/EcrdgAVxALX+e5Ya8LTIOfDiRW3OEUJE2mEYibgmE8f1O
btRUUu2JJ7kvl3LrMI8suoE5EOeEaCd8Vu0n4VDTfuCeeZ78d8K33A4dgizULPTY
QGl7xFsfcQ7V3EZVsn3KAsJb744i30dO4c54cPrJxIakHsH97wL35TJyaHzQDDQG
BCZuoYyABZIDPqLlaH8jUX48w/HnKxb1wXiihxF8zNA7owg7GqS206cpO2DRhxqW
cw6pq9KwCVs5X3Xa8EPIgEVSt7cW9o74LUQ6zh53fP5np+dNPtXusvDz85M+2jzm
rdd9tkunaQBXtQGwLLn1/LxCwU8iCxY8fTBlYRJi/34kHgsWrBeeIhYsgBqdV3hJ
QKKy8EEkOwDr4gryfdds7oEp948GWT/nH3XujjYpSPeALS0DlmAl9+wznyyZKmi3
KqR2hG5XLRIYesYGVck08BsHh48c/cLdu8yI1QYNQF36Bv2/mrsk+votxRzjWau6
UQOPEGARh+D9/65cvoFYq78Wqn/y7BbQVcveCryRr1+mdf/ffy/XXu+aQtI0jJ64
T1XHM7vEKSm75xb3zIKIy9f2qWh/Pq8/2AIc0G6PFd0RtKEexX33O9evP7EnvfEB
B9YZzIcYz/6FN0TVO++O2HIfTOD69ie/vvkh99ow7unnuIFPc3P/4FSCiRxIEwPW
mK9JpDno6vX3udc/4Po/xj3/MrdTl7d4JRB4wu744KBvDedeeZv7dDZnVy4CrLdH
cpPncc8N5l56nZu+kpiyDNM41VDyfcDj5KDYFw1AM/r248ZO447YiQhPFsAinsd4
MqnwiacaRL34GjkviILpjhqoxKLQhq9XcINe4Ia8xU2ez5314vSS26nztgKWyARS
Xh5SWy00D1m5QHX6R4fAWBNe2j7p4Qmxxg/e/s2II9ZhqbG3ryKZe7tL/N2bOkHB
c2eNbZrJvW2AZcgF7ybGp5WfcnlnyIxCeACxEs7TT3D7viMh7SCqc8u5gQM4hw2E
5C6rkY07Z9UDliEXd5ib8DY3ZRgJqMfCOKgArvLfyYXs5TD98EaLQe5ksefl3OS5
izMfPGi3KqR3vFobeqnGr7TMu6BYljHGr6hs8ZpFGhptwItusRgp1EHLy7mJU942
Copg0Vey9LFHrc4jAVg0z8Ll2n+CPFLXLdYcNWjzJ89tafUNm7LXd58cPbzBfN8f
Jl1Tjm22nfj2zwtmHPtjtd7an7R7Yvn1R63fV+uqGAXG3b4tN8CK4wzTud9PcY89
wY2dzp1y48zyONsyAhnjZ5ARbp0SsTnhv7AeTZzNPfkM99dZ4ibDHD3UhEFrxk9c
v37cip2cUTqpKQYs7LtoI6EuyyISxg7zGA4xdQkxlUEaquG4+IC6HGs5i0IOkVig
KGrBAs2sPsyZZnPmeXxSqwTyEw7RfwA5HA6KQ6MBaAYaM/Ap0jAN2MYkqOhhswhx
aBz3+x2EzMSi0EIw31/nuKef5b5YTMRKigJBLt1Czg5tpo2B9at9UNs+wKKPTqzW
AoeUmknQTwtVp310CKvlIKt7s68x2D7948NGXnGYltiRx25IVe3DFntuE2BhrRvM
9Vs0lhvQj8S8O23iTH/nJr4tIioadBW0h3vxGW7Ua5zhWs5+A/f3ApLvSmTB0idm
rY181gbMPcSvHts44Spi8Vo+gSBXy0HuBLC+5ybMXBB7405HtNHBfQ2DwkaOZvka
ZEVMmK8Ewn7fLvsh6uoNJC7poPLZ7r1PA70csCha1VVf93dNXr9UC2g1ctDmNs0t
n/DyjpGDNo16dnPXFBzr06F7JwzeMfa5rT20jH5my4QXd+w9aJf83z15ARYNe4Ll
BnYmBGCZZhF0AECAJMAZg18lrj3lIMJJewyJ9Wj5ds44oyHsCdyDyYAjv+BeeZfE
KsG0Iwasad9z2rHEtUeMZAnkC0xBsJDB6kZNYk1nEQJiKGB99ClpFdpAw95hTLro
x736HnEXYi8cVBzvhcagSWjYLj0itlULlkjUu8S9CNRrEBVHzuuXvwkFHrJoJArW
MsSEUbdgu6OvaIM7AljkEVlUgsRLQdVVgOyfFwumfXQYGS8R5iiFWYoGWHDkIQEp
ElnNGslnuuI/g58hoesAL+oTLFciCR2GPCv6FcHyF74XARZi2BH8nniE+2ESQTTx
Z/YoLmI/CQKTZS3CbgcsLCW5ZtOaE8dlJQyFMiZ1fWOysriPx450Ss1GMGLvgwN2
Rh3XQK8FLIpWtVVXvRwSNiwDWm0a8czG7p1PLt/JUworDWHOn7+598BRh6T/7soL
sMANyMwJB9nn80RxTmLbDCw903/kpiwmXjOQE6w4MCAhOF3SeANiAHv9tI/rN4Cw
ESxVYsBavo0z4XGNFstCQkj4IKCKhqW3AFigOuwrphkkytqmSdAHB8LhpCgHTULD
5v9FfmoVsHBSu/SJqP+d46yKOZMcziS7oWhFcwMeI8YzGLTEouDNBPl1EK3kA1g0
/r2oJLSuGtE/KkYBa5arfz380JjntkwY3IBZXQBYSKYwfwwpdHkcOOyiDnLj3+Y2
zSARUdiCpXJMfueGv8KpryIhUwApMBbyV2n+zM0Zxe2bS7x7wCa6O11gB/+F12/L
DJLyKuskF32QG/U6d2Ae4SfsTiorEesX0pNOeoc79z3xNtL1diB51Wfclx+SvaQW
58F/FcSChdBJ+6SMyV+NiIxijNWKBjDjcuWqJ/arqoZU13V8JGYSeqUGeiFggaz+
/fd+UV61k1nkphU6iLX66KmNZA75q92WbFphYagzGtYZgAW8+OM04Z5Za0hOTkl4
gh3LPJ8UWIZgf0J8d9++xLAk5R2DEeh/53ljw+8kVboYsFbuJQ4+cWV8h5VLRsD6
bD5nU9qwL8RCOD44kNjmJJaMJqFh73xCGtkqYMG3CFLE59tVxCf467FG5bfjRBTs
ZADKBlHjOOuSdvoEpXTVUQuWxORTDNhhl2sDK8pVDAN+/VHz6w8Ojh60GdFX6Hhd
AFjAGszdoxkZUBCljnwNyAiK7AzF58gWsBQCrR4YENKiqURRB9YmxLbDIoVqZKXC
+sUExYsS1qpxt7S4uzqEnJCiHQKBa0hMSncHjSH6Cvaw//TIdvFqhpCPjff1GnBN
LFBxAIsn49JzFpYzZgzoeoNQDzoiEobp6PT9ct4yPrMocw62P11ir+Qq8Un1SsB6
cO/evwFuKTM/Ovw69xsJt5Jt6VlWTS4a6AzAakh0/icxMj0stAiGrqeeJYuiNK0A
89JmAUGWyXOJTUgMWMifLklsbQIsKkp8LHzHFnxwoGbTvqNhaB4a2SpgiUU1uJqa
fHuYqPbFXUkZ/ECrSzZzs5b+GiePkCDf4tLwq3X+ZWXArN9WaX/1/oFPntk05tkt
nR2D1XSdZsXcolCA5Vdc5plb/MNfK08yR+GDhxqx8vK40RPet0tMg7p6NyKws+uI
BnohYMEzCP/gndv3wvwyTmy3+W70seED17c6YVAubMGEQAOdAVgIJIcVh9qf6Noy
DSWGEBIKsWClEPtTn74k1F3agpXOrb8osglh+b/OACyIRUA6PjgQfHxSDUCT0DD4
H9HIVgELomC7wgeTHGeuIT5QqYK8ErN/bd7bqICARZ5QBUiaVRpxrc6vuBSxWX+s
0Z3y5p7P39xj4B7b8SB3FRefOd+M9tpC1hNUTIRquVUKBVgk70ZJuWV0yhczRgX4
M0dh8xpYtrzPEQ31oIrqjoy+bN9er4HeCVg8Y4kwKzoo+8xuuzmj/v7wCYZZXeEk
7QzAgsdtvwlJpjBtBZnHJxlpBIMQYp6WbeNUg4nLbN6fJNQJ6amkTDJgmtWHiHEL
/jvJGCw5WrAgdqMKSeiw+iBBKKlwKDQJDZv1i0wxWBBFHZpbhCTtFuYPShb4JT1v
cHaVJMy/KaspKGBRv2FBiV9JacR1xKwUKxv4b95kah6UHFBW3pHnLGYRqrh4z54x
pkcDFhyLqt9z42bMi7txtyPakMu+8BLCMHPRxmHuwqEFBYyxpDVw+BC3Yt36oPJa
uWibCenFGui1gEXXcKaYhcVwYkJyzu1zmPnxkQ8fXzf2YZlFm/MkIg3pO9yf7/X9
q2vK29zvk4ccHP3MtuED1n302PqeWD7s979RT23atcc6+YHcZhECIzCtb/hEbtgY
kvLKiC4LiFmEyZxuEvfym9z748gMPsSP79Amk/V+PUooSpw83SCNTDb8dA6ZIXja
ldiQ2mHBghWNsot4FqGUixB4B4pCGqpJc8jhcNCGWYSZpEloGIAJrWrVgoUWop0I
6v9qGQE1ccpQOlcReVBhvtqu1bwohQYsHrO8CWaVhV+t9cgt9MguRDh8R56wgeVV
ZlEJU6ZNtf9fwyI2PcuORWLez3MXlnGTv1vcvWkaxBcCgOVbVL774vk1a7g7dxhj
NWhAV5ebtWyBR04RMLQj/Zbt+yhooJcDliRm3bpxJy4s9+IBpxkfHvrg8fWyYBZm
Ha748pyLRbS1XmjXFC/blEkfzv/l9wunVXyOnXfrieXoOdfjF90NPeNi/rkhr1mE
AAswB6xN/fuTOHdYbuAotKsgseT4Lz5INEXzCwC/3h9P1mbebUBYxLqUxGwJw7ll
28kUwjlryS40wRXN5C67Bcssh4S0I0gLuEPTNEgBFiUh2KjgCoRFDQfFodEANAON
eWEI9+EEftEeGfNgpRGKQpZRZIEXiSrhTHNJrtSJM0lC1E1qPRWwGkbxEoziHR2l
ICHi8vUPP5upv5Kk9+xZaEVbi7D67JPc7rmPLVu3lc+o1CHilNfuAWWV7jnFqzf/
dXAfAyyRBkJDuBlzPzEJi/Ar6ZDZVV7XiMlRcA08EoBFMes/3pp188adhMh8pcPO
094/CKfhuIdkQSTRVPxSOdt+0uuaFXLER5kwesxpSzPkp5ZbQucOpMludxsQWBNW
e1VegAUoAWABnj6bRybQvfUx9+l33JdLuOGTCOiMm07MV3T1GPzF6oFgrIHPEIvX
FwthFSA532E9GjONu+AnSlslO2AJI7gRnxPH3/hvSRr3Ob+SyXrNAhYhp2ROLYws
vPPE0yRlFxqJBnw8maQGhZkNObqwXKAsgEXPF61Fm9FytB9ngZV5xn1DvkMDiEXD
yj/NilJ8C5bcn4kx/9z6Yfv+Dd8OzD9FpvX1OMaqU+VCd3Kfj39P1y9YocJ6YB20
jstY9PNCdcy1fHjE9yPyU34eN3/RYGVbW/9SLD3U0RcDud8FTKACauBRAqx6xgLK
3PjndlJMofJhly/f3T984IbxTVd6rgesLT/q0pRaXfMhS+WMHXNEV78X5FaR+1qE
wBdkGcXqMRSY8AHEYJ2cCz6iBXAoW8CMhHWgZ63msDwfPoh8ggNx8SaSYpSuk4Mi
O2ChMpZPRk4E+oFMh6qHAhZMa/AMgslW7iEp5h/nlzJ89V2SGv6AeUNYWKsuQtpI
tBZtRsvRfpwFPlgbEbiGnKVYWJrmQe1hMVidY5tBULZnfvGUaVNOL+AuqRI7FpYL
7BEFUfnXNbisY9yPUwb99ffJ0JrLijZIgLEMg+KW/Dzb1OiRZqy8HG7N2ueO6er4
lVZ13OyqaFeZtaeTNPCIAVY9JVFz0T/Xb6fFF6kecZ361r6Pn9qIpO2NpgFKLPbc
NXRF5z8ywGrBBoOIK1hukAV0uzb35xnuKFb3iycZ2KV2AYoBQVANiy4j7AmhUZoA
Lz7lOi2ocMyeW3ucO+nSaJ1E8AqiuJB6ShDeEKUO0IGodRe4TarccUdiWwL3/HaC
O2guSgHf6OgxJCwMgVawt23VIHth3WWYtXB0cdg72gxPHzJ7wXVIk8jjuGgJ2oNW
Sa4hiL3QcrQfZ4FVnxHpD8SElU4cXtZU1CNowcJae2F1V3R8QxbMn7L2c05/FRe2
h4vax0UqdkELQ3dzp+dxX3/8zMajf3vlFyug4wkwEVherR8Qs2zNo8tYOdnc6l+f
Paqr519WzfIydBKL9Eqxjyhg1cdm8Zh17VZGUonyYecpb+wZ+czmiUhJSqPdGWB1
zN4gdwsWRQdtPn05QqkQxg46eVjucroiDcLhkTEBxEPtPeJC5t8lkzzs+ElyzT58
p5KlxBJRGaTgiKgDxDHOIqT1sPX+sDvq4NDYRS9F5L6UbADag6PA2EYl4C9agvYQ
NGy8hiAhSJwvLwr1m+aIlxL1CAIWPz+xOLiy1iI6ccPhw/O/++zr0c9/NeqZr0YN
UuzyzNdjBq9YvfykqY17dj5inhRzjBExVmDs0jWzzU0eOTsW6GoNoStdv5IqRleK
2UUVtlWPNGBJYVZWcunFA46fvbYbyw5SzEIMFnMRtrvvdhJgdRwgmISWNSDHTO7t
7jzt2xEBTK5ZeSZhMVpe/pqefopf0E7r+JSAMozcCh00DcYKqqjR8QmfveQrA91H
iLGiIrnvf3j2mJ4eo6v23ZKP+F4MsOoj4Hmn4fVrt7JSy87usQddjX5uC1I6McBq
9x0SfunaXmWtz+f1IwkUkh6afp3hjqJpoOcCFvoqlt2FKQherZ5S/EvLe0RMDxqJ
4G7TsPg5y+eeOcVhrZheH9tua8MtWPLOWVNTv5JKBSfgdj+l2Y6dqgEGWI3Cq2hs
1o3rt3PSK07tsIUda90STRbk3r4uGFZ75aiOyRcLnjvu3FyskmQ2dvZdkTRA/Jv8
Ujkzl/4il6Vy2td/2F6KpgGesSqc0vJX/LVm82auuqo3M5aaKvfdsi803Dx4umLr
4ShE6hBFuyNabQ8DrGbi1ylm3bxBMMvdJo4BVqvdqNkKmAipYusxfdnwXfrNLH6s
aGYb1h6xBkBXmAi5YB23dO3GmOu323f12V69VQNgLK+8snUH9yxZ/mx6ei9krNu3
uR3buEW/rLSISsAE1R5hX+ytna2nnxcDrIdOEKRcdffuvS6bQtjLZhEGV9boeoXM
XDFlvUrzix8zplFMDSA8XymA+27tY2t3HVKcvJc9/VHbm9oPi45/adUpY4Oxn76v
rc3dvdt7MCsyss/06f3XbNvimpnP6Ko3ddpuORcGWF2JT60fqzelaUAojGNy5oLV
q1bs5Ezq15lRTKRgrZLUAKZMIrXEN8vf+FvLDH7ebnkwsYMquAboeoW2Cakzl87/
fsXAsrI+PT0k6949TlWV+/yb8Uq2dgFl1cxwpeA9sEc0jwFW69DTlTV6E2DhBoi+
dnP1lr8/WyhaoIZxTI/QAJJBbFbjJk3/xiU9J6C0okc8yFgju0sDwVV1R7S0xn82
zMSEu369R5qyELAfH9934aKBc1f+5JCcwfp8d/Wl3ndcBlhdiU+tH6uXARbsHyeN
rL5a+uohy4YVi3sEZDyyjUSEOxJxrdjFfbt4ddyNu73vkcfOSO4aCMB62xGxX8+b
9c3slyMj+9640WMw67/7XHEJt2t3/w9Hjz5laBBSVccMV3LvHo+yQAZYrUNPV9bo
ZYCFzNTeBaULV/+J9V6QJ/ORpZYedOJIqHHIivtqwXAVOzeMNwr+cPTDvLaHFPyE
wdK3Y8lyJeUrmirQNsVpElQdWntJ2c55+Jgx6zY+m53F/fOPQmPWv/9ylZWctk7/
kePeX7t7l29ReWBZlU9hcftUim5GfKb1XRFfFOvqFJYoVHvap+SeuBcDrK7Ep9aP
1csAC7dEeN3VMybW05a+td+MGbEUHTExfxBrBC3d0n/xr+sVP7wdaGWXk2+Ylmmc
niVVjNKz7LJzXfMKvQuL2z20YEfzzByIosK9O8Zq8hoeMJaT8buwxCW3QEGaJD41
RIUjn/7WU6eHjRx+6O+nEhO5S5cUDrNu/MPl53MmJv2+mf36tAXLbOJTSaBhUTvT
EOByoB96FRS75BVYZ+eiN5pmZNvn5LnnF/oVkZ/kdd3bJ4f2FjQP90IHXzba14BH
fC8GWK1DT1fW6H2ARV5ta678deDUrFVPqAQ1WmivB9l1HoWm0uV9Nij3mbZgjmNK
lr+irtwifmTHV9Ys9/DkLpznBGrSRU31EyvrpZ5eeyMiHXLy2zfOxZRXv2VkxKmq
EOFqqi55hYowWuBcMFhejE+a7+7hrICjZlEpGMsjp2DNjl0ffDL6rw0v+ftx5eUc
LEbdHgV/qY5LTOCOnXhi/GcfT52zUM3FJ+b6zY7kuPItJPxkkpG1NTRsgbvH+2Zm
nLLSQC3N8Xa2a/z81RKTPQuK29f35NLTqF3NIjNnfVDIhuCQCIW/o+Vy1golpDsB
i6abavXTQb6h8jsopMt2732Ahe6O91rMylnx1455f/VXCydLBGorUl7NRwGeWj1H
2K5AV9s0+3y9aJK2p29ozSWs7qdQj6qmjYmvqF7u7cOpqXFaWs0UDQ1OKOwjEMx1
c7fLzmvHOBdTXvWWmTkHOZCvqakIgBVUXKaSmLzcy3ugpgbmvNnn5CumWQLUElpz
2bugZPMppeHjPv1+1ZtmplxCPE9a97uatK5c5tLSOBdnbseu54aNGvfDhq2m4bGY
f0MWf+xAJwe7uOcXbQ0J+wCdBGlJhUJ0EtpVSJ9RU3tOR2eFlw/4JrA78pSieeix
20PDx1pb4yVkqoNjQmWNgt/Rva953QZYQJ6gMiRTQWpg6eJbUhJVVVVz8+bte/c6
gkeifKH37l26daunMFavBCzcNli3xC07b8nazXN/e/KMB/EV6iUqur+sVSjpHRVg
uMIK1hpR3LoL/b5a8Pk5C6uIy/94d2Dg6bKnpDRgqauTQU5c8F9QiJZWX3X16c4u
sCW0lUUUELDiKmo+wGw9pBPAQK6urrCARfsAli0Kq7sSWnv1sLbxpG8WfDh63J/r
hhgZcpERXGlxp2fPgr0qKZFzsOMOHR741czRw8dN+/PgUffsgohL1+UyTxB09bt/
IDFwkp6mSf426nuaZOPFizMcndzyi7qesXBEnZQ0Yt/lGzbVyZkBVpc9msQH6j7A
evDgKYGAU1Jqply48JKOzko/v/1RUXE1Ne1jLOx1/7//kmprt4aHX0xKYoDV9X1L
8ogYsIMqqoIr6tZsOzLt+0HrLnAX/TnDdM4wldNNJLYT7XjGW12kAeoKRNFP4YzS
Oa04bq8JFsbp/83i+fp+QZGXr/cIukLvagRYGhofWFp95uA4yd4BZbyt3Qhr6+cN
DKj9aYCm5lr/wMDGATHgrQD4r0vKI0urQksq8F2KwFoFLOwSQnavDGtud9r/YTkL
LimPKK0MLi6nVrTw0kr8FwVfpO5KVICNCtLwK8SiVWgzbRWCyfDf7Jorw62syJDJ
AxZia9B4KTmytKornwZ8kMCl6Gu3nNNyt50VTpy++JNPJ/2xboiyEofF/sJCucJC
7u4dOZi14IWsriZ2MldnTluT2733qRnzxnw86duVW/br+ISgAVgdFdNu5HLuCGw6
HhVLrad9NDUH6et/ZGU9wc7+U3tH/H3f0vJpXT0ReGlq7giLQD/BdaQXEVeWXl8E
0gXxfSOgsYlLlisIrWIvdC1xd0LPwY4itC0sjSuvNsvIJqY1dBWBYJqzS27tFRwU
/RDNoNVwFoHFpehv2I4WineXi4qYEGigWwFLT6952z46BG9i5c6fH2NhEV1d3VYn
H+pX37y5LzqaWEdPnFjt48MASwG6e7F/SUV47dUdZwVTZs2ZueqpVQe57drcBR9O
JZgsfmeaw0rnayCXTOdUC+VUQ7iDFtxf57hFG/p+tWDM3B//QtxVaPWlnkJX0oCl
oixISs2uvYzX9MTKmqiySs+CosOR0UMQRMV7bZ7X0YHHRDwJHyiDV3z77LyLCUkY
/87FJ8KNiBFLcqhrAbAgB+OZY06+MCl1Z3jkydh466xcfrgqawg8R52Scve8Qu2U
tP2R0RrJaeQ1o7jsSHQs/ouCL+IAfAjEvjCKIJr+VGz83oioPRFR5+MTbbJy0STI
QbmQkHQsJu4VWLCo11JDY1tYxIHI6ENRMRTCZGpV94XqY42d8EtXsfiSXVLWzoua
3yxd+9GkeV/NmfL7/14++ncfoRpnYsQ5OXJREVxqEldbQ7Jq0SKekHj/PnftmmjL
5UtcXi4XG8P5eHNWFpymkDt/ltuy7ekF34/+aOLMyd/+sHbPCU2PoMgrNzBdI6ii
Wr4PQMfcguEWlnT8GmJstDM03C2vKLa8KqmqFt3GMTt/tV/A4zo6xKalrDTeyhqR
77j0QcXl6Gm4srj6uyOiYNnST00/GBUDN6IIjGToV+hg6BLowOh+mslpuPr7IqP3
RUbppWY45RaEllagUyFKDxv/CAwmDeBZHFx+Oi4BfVUzJQ3NgBC0B90G/fZ4TPyu
8EiN5FTsjm7WVkOvfBXby6QpBmDBlKqi0qjABo63NKzCcP78r97e9+7fbxMhoXJU
RQXQinQvVdXVAQFt2r3LIq6aHqi3ugglb5vo67fcsgr+2n986qzvv1rw6cxVA2ev
6TP3d27BBla6QgPz/8fN/qXP7DXc9OXvfTH7u+9++FPdxTv+5l25+E268vnYyIKl
ogLKCatPi0qWJS4uiyyr3BYS2ocHrKf19BEYTvmJjk9Ho2KmOjq/rK+Ph8xgXd0p
Dk4HIqIwuoi9OQ8DLApSF+MTv3F2fdPYhLtw4WlNzcn2jltCwjzyi2AJoIyFLwZp
GSu8fd5A7LOKytsmpks9vV3zCwcBj8jjTvkZDQ1YIAgY8YYuDJZz3NzfNecDes6e
QRmsrf2Zg9PmkFDMSkuqqptgaYmmiuiKhp3hOami8oRAgN1lbFVXXqCHHQvBT2F1
V+Nv3Yu4dM04JHaXkvaSP7aM/Xrl6C+WfDFr7qIfxq1cM2zrtid27+5Dy549fS6e
4y6c5f4+zO3aRbdw23c89ttfQ5f+NOqbBd9MnL5g+KTvpy/5bd3fF5QdvBHxif4c
eeWfoMqazshrhet1Pi6hD4+5T+jqbgwKJiZMdC3egIRfQTn4u9jD8zkDg5HWNvPd
3Y3SMgE0mJYxytQMfkPSAS5cOBebMNLKqq+q6h/+ATTLgyz9itqZdoSFf+nk9Cxs
tBcvcOehnfMAPvQfdHIc2jIzh3QVdA+MobSrYDxVVubOnl3u5hFXWYPOiXmOm4JC
PrV3eAoncuEC+ue3zq4qCUkUvBShn/SCNigEYD2lp7ctPHxDaKi4wD9IHjToEwLB
ODu7RN5RKIkjTUPjpX6F3Ys4H/lnEAUssatRct+HyWz5WOLGPExs+9yavWwtwofd
HniPx1iOIFOkWdL1Dl13+NSvOw4tWr3py9lrWOlsDUydtXrGwrWrt+z/ZfuBU8b2
yNUe+8/t4KranvgsawGwxKdjmZXTlx9jMBBuDg4F0FCjEWYXPqenC8ohNANjOf6C
eHR0toSEwoFCfXnNAhaZmVVYcjYu4VU6wVC8u6rKE1qaP/v6eeYXYazFEIsxdbyt
LScU4CFGCj+8/e7nPxDOI37Me0ZfnwIWDqeXlv4ehl411WEWlvPcPZd4ec9wcR2s
b0BGYqHwF/+A2IrqT2GPx2hKI6lp4Vv+hLoQElptVdeHAbXaqYjdrqIaZi28dCXe
uQ8DqmNyloqj73Ejpz8OnF617SAtK7ccGDd99cRvf5m3evPPOw5hy09bD6zde3yv
wOiCtZdJSJxvYXnK/QexN+7CwR1SVSsvP+DD2g9Vbw8No+AOhLLNIrZPqcrQtn5a
xrm4eNiZKP7yNteaUdY2Ig+vpia8iv1VVfuoqa4LDCJp21rrV5CJOsElZZgSOFBD
4zFtrc/sHRd4eC7y9IJPvB8/XL5sZKSbmm6VlUO6Cma/igELFIXuev7cMnePlOo6
2Ep/9PF9nEyVQB/m+z+KqsobJiZ4c0CCiVavHasgiwYUALA0NWH0bgpMZxKw5KwS
DR7USU+XBCx8v3XvXualS8rJycfj4yMrK6/cvk0r4O+l27ePx8WB1chDDfeAUAhE
00hLOxgTE1JRgQpeJSWHY2JOJyQciI4uunZNvKMgNfVUfDy2X6iP2aKuxkN85b9j
Y10KCxF3r5uebpqdjYMFl5fTn/ZHR+ddvYrK+KuakoKaqXV1tDFtNYY9ChYscb9E
DCxmdONFE7AV+88dvNGy0gUaiLt5F+MZdB5We7nHWa0kH2qyABY8dBSwMBxOcXBE
wApGO7gFnwFdCdQG6ulNtndY5ev/tbMLXvPwxBioo300OpaOZA8DLKP0zKHGRiCn
ATo6Y2xsV/r4zXZzx0BLtmhpbgwOgXkAoTZz3TyIBV1D43FdnS8dnVZ4+2Is/NjS
grZHDFgYWeFvmuPkzJ0++a6RMVw2SZU1KVV1CM35zs2dTz8h+MjCEtv3RUT/6OP3
gqGheLbaIk/v7719V/r6Q0irrcLATNMKKGzBAwHGLRBSWM0lPBairt4UF3pfwL0o
3gLfH3LshVTXwf2Hecpd6dqGtsfZ2FLX82BDw2bJFVZMEiBVVolfxY7gRoClpTVI
T2+emwc6hnlGNvqbLFcQNlqVxJTX4Hw8fXqNjy+sWQkVNUmVtdaZOaQDa2n109Rc
7esH5+NSL59Zru4imNPQeN3UbI1/4HwPLxh64yqq/woM7g+6EgrRnYDyuAXQk/sT
n6bgdRMTs4wshe0kPathCgRYUkYjw6wsYkrFw+js2bMxMZJGo8Jr1zaHhU2wtx8A
E+iFCx9bWS338cHEQ0ppOZcvc6dOkTc/+iDDXzzmIOrEicMREaiwzs+PO3mS0Nvx
44ElJWLAegU1UU1JCdH34o3JNTWiymfPznNyMsrOhuQRJiblN28eiYggXkhejn1O
jjA1dbKj42N86NgkIF1q6u1//2WA1bPuB9baHqQBWQAL464IaDQ0hhoaRpdXYez5
2deXPB/U1UdYWdll5WbWXPLKL5pkZ08eFCoq33t6ueUXgsOaAhZGQcSVwztDXvo1
NYcYGxumpqdW1QYVl84jMCSAGeArB0eEf1lm5pIYHX5a2WxXNyQFRWQYXJawoj2G
YawxYCH2ZVtIGFAJoVcYQRH7jIEzvboOgfnEy8NP+z8eE5dSVVt8+drHVtbiIHcy
vlbWQA+YI9lqq5xzC5oaWnrQ5VacpqJvPEEtiASwjGTPL9UIsDTU1wUEhcBvWFEN
CJOlX+EK4g1BIyn194BA8BPiujAHgjoWY8urB8HeqUWsm++YmwPx0S1tsnNFE04F
AlBU6eXr6IS4BbB9Emyr6MMCwUJ3D+SqQGczTst8EUZZdDaBAMGLXQmsinNl5d4S
BQIsKSPW0dhYYlTX0HhaT882L09MPCXXry/08upLTe6AGyARvqiqjraxiaqsFAEW
+AkbJQHrwgXu2LHD4eEEsEJCyOMVt4eSUmBZWQNgIXqUN7/jVaABsOrqiCgaJ2tk
9CZeH48d+8za+urduzBfiX7S0Bhha/scHoUAO1pZIHhWX9+npIQBlty7LBPINEA1
IBNgFZY0AJaREcYh2+y8rxydCPoI1GAiKrp0LamqpvjydbzEk9FIKPzc3gEeFrBI
s4AF38oSZDeFw4UPHM6vuwKDU27dlcOYUwaHo7rwI0tLq8ycc/EJsG2Qaqqqf0fF
IqyYBlo55RQgGkzKRQhPGQZpBOjADwgIw3ERpGyVlYtBUWSGV1Y+GBmNwRW2hw8Q
iUWD3OvTNECyLK1CPDX1SLLSQQ3IB7CEQtXEZNHsBJmvIJnuUFwGSEKvg3kMfQb/
xfwMhKg/SSeNaWo+o6uLC03SNKSmi7LESaRpgG0VlUUROCoqJ2LiMDUE4JVfd/Vd
cwvStTQ1V/n4Atk7qCW2OzSgAIClpYWesT4k5PegIJQ/goJ+Cwpa5OX1uqkpudjK
ynNcXMr++UeMX2sCAuh74Se2tnAF6mVkzHR1Jc9QoXC8vf3VO3eu3bkDh+DeqChx
34JhySovTyk5OZafkNhuwMKrJxoG4X6lpZCzKzJSzF5wEGwNCzPIzNwUGkpMtbxn
83/BwUgV0abPI+UiZHcg00BHNCALYLnVuwgx9iAiCoCFUWeAjjY1C8FvAkvAd24e
Szy9yehCExppaiklJMEG0Axg8e48kZOOj79Z6kl2X+ThNRo+I7q7huaJmHi4YER2
JlVVTBwTkw2GPYReSQEWlBBYTKbrO+XmH4qMRrj9CGubFw2N+mrXx1qpqPCAVfEw
wJKlVTtCI6LIcnsMsDqqARiNRiMejqcZdAY4XpuNCm/FRSgUGqZnUe8hdpf5ClbC
+UgyO5AU7dk/+fgjSn2YuQX1D0r2q4cBFuBsU0go38/JIDXe1n6hhxf68GJPb9Iz
eRPDS4ZGQHzWVTquAYUALHJRm84iBF3BDqSjo5uRIaarnCtXRlpY8KZ4Nfjg6OxC
OAcRwUomCmlrh/NRVvg8LMi9/YAlFMIpCe+kuDE74CKk9ipV1T2RkTf5tKj4SyYN
8a+YLxkb/3u/bYjFAKvjfZpJeEQ0IAtgIRUQtWA9rqP7V0AQCEOQmCKa/oLteJKc
O0smYeGvEuZ2kUl5sEOfjIqBq64pYGE4xIQ+UW4hOjOL7o6CmGJ+Th+CY/aGhP7s
40vCh8nDQUUpIRm4Ri8Kgt+RM6lpkDuMED94eX9sbY35jH1VVD6yslrjFzCRei0h
pDXAkqVVv/v4xsg7W8Ej0tOkThMWx78CAmmQO+bxYcpeU98rAEgzOfVEdCyuLHy+
zQS5C4VYu1AMWLJfwZCSigtxCV87OX9gZdVfReV5MgHW8Y+AIDIISrieHwZYYPSf
vX1FI5e2Dvki6sNnyXc6EF+8iKUVH82LK9+zVgzAEk+KEX8Bcikrv6yrq5KScoMH
Fxoz7l5U9BosW/yM05RLl8SsQ41G6GHClBS6EdQlNYuQWpLaD1gCwSw3NyqcymkA
rIsXnQsKxNvfBQLygNVXU5MBlnz7K5PGNCDWQMuAhaELk+d3h0WI0jTo66smpoBv
MMdqoK4OeakTCsfY2iknJiMflWRBAiGMfM3HYPEWLEzUogawV01MAU9Nd0eddUHB
1MIB6joTlyC2YEGslAUL1gvEbGH2Is0pM9TQaF9ElG12LhJF/kpjsGQALFlaZZie
qYATCXtif8Ylw/RA5Bel4P6/gEAANNFtfZ5P2BoR6jfL1e0ZPb33zC1mOLsYpGbA
TdwoBksoxBRXSQtWq/0KVxDcDxTDtC3ybqCq+rWjM1Y8xETFCALuiMFqmDzRggUL
y/uILFgCNYTYo39K9eHD0bGICeuJl0bR2qwYgMUvKUB4CATNr+iEZ9C64GBkZ5DM
gAWC+SuYN7zzT7fPHR2/dXP7xtV1pptbv/qJOWNsbTsLsNTUFnt5ifCqCWC5Fxc3
A1ja2gywFK3Hs/b0Gg00BixltaSUrJpL2IiC0G9E6SJR51AEVtIASh0duAthaSAx
WE40BkvwjbNLMuaxllUiBAqzsbAXHCiwcgGD4Ih5aAyWJx+DpaHxvoUlMIjszjvv
Eitr6e7Y8WxswlCkyCIJk1UPREbRaYk4OixqYm8OTdOAjRg4SVJKfvHEKY5OGIYR
aoOwmDX+AS0DFrgK/ikYSEgMVmutapQElTkKO6YBJK1905TvWlpaCLbbEBiM6Dqk
tyVR5GWV5hlZWPu5L7VxKil9YWuHSaDQfwuAJeMVRNf6AcZRPlIKXQt8H1ZG3IWI
x5KyjDYGLMGXTs7on8SGKhmDpaqyNzwS9ws6MN/4WnRjdGDZw/Z7zcOkk05EAQAL
EzGMjOJra5FDwT4/f5mXF7VeTrCzw6KEYosRNRot8/AQxaeDqBC3fg62fb5gFz7m
/RUtrc4DrGUSGeGlLFgwrTHA6qQ+ysQyDTSrAamlct40NUNSR0yyo+U9C8vBRsY0
G+RjmppIHYRxCAYDRO/+CcsQP4vwPXNz/ZT0lEpMAyz/OyoaiUYxYR7JQunhHjaL
8FAkH9/JzyBTik9MrKiBqewc0mSHhpukZyExBMkRn5M3GmvawMxAwlxswVUYXP0L
S5Z6evZvnKZBtGYcPIwkkJQsaZJWXYd2Yg2fxZ5eokBSSRchTRDID94OOQWIKvPK
L4a9odVWsV4kRw3gAiFRrWgKgqbmU/p6b5uZI6/VCCtr/IWbRUTM6uoIOUdN6iN+
GGDhJxmvYEJl7bcOjvXeZ1UEFEIymTyRmy81eYLvV+lk4gXJVSRATt2smsvoqAB9
uP++sLcnXUsonO7k7JyTj0QPeP3YHhKGBKq2Wbkswl1eXUUhAEsyDxZWDyTxg0i/
hhXEdHTOJCZKGo2Qv4o8nnjDu11+fkpdHRYrFJfYmprkurr2Axacjy3MIlRTY4Al
r27H5DANdFwD0os98zP7Ggp5y+c99Roac9zcxCvYwGKkm5rxLgIlhQI8TJBqASvH
vW1ujmAalKf19We6usHe0OwsQrQZ45NNdt5YhLQLhYjuetHQcJiFBSbGI9gZFilY
EZBYCxYpWALWBwUPxMNKQwP2dTzi3rOwQEz9Fw4OeKxJunIwOiJMZ4qDA6UxjNAg
PKy4gqHuNWNjcQwWVkSBXQFlhZcPkcA/qd4wNcPRj0TFYLxvvVVpmWwWYcd7nVgC
MspuCg4hJkZqT5LsfvVrGSEX6Fr/APAKDdJqAbBk6ldppF9h3t+LBoY0CzeSrsEd
iYmEK719+tcH2KATwhWOfmWemfM2DQjW1MRMMvSWGS4uphlZsLNiLsXziAVUV0dc
DeaTDbO0fMPUFJ0f1jj0ZER0McaSS1dRIMCiNioaPjWWZEAmEQmfWFvT9Z7pr0Fl
ZXgUkr6lohLMZ1ho+qE1m43BghQSgxUUJArxU1JC0lEqAcHpL+NxxgCrY5ZzuXRK
JoRpQBYNSAOWVCgnP+D1EQqXeHoh0VTDqn+FpfAeIpsoScWOl3h14uzjizoMA68b
G2HSH02r3cJahCqJSR9i1iGygOJZJN5dTXWwnt7+yCi60CFMAos8PPvToZcP+cKy
dOfjEjGMSQIWnYB2JjZ+MLYLBAO0dV42MoZnc4C29kuGhi/ReC9V1Y1BxAIHQlJP
Sh2srycCLw0NnOBPPr707FptVWesGyPLleqVdXDhPAqK4GJ7FQMHD8d0+CCFX0v3
eV299UEhmI5HFwZoGbBohVavIEANtq6lnl6kX8E8pqcPdocLiDiszc3pfA6Yshyy
83BQxIGt8fUjRizaMDW114yMMEMWTm1A/J8BQVi6gLRc1IFxvwjhdpxoa4sMW73y
knX9SSkWYIkZ6yzSuCMqi9g2hUu8vCpv3KAYdPn27Yk0vk8oXB8cTBO4Z1++jOTp
XkVFmOJ3699/KUURwKISVFWx8A62IJwLedjxxTw7W5yiBtm2kA4UG5WTkkgeEQZY
DLCYBnqIBmAPWA4nmrJSI8MVNWIJBNMcnf4MCFROSEK4jJiu6BOWMg3ijjHGfEDW
/lPDUwLZ0pGrE+/3hK5ES+VUv4UQLjp2CoWQI/mAtsjI2RgUOh6mLJKwUQ3WJiwa
qJeaToKi+N1501Q+1uShK95Md3K5EJ+EFRLrY2U0EQEtXovQPb8Yq8hh0boX9fXh
0PzC0XFPeCSMUrORCgsDpIrKFw6ONI4Hwk9Gxy/18HqcfzxOsXfYFRouThPQaqu6
fozpxUeE2mEZxVLNO8Mi57q5vw7SUlN7Slv7ayenraFhuilkeW/JDA5kLUJLKx7r
QfOqmH4o1TOhq1avIHZBv9oZFvGZvX1/DXV0vCVenufiEg3SMkmXUFd/TEsL65fT
sD8sFr4+MGQMnEIqKiB4dBut5DT0OtLDC4pVEpJ/9vGjZI9WISQRli2sgN60Vb34
InbqqSkcYFHGqrp580dkW6ZZjFVVsaaN2FJllJVF8ehxXV2QO5LPPm9gAIc33gvx
tmeYmUlrArYmws3Mh8yjJuBpnodHPr+gTebly+MppWlpDaRCjI3FdntsbD7RKHMR
9pBxt1NvGCZccTSAYcA5rxDYARCRKtbZeeAhGk3VbI4isqRgUSkqIE4clVHwBbYB
SRsPvtvn5Isli52MVAM0nAu2Mbo7auK/2IVKwK90BToMsfiJtgfb69M0aMLYMN/N
XXJ6P+TD2oHKCMNHZTRGfILY3YFvHj0dyIR5DNXQNtREfLT4orTcKsW5dr2pJdA5
Lo1rfpEDf6HtcvJxUSQ7g+TVoXVw4fC32Zl6slxBfuZpMY6CPgCBsFTRQ9AugSLO
YkVropciby26FmqSTl7fgbELOg8aTNtDeh1/X/Smq9O956KIgEUZC8k8ybRV/t3x
VRMTfz63Jz6wQmGZQrKKOE2VRouWFsIpDkVH3+fzTqEaFitEGlLRHBw+tTqWxaCp
3vE5n5CABPEi0z12FwhgwSLcxixYPYei8CBwS8/1yi3yYUuT9pyrJt/nHfoABqRm
C0EoGdRCcxSR0lxlScnNthyHENcRV0DK9b3hEb/4+qkkJGFZEmrNQjXEvx+Kiqb5
ivBGhwVJxM4jsWmNChQ3XnyCUuciPm6zp9lsq+SreSZNSgP0QtDO0ELfa7VHiXtC
034leUTx4SSPJd5F9t4i2VVkuV/YdW+TBroTsJ4zNHxMV7efjs5b5uaAHqm1CPF/
LKIM9EEdYNZyb+9yPp875SfkZD+fmAjjE9anRDkRHx9XXS2ZE4H6Ey1zcmC4gpDh
1tZYyDmrPnUW8CugrAxp/UBvP/n5UXpDM9AYHA4NEx8IyzaL2/AD72oU59PawyeL
J81TVfWQSNPwoZUVXk+x/Qk9PZamoU3dsU2VQ2qrj59zPXraxTUtz7eYvXV1ND91
m5TPKregAcyEFySlvGNmjlc4PJ3AUrTgu3ilZ9jUYVRgQxrrSEwDvVgD3QZY4nAr
alJ62HoyYs9g0wo01kr0efh6NA3VGtdpur1BWlPaa+44ba0vy5o5kDlh7JgjuvpY
Jb4Xd7uOn5pfSRle7r+fozz5tT0mvgn+ZYq7yJpXXpFnTmHT4pXHUvn1TiikhgSE
pcMojimEJEtfva0dr3BITYkgBKW4REZXHX8OMAlMA4qsge4ELFmA41GrwwBLxrsl
tK76nIbPtA8PjRy4cecuS4+sAsU0YvmXlqmZBG3bZr5li1mjstnstMArqKpSxvNl
1XqcBoKLyxEfdjgyBotDv2Js8qy+AaZ3rfT2/TsqBqHHLNKlx11Q1mCmgbZqgAGW
YiEcAyxZejDMV4jz/Wmh2pjntkx8eecXb+8z80/CRln27eI6gRUV27aYfzp054QX
tzeUwdvHD962epl6+FWSW5mV3qoBUBSmDQaWlIeUViC8HQVzuxB3xWxXvfWKs/Ni
GpDUAAMsBlg9b4APvVRzVuj99QcHJ7y049NXdo0etGXHDkuPbEU0YgGwtm+3/PyN
PWhnQxm6a9KQnb+s0Ai/wgCr53U/NoQwDTANMA3IogEGWAywetgI519WhpmDqxYJ
Rj+zmSILYGXKm3vNA5MU0EvIAEuWxxCrwzTANMA00Ps0wACLAVYPA6ywyzVnBF5f
DjtAzVe0wFe4bau5Z06RooW2MMDqfQ9NdkZMA0wDTAOyaIABFgOsngRYmC3okV34
8xLhqKc2STrdJg3d+fkbey2DkxlgyXLbszpMA0wDTANMA52tAQZYDLB6EmDBfHVW
3XvqO/snvNhgvqKkNfb5rVs2mXnnI5u2Ap0Rs2B19iOsu+QjEUNUWSWWdcPf0JJy
zLqQS0uQzx2B8FHlVURyeRXW8ZXKIC+XozAhvUkD6CERpRXoMChYDrxNp4Z+i7kX
4p7MFslpk/ZarcwAiwGWAuFIy/01oLzcPbNgzXL1kU9ubBQzTh2FQ3fBiGUVltJq
p+/KCgywulLbXXYsjEMOuflbQ8N3h0duDw2/mJBEVxXseAFdGadnbQkJg2T81U3N
AGN1XCyT0Is1EFBUdigqZld4JPrMvoioNs1RRb89G5eItQux77bQcOfcgjbt3ou1
KpdTY4DFAEsOo4Jc+mKrQmC+OqfpPeXNPZLRV5KkNW7wts0bTRTKS8gAq9XL2hMr
AIN0ktO4s2exhi53/vxUG9uESvlMCI0sr9oZHMqdOU0knznzu69fTEV1T1QRa3OX
aQBLMw3GcnDKZFHwJwQCqfWXWm4G+u0ES0vuwgXS386dM07LbNPuXXaOPfRADLAY
YPUMwIL5yi09D6kNRg7c8OmrEikPJNMfvLJrylt7rcNTFeduZIClONdCji0hgJWa
jpWysKogltua6uScUFkjF/kEsELCuLNnyDqqZ8/+7uvPAEsuiu3FQsJLKwYbGtGF
dLHSZZsICf12gp09+jDpyQIBrKdt2r0Xa1Uup8YAiwFWzwAs5L66oOX72Wu7J0pM
HmzqKEQyz03rTZDKQS63R8eFMMDquA4VUELnARZcNhopaYs9vX7y9cNf5cTkEDk5
HxVQjaxJctEAAyy5qLEzhDDAYoDVAwAL5iuXlNxff9TCwjjNRF81NmIhBN42Mr0z
7pZ2yGSA1Q6lPWwXBPMGFZcnVtbGV9TgL02MHldRg9heSb9wQHEZfsJ2VAvj60gK
pFHkYiFwryDOF3FOMeVV2AhRzb7BQz7QJ6qsCjLDyypDistbsGDhEAjSAhjFlFcn
VBCZkC8V2oL/QhQtqIb60eVVseXVmKKB+qWX/ym8dA1/scWTD5/3KijG0RP4+nDr
0OUOcZpUAtrWbHgy8shDA3Hl5BAkXr6gOKK0Ek2iCkTsDoug70j/RK8QXZGKGlw+
7wLSP3GZoFv8F/0Qwmln4DtkNa4CLkezHYx2mEj+EqMm7bcPC4eCZFxHXERMgwgs
Lm8ZsCAkiO+6aBUaINVVmAWrIx2g1X0ZYDHA6gGAFVJbfVHX79NXdk58WXryYFPe
mjhkx8Z1JoGVbZtN0+qt0r4KDLDap7dm98LqfhrJadNcXOZ7eH7j4no6LsE6K+d7
bx+E6LrlFWKIwmCGkck1r1AtMXmpl/dcd4+zsfH22XnYKBaIccswPXO6iyuEzHBx
PRwdk1hRY52Z80dA0FfOLvsjozwKiujQKC6QDDoxSc/cFhK2yNPrTGw8CUXPyOLU
VJu6CNEGanPSS0lf4xeAdu4Lj7TIyMZGSQZyzy9C89CG79w9fg0IBEVtCAqB1col
t1A9OZWeIxp5Ji6BNh4D6saQ0Flu7tj+raubS15hYFGZckLSQk8vNMkgLQMsJcVY
lKiU4hNXePv+FhBom5UbX16zNyIKu1MFmmZkBxSVyvECPVKiAC64CnP4KzLH3f3P
wODYimq77LztoWFfO7usDw5xyy/EJaB8r56Ugqvwq3+AcmISrrVf4w6Gaij6qel7
wyNxidGlL8QloN+GlhDMkoRgHBQdySk3/1h0LC791pAwh5x8ANlgo+ZdhIA5EJVZ
RtaO0PBpLq6/BwQapGagn2AjFcsAq1M7LQMsBliKDlgwXzkn56xdyZuvHh59JUla
X31w0CYyTRGi3RlgyfH5BdPRwfBI7txZEvx08cJCV/cffPwQ2zvK3AKxIxiKYPvR
S03/0tH5NRPTvgIBqg01Mh5nY3cxPpFYqvgRBeMTRi/E8/JCLn7n7HI8Ju4dc4uB
JExY6Vldve/c3E0bR6IAZbaGhH5kZfWUrm4fgeAlIyMMq+fiExCzIgVYOAQOZJ+T
t9jD6w1Ts8c1NDkV5Rf09YeZW+4MiwC3iRkIYzOJskIbVFVe1Tc4GBnDaai/oK2j
lphyOCJKdI7nzv3uJ4rBIgOhlTWnpESbDWya5er2qokp2oPyoaXVtpBQSYMHBmzz
jOzv3NzQWkTYDNTUetvMXC0pFeeL3YmQ8+cEicmwbcjxAj1SonwLS3GhSWg5lKmi
MszYBGQ8zMJykK4eNqI7fenoBLJBAoVVvv5DjI37qav319TElyWeng7Z+eKegCtl
lJ75uYPTMAuL5/T10Sv6CYWvmJigv63y8ffILxTDENQbVlIBqv7cweE5AwMc92ld
3eGWVjopaS8YGjaNwYKFEkfZFBz6jpkFOjZt1Rum5iu8fJzzCmBUQ3dlgNWpnVbO
gIW1ipt+JBGm5V/FNVuVg5qSdaT+S39qik7Nim21pizCZZfcsjS22HPT7h5cU6Vs
EADbFdZ1btU/KFo8Z+iujf8zxo6devPIIpwBlixakrEOXCEHI6PJdCfAkKbmMwYG
TyOw9+zZr+zsbbLz4F4BXY20tubU1XlwUSU18UUofMPUFIwFA5gIsBKSgDVUyCAD
wxe0tUEbpDKkaWhwQsEaP3+YH+gQiHFoS3DIsxj5IBaxwBCrdHGAisqrpmZ0SJMM
csdYCBvGty6uoKWGNmAXgQBwBgOYT0EJxSACWHR3La3+OjqAMMxGfE1f3ywj+2BU
jOgcVVV/DwiC71La0qCp+YqJaT9lJcJbFPLU1V82NlJPSsWYisoYs22yc6c4OIja
jDrggLNnP7e2/gBTxnCO2EVVVZCUynJAyNj3mlbDdbTPySca5i/i47q6QwwMcRGJ
qqFhXFyhcLqT8zx3z8fQbS6eJz0H21FfQ31raBjsWJCAl0CTjCxyUXCN8BM6IS2o
LBT209BY5uWDakBzkuyqrBKm2WHm5qLLir6NY104/5qxCboQbYY4yB29F27l/wUG
PY7ujZo8BVKm76OhMd/dwzGnAA5NeCRZkHu7+0CrO8oNsEAGweXlkxwc5nh4fObk
ZJ2XV3j16gpf3zMJCdfv3KEQg7+1N296Fxcv8fGZ6e5unZtbeu2aFN/gv//+91/R
tWvnExOnOjtD2pcuLsfi4rIuXbp97564Mr78LyRkhpsbKkDUrX//Lb52zTw7+xs3
tx/8/FC5WcbCxpqbNz2Lin4PCvrcyenv2NjQ8vLb//4r1Yab9+5BJiRDPo5C9rpx
42xCwiRHxx0REdU3b0oJx3+xS2JNzeqAgG/5Hb91c3MuLESTmta8d/9+Rl3dqfh4
SNscFhZfVYV9Jc9rwtgxR3T1Q6rrWr14j0IFpG53Ssxeu1J75JONUre3TFqThu6a
NvyQTURat69OyABLjr1UCrCe1tNb4eUNXwkcZH6FBIYm2/NIoaEBzNoZFn4iJv5z
bMHAo6Hxrrk5RhQa6XJBArAG6urMc3c/G5+4LTTsdVNTHrCEH1laYNiDSQz1MYgO
NTamMPS2qSkMUbB4gXue1tOVAixUDiguXeXrx6kLIeR1U5O/AoMuxCctdPfEsIeG
4VhgILSTepcaAEtbGzCEE1FJTA4vqUBCo1YB6zVj400hYSdi4hAI34cfWR/T1l7t
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

------------EENMMxfYimu4ElrWLQlS6s--
